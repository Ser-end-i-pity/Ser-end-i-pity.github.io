<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/2022/12/29/Git/</url>
    <content><![CDATA[<p>分布式版本控制工具 , 远程仓库 , IDEA + Git 的使用</p>
<span id="more"></span>

<h4 id="一-Git-使用"><a href="#一-Git-使用" class="headerlink" title="一 Git 使用"></a>一 Git 使用</h4><h5 id="1-1-Git-安装"><a href="#1-1-Git-安装" class="headerlink" title="1.1 Git 安装"></a>1.1 Git 安装</h5><p>下载地址 : <code>https://git-scm.com/downloads</code></p>
<p>Git 要装到英文目录下。安装过程都是一路 next 。</p>
<p>安装好之后,在文件夹右键就可以看到 Git 选项 – <strong>Git Bash here</strong>。</p>
<h5 id="1-2-基本配置"><a href="#1-2-基本配置" class="headerlink" title="1.2 基本配置"></a>1.2 基本配置</h5><p>通过如下两行命令做一个基本配置,配置的信息将展示在每一次提交的后面,所以不要使用不方便公开的信息,如果不配置以后每一次提交的时候都会让你输入用户名和密码,配置方式如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="variable">$git</span> config --global user.email <span class="string">&quot;10086@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个配置会保存在当前用户目录下的 <code>.gitconfig</code> 文件中。</p>
<h5 id="1-3-Git仓库初始化"><a href="#1-3-Git仓库初始化" class="headerlink" title="1.3 Git仓库初始化"></a>1.3 Git仓库初始化</h5><blockquote>
<p>在需要Git 仓库管理的文件夹目录下右键 Git Bash here 进入命令操作</p>
</blockquote>
<img src="/2022/12/29/Git/01.png" style="zoom:80%;">

<ol>
<li>工作区就是本地的文件夹；</li>
<li>本地的文件夹要通过 git add 命令先将它们添加到暂存区中；</li>
<li>git commit 命令则可以将暂存区中的文件提交到本地仓库中去。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> --version</span><br><span class="line">	<span class="comment">#查看当前git 的版本</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> init			</span><br><span class="line">	<span class="comment"># git仓库初始化,执行完成后当前目录下会多出一个.git的隐藏文件夹,所有git需要的数据和资源都存放在该目录中</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> status</span><br><span class="line">	<span class="comment"># 查看仓库状态</span></span><br><span class="line"><span class="variable">$git</span> add 文件名 </span><br><span class="line">	<span class="comment"># 提交文件到暂缓区</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> add .</span><br><span class="line">	<span class="comment"># 添加当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">	<span class="comment"># 暂缓区提交到本地仓库</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> commit --amend</span><br><span class="line">	<span class="comment"># 自动打开vi 编辑器,修改上一次提交的备注信息</span></span><br><span class="line"><span class="variable">$git</span> commit -am <span class="string">&quot;message&quot;</span></span><br><span class="line">	<span class="comment"># 一步到位, add 和 commit</span></span><br></pre></td></tr></table></figure>

<p>如果要写的备注信息很多,直接执行 <code>git commit</code> 命令,进入vi 编辑器。</p>
<p><strong>vi 编辑器操作:</strong> </p>
<ul>
<li>进入 先按 <code>i</code> 进入编辑模式</li>
<li>按 <code>esc</code> 退出 编辑模式,再按 <code>:</code>  ,然后 输入 <code>wq</code> 保存退出</li>
<li><code>q!</code>退出不保存</li>
</ul>
<h5 id="1-4-查看提交日志"><a href="#1-4-查看提交日志" class="headerlink" title="1.4 查看提交日志"></a>1.4 查看提交日志</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span></span><br><span class="line">	<span class="comment"># 查看以往仓库中提交的日志,版本号,提交者,备注等信息, 如果信息很多的话,按 空格 翻页</span></span><br></pre></td></tr></table></figure>

<p>如果想查看提交时文件的变化, 加上 -p 参数即可,如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p 11.txt</span><br></pre></td></tr></table></figure>

<p>绿色的 + 表示新增的行, 红色的 - 表示删除的行。</p>
<p>查看过程中按 <code>q</code> 键退出查看。</p>
<h5 id="1-5-查看更改前后的差异"><a href="#1-5-查看更改前后的差异" class="headerlink" title="1.5 查看更改前后的差异"></a>1.5 查看更改前后的差异</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> diff </span><br><span class="line">	<span class="comment"># 命令可以查看工作区和暂存区的区别以及工作区和最新提交的差别。</span></span><br><span class="line"><span class="variable">$git</span> diff HEAD</span><br><span class="line">	<span class="comment"># 查看工作区和本地仓库最新提交的是否差别 HEAD是一个指针,指向最新的版本</span></span><br></pre></td></tr></table></figure>

<h5 id="1-6-压缩提交历史"><a href="#1-6-压缩提交历史" class="headerlink" title="1.6 压缩提交历史"></a>1.6 压缩提交历史</h5><p><code>git rebase -i</code> 命令可以实现提交历史的压缩。比如我们在开发某一个功能时,提交了很多次,当所有功能都写完时,想将这些提交压缩为一个,就可以使用该命令。</p>
<h5 id="1-7-代码撤销"><a href="#1-7-代码撤销" class="headerlink" title="1.7 代码撤销"></a>1.7 代码撤销</h5><p>撤销情况分为四种情况:</p>
<ol>
<li><p>本地工作区撤销</p>
<p><code>git checkout -- 文件名</code> 撤销上一次保存的更改</p>
</li>
<li><p>暂存区撤销</p>
<p><code>git reset HEAD</code>  恢复到本地仓库最新的版本</p>
</li>
<li><p>本地仓库撤销</p>
<p><code>git reset --hard 版本号</code>    版本号通过<code>git log</code> 查看 ,恢复到某个提交的时候</p>
<p>这个操作只要有版本号可以重新恢复到某个提交的状态。如果恢复到了最初状态并清空了版本号就不行,这时候可以通过命令 <code>git reflog</code> 查看。</p>
<p><code>git reset --hard HEAD</code>  恢复到最新版本</p>
<p><code>git reset --hard HEAD^</code>恢复到上一个版本</p>
<p><code>git reset --hard HEAD^</code>恢复到上上一个版本, ^ 以此类推</p>
</li>
<li><p>远程仓库撤销</p>
<p>​    其实远程仓库是没有撤销的,就在本地仓库撤销就行了。</p>
</li>
</ol>
<h5 id="1-8-分支的创建切换以及合并"><a href="#1-8-分支的创建切换以及合并" class="headerlink" title="1.8  分支的创建切换以及合并"></a>1.8  分支的创建切换以及合并</h5><p><code>git branch</code>  查看所有分支, * 表示当前的分支</p>
<p><code>git branch 分支名</code> 创建分支</p>
<p><code>git checkout 分支名</code> 切换分支</p>
<p><code>git checkout -</code>  切换到上一个分支</p>
<p><strong>合并分支</strong></p>
<p><img src="/2022/12/29/Git/02.png"></p>
<p>合并之前,分支切换到master</p>
<p><code>git merge --no-ff f1</code> 快速合并f1的分支</p>
<p><code>git log --graph</code> 命令查看分支的创建和合并</p>
<h4 id="二-远程仓库"><a href="#二-远程仓库" class="headerlink" title="二 远程仓库"></a>二 远程仓库</h4><ol>
<li>Github</li>
<li>Gitee</li>
</ol>
<h5 id="2-1-SSH-KEY"><a href="#2-1-SSH-KEY" class="headerlink" title="2.1 SSH KEY"></a>2.1 SSH KEY</h5><p>SSH KEY 的配置不是必须的，不配置的话我们就只能使用 HTTPS 协议，这样每次提交时要输入用户名 密码，略麻烦，所以还是配置一下。配置 SSH KEY 的原理很简单，采用非对称加密方式生成公钥和私 钥，公钥告诉 GitHub ，私钥留在自己电脑上(私钥不可泄露)，当我们向 GitHub 上提交数据时， GitHub 会用我们留给它的公钥加密一段消息返回给我们的电脑，如果我们能够用私钥解密成功，说明 是合法的用户，这样就避免我们输入用户名密码了。大致的原理就是这样，现在很多免登录的系统都采 用了这种方式，比如 Hadoop 免登录配置也是这样。那我们就来看看这个 SSH KEY 要怎么生成。</p>
<h5 id="2-2-配置-SSH-KEY"><a href="#2-2-配置-SSH-KEY" class="headerlink" title="2.2 配置 SSH KEY"></a>2.2 配置 SSH KEY</h5><ol>
<li>生成 SSH z指纹</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line"><span class="comment"># 输入后 直接按回车, 默认配置</span></span><br><span class="line"><span class="comment"># 然后它会在当前用户目录下生成 .ssh 文件夹,里面就是公钥和密钥文件</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加 ssh 到 ssh-agent 中</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试ssh是否绑定成功</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<h5 id="2-3-将公钥告诉-Github"><a href="#2-3-将公钥告诉-Github" class="headerlink" title="2.3 将公钥告诉 Github"></a>2.3 将公钥告诉 Github</h5><blockquote>
<p>登录 Github ,点击右上角的向下的箭头. 选择 Settings</p>
<p>打开C盘,选择当前用户目录, .ssh 文件夹, 右键 .pub 文件,全选复制文本内容</p>
</blockquote>
<img src="/2022/12/29/Git/03.png">



<h5 id="2-4-创建远程仓库"><a href="#2-4-创建远程仓库" class="headerlink" title="2.4 创建远程仓库"></a>2.4 创建远程仓库</h5><p>Github 右上角点 <code>+</code> 号 选择 New repository</p>
<img src="/2022/12/29/Git/QQ截图20221017214813.png4.png">



<h5 id="2-5-关联远程仓库"><a href="#2-5-关联远程仓库" class="headerlink" title="2.5 关联远程仓库"></a>2.5 关联远程仓库</h5><p>首先在需要推到远程仓库的文件夹进行git 初始化并且推到本地仓库中,然后进行如下操作:</p>
<img src="/2022/12/29/Git/04.png" style="zoom:200%;">



<h5 id="2-6-远程仓库恢复"><a href="#2-6-远程仓库恢复" class="headerlink" title="2.6 远程仓库恢复"></a>2.6 远程仓库恢复</h5><p>这个就是前面所说的远程仓库撤销,如果提交了远程仓库最新版本,但是发现代码写错了,有Bug,想修改!别慌!</p>
<p>先在本地仓库操作,<code>git reset --hard HEAD^</code> </p>
<p>或者往前 <code>git reset --hard HEAD^^</code> ,</p>
<p>然后 再执行这命令 <code>git push -f</code> 强制提交。</p>
<p>因为远程仓库是最新版本,这次提交旧版本,故而强制提交。</p>
<p>当提交过第一次远程仓库以后, 以后提交直接 <code>git push</code>, 不用后面的 <code>-u origin</code> 了。</p>
<h5 id="2-7-克隆远程仓库到本地"><a href="#2-7-克隆远程仓库到本地" class="headerlink" title="2.7 克隆远程仓库到本地"></a>2.7 克隆远程仓库到本地</h5><p>先在 <code>Github</code> 复制远程仓库地址, 然后在文件夹右键 <code>git bash here</code> 输入以下命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 远程仓库地址</span><br><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:weixinqqteam/springboot-projects.git</span><br></pre></td></tr></table></figure>

<p>克隆下来的仓库有 <code>.git</code> 的文件夹, 就是在一顿写代码,修bug后,不用在进行远程配置,直接 git add, commit, <code>git push</code> 提交。 </p>
<p>除了首次拉代码用克隆命令,之后这个仓库代码发生了变化,都不用克隆,直接拉取命令 <code>git pull</code>;</p>
<p><code>git pull</code>  拉代码</p>
<p><code>git push</code>  上传代码,提交到远程仓库</p>
<p>如果远程仓库有 f1 分支, 想要把 f1 分支也克隆下来, 执行如下命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout -b f1 origin/f1</span><br></pre></td></tr></table></figure>

<p>表示根据远程仓库的 f1 分支创建一个本地仓库的 f1 分支,创建完之后进行切换,也可以通过如下命令只创建不切换:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch f1 origin/f1</span><br></pre></td></tr></table></figure>



<h5 id="2-8-代码储藏"><a href="#2-8-代码储藏" class="headerlink" title="2.8 代码储藏"></a>2.8 代码储藏</h5><p>现在有一个 master 分支，master 分支中有一个文件叫 01.txt ，该文件中只有一行数据，然后对 01.txt 执行 add 和 commit ，然后再从 master 分支中创建出一个新的分支 fa ，切换到 fa 分支上，然 后向 01.txt 中再添加一行数据，添加成功之后，不做任何事情，再切换回 master 分支，此时用 cat 命 令查看 01.txt 文件，发现竟然有两行数据，按理说 master 中的 01.txt 只有一行数据，而 fa 中的 01.txt 有两行数据。</p>
<p>上面这个操作少了两个步骤，那就是 add/commit ，fa 分支 中的数据修改之后直接切换回了 master ，而没有 add/commit 。<strong>正常情况下（修改数据后</strong> <strong>add/commit****），如果</strong> <strong>master</strong> <strong>和</strong> <strong>fa</strong> <strong>分支中的数据不一致，我们执行了</strong> git checkout <strong>-</strong> <strong>进行分支的</strong> <strong>切换，这个时候工作区中的文件内容也是会跟着变化的（大家可以通过</strong> <strong>cat</strong> <strong>命令或者直接在记事本中打</strong> <strong>开工作区的文件来查看这种变化），但是如果我在</strong> <strong>fa</strong> <strong>分支中修改了文件却没有</strong> <strong>add/commit</strong> <strong>就切换回</strong> <strong>master</strong> <strong>，此时如果工作区的文件变化了，可能会导致我在</strong> <strong>fa</strong> <strong>分支中的修改丢失，因此，这个时候工</strong> <strong>作区的文件就没有变化，即工作区的文件内容还是</strong> <strong>fa</strong> <strong>分支中修改的内容。</strong> </p>
<p><strong>解决方案</strong></p>
<ol>
<li><p>第一种解决方案就是在某一个分支修改文件之后，先 add 并且 commit 之后再去切换分支;</p>
</li>
<li><p>第二种解决方案就是储藏 (Stashing)，储藏适用在如下场景中：</p>
<blockquote>
<p>当我在一个分支 fa 中修改了文件，但是还没有完全改好，此时我并不想 add/commit ，但是这个时候有一个更急迫的事情在另外一个分支 fb 上需要我去做，我必须要切换分支。 </p>
</blockquote>
</li>
<li><p>从 fa 切换到 fb 之后，工作区的代码还是 fa 的代码，不符合我的工作要求。 </p>
</li>
<li><p>假设我不在乎问题 1，在 fb 中直接修改工作区的代码，等我在 fb 中修改完后提交后再回到 fa ，会发现我之前的代码丢失了。 </p>
<p>为了解决这个问题，Git 给我们提供了储藏 (Stashing)。 </p>
<p>现在假设一开始 master 和 fa 分支中的文件内容都是一致的，而且两个分支的工作区都是干净的，即没有东西需要 add/commit ，此时，我在 master 中修改了文件，修改完成之后，执行 git status 命 令我们看到 master 中有东西需要 add/commit ，此时我想切换到 fa 分支中去，但是并不想对 master 分支执行 add/commit ，这个时候我们可以执行如下命令，先将当前分支中的文件储藏起来：</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash</span><br></pre></td></tr></table></figure>

<p>​    执行完 git stash 命令之后，再执行 git status ，我们发现此时 master 分支已经是干净的了，此时我们可以愉快的切换到 fa 分支中去了，切换到 fa 分支之后，我们发现 master 中的修改并没 有干扰到 fa 分支，当我们完成了 fa 分支中的工作之后，再回到 master 分支，此时执行如下命令可以恢复刚刚储藏的数据：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash apply</span><br></pre></td></tr></table></figure>

<p>​    上面这个命令执行完之后，master 分支中的工作区中的文件就恢复了，此时执行 git status 就可以看到又有数据需要 add/commit 了。 </p>
<p>​    我们也可将工作区储藏多次，这个时候我们可以执行如下命令来查看储藏：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash list</span><br></pre></td></tr></table></figure>

<p><code>git stash apply</code> 表示恢复最近一次储藏，如果我们想恢复到之前的某一次储藏，可以加上储藏的名 </p>
<p>字，如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>



<p>还有一些其他的关于储藏的命令： </p>
<ol>
<li><p>恢复储藏并出栈</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<p>执行效果和 git stash apply 一样，不同的是，这里执行完之后，会将栈顶的储藏移除。 </p>
</li>
<li><p>删除某一个储藏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash drop stash@&#123;4&#125;</span><br></pre></td></tr></table></figure>

<p>最后一个参数是指储藏的名字。</p>
</li>
</ol>
<h5 id="2-9-Git-标签"><a href="#2-9-Git-标签" class="headerlink" title="2.9 Git 标签"></a>2.9 Git 标签</h5><p>查看当前仓库中的所有标签:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag</span><br></pre></td></tr></table></figure>



<p>打开标签的方式很简单, 直接通过 <code>git tag &lt;tagname&gt;</code> , 表示创建了一个名为 v1 的 tag, 这个 tag 默认是创建在最新一次的 commit 上的,如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag v1</span><br></pre></td></tr></table></figure>



<p>利用 <code>git show &lt;tagname&gt;</code> 来查看标签对应的版本信息, 如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> show v1</span><br></pre></td></tr></table></figure>



<p>通过 <code>git tag -d &lt;tagname&gt;</code> 命令删除一个标签:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag -d v1</span><br></pre></td></tr></table></figure>



<p>想给历史上的某次 commit 打一个标签呢?我们可以通过如下命令 <code>git tag &lt;tagname&gt; &lt;commitversion&gt;</code> ,如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git ta v0.0 7d519</span><br></pre></td></tr></table></figure>

<p>表示给 commit 的哈希码为 7d519 的那一次 commit 打上一个标签。</p>
<p><strong>含附注的标签</strong></p>
<p>而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字,电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。 </p>
<p>打一个含附注的标签很简单，使用 <code>git tag -a &lt;tagname&gt; -m &lt;msg&gt;</code> 命令,如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.0 -m <span class="string">&quot;文件初次建立&quot;</span> 7d519</span><br></pre></td></tr></table></figure>

<p>如果不加最后的版本号参数，表示给最新的一次 commit 打标签。 </p>
<p><strong>标签推送到远程仓库</strong></p>
<p><code>git push</code> 命令并不会把tag提交到远程仓库中去，需要我们手动提交，如下： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git push origin v0.0</span><br></pre></td></tr></table></figure>

<p>表示将 v0.0 标签提交到远程仓库，也可以通过 <code>$ git push origin --tags</code> 提交所有的 tag 到远程仓库，此时别人调用 <code>git pull</code> 更新代码之后，就能看到我们的 tag。</p>
<h4 id="三-Git-IDEA"><a href="#三-Git-IDEA" class="headerlink" title="三 Git + IDEA"></a>三 Git + IDEA</h4><h5 id="3-1-IDEA-克隆远程仓库"><a href="#3-1-IDEA-克隆远程仓库" class="headerlink" title="3.1 IDEA 克隆远程仓库"></a>3.1 IDEA 克隆远程仓库</h5><ul>
<li><p>手动克隆远程仓库, 在 Git bash here Clone</p>
</li>
<li><p>IDEA Open Project</p>
</li>
<li><p>导入项目后发现多了不同的按钮</p>
<table>
<thead>
<tr>
<th><img src="/2022/12/29/Git/05.png"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2022/12/29/Git/06.png"></td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="3-2-IDEA-中更新-amp-提交"><a href="#3-2-IDEA-中更新-amp-提交" class="headerlink" title="3.2 IDEA 中更新&amp; 提交"></a>3.2 IDEA 中更新&amp; 提交</h5><p>本地工作区提交到远程仓库</p>
<img src="/2022/12/29/Git/07.png" style="zoom:200%;">



<p>IDEA 分支</p>
<img src="/2022/12/29/Git/08.png" style="zoom:200%;">



<p>IDEA 提交远程代码忽略某些不必要的文件</p>
<p>新建 <code>.gitignore</code> 文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">out/</span><br><span class="line">*.iml</span><br><span class="line">.gitignore</span><br></pre></td></tr></table></figure>



<p>IDEA 合并本地分支</p>
<img src="/2022/12/29/Git/09.png" style="zoom:200%;">

<p>在当前master分支 合并 f1 分支</p>
<h5 id="3-3-仓库邀请其他用户"><a href="#3-3-仓库邀请其他用户" class="headerlink" title="3.3 仓库邀请其他用户"></a>3.3 仓库邀请其他用户</h5><p>在远程仓库中点设置</p>
<img src="/2022/12/29/Git/10.png" style="zoom:200%;">


]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-集合</title>
    <url>/2022/12/28/Java-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>集合的基本使用, 迭代器底层代码 , 深入分析 JDK 1.7 , 1.8 HashMap底层原理 </p>
<span id="more"></span>

<h4 id="一-什么是算法"><a href="#一-什么是算法" class="headerlink" title="一 什么是算法"></a>一 什么是算法</h4><p><strong>【1】算法:</strong></p>
<ol>
<li>可以解决具体问题:例如1+2+3+4+。。。+99+100</li>
</ol>
<p>​    解题流程=算法</p>
<ol start="2">
<li><p>有设计解决的具体的流程<br>算法1:1+2=3 3+3=6 6+4=10.……加到100 –》5050</p>
<p>算法2:(1+100)<em>50=101</em>50=5050–&gt;高斯算法</p>
<p>有评价这个算法的具体的指标–》时间复杂度    空间复杂度（从数学角度考虑)</p>
</li>
</ol>
<p><strong>【2】数据结构:</strong></p>
<p>​    就是在计算机的缓存，内存，硬盘如何组织管理数据的。重点在结构上，是按照什么结构来组织管理我们的数据。</p>
<p><strong>数据结构分为:</strong><br>(1）逻辑结构︰–》思想上的结构–》卧室，厨房，卫生间—》线性表（数组，链表)，图，树，栈，队列</p>
<p>(2）物理结构∶–》真实结构–》钢筋混凝土+牛顿力学—–》紧密结构（顺序结构)，跳转结构（链式结构)</p>
<p>集合重点讲就是 : <strong>紧密结构</strong> 和 <strong>跳转结构</strong>。</p>
<h5 id="1-1-紧密结构"><a href="#1-1-紧密结构" class="headerlink" title="1.1 紧密结构"></a>1.1 紧密结构</h5><blockquote>
<p>紧密结构典型的就是 数组</p>
</blockquote>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027014918288.png" alt="image-20221027014918288" style="zoom:200%;">



<h5 id="1-2-跳转结构"><a href="#1-2-跳转结构" class="headerlink" title="1.2 跳转结构"></a>1.2 跳转结构</h5><blockquote>
<p>线性逻辑结构如果是跳转结构, 典型的是 链表</p>
</blockquote>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015109666.png" alt="image-20221027015109666" style="zoom:200%;">

<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015207396.png" alt="image-20221027015207396"></p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015259389.png" alt="image-20221027015259389"></p>
<p><strong>跳转结构的优点 与 缺点 :</strong></p>
<p><strong>优点 :</strong> 删除元素,插入元素效率高</p>
<p><strong>缺点 :</strong> 查询元素效率低</p>
<h4 id="二-集合的引入"><a href="#二-集合的引入" class="headerlink" title="二 集合的引入"></a>二 集合的引入</h4><blockquote>
<p>数组，集合都是对多个数据进行存储操作的，简称为容器。</p>
<p>这里的存储指的是内存层面的存储，而不是持久化存储(.txt,.avi.jpg,数据库)。</p>
</blockquote>
<p><strong>数组 : 特点 :</strong></p>
<ol>
<li><p>数组一旦指定了长度，那么长度就被确定了，不可以更改。int[] arr = new int[6];</p>
</li>
<li><p>数组一旦声明了类型以后，数组中只能存放这个类型的数据。数组中只能存放同一种类型的数据。</p>
<p>int[] arr,String[] s,double[] d…..</p>
</li>
</ol>
<p><strong>数组 : 缺点 :</strong></p>
<ol>
<li>数组一旦指定了长度，那么长度就被确定了，不可以更改。</li>
<li>删除，增加元素效率低。</li>
<li>数组中实际元素的数量是没有办法获取的，没有提供对应的方法或者属性来获取</li>
<li>数组存储:有序，可重复，对于无序的，不可重复的数组不能满足要求。</li>
</ol>
<p>正因为上面的缺点，引入了一个新的存储数据的结构—》<strong>集合</strong></p>
<h4 id="三-简要集合结构图"><a href="#三-简要集合结构图" class="headerlink" title="三 简要集合结构图"></a>三 简要集合结构图</h4><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027020651831.png" alt="image-20221027020651831" style="zoom:200%;">

<h5 id="3-1-集合的应用场合"><a href="#3-1-集合的应用场合" class="headerlink" title="3.1 集合的应用场合"></a>3.1 集合的应用场合</h5><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027020906562.png" alt="image-20221027020906562" style="zoom:200%;">

<p>当需要将相同结构的个体整合到一起的时候，需要集合。</p>
<p>实际应用场合 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027021123636.png" alt="image-20221027021123636"></p>
<h4 id="四-Collection-接口"><a href="#四-Collection-接口" class="headerlink" title="四 Collection 接口"></a>四 Collection 接口</h4><h5 id="4-1-collection-常用方法"><a href="#4-1-collection-常用方法" class="headerlink" title="4.1 collection 常用方法"></a>4.1 collection 常用方法</h5><blockquote>
<p>Collection 接口的常用方法:</p>
<p>增加: add(E e) addALL(collection&lt; ? extends E&gt;c)</p>
<p>删除: clear() remove(object o)</p>
<p>修改:</p>
<p>查看: iterator()  size()</p>
<p>判断: contains(0bject o)  equals(object o) isEmpty()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        创建对象 : 接口不能创建对象 , 利用实现类创建对象</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">// 调用方法:</span></span><br><span class="line">        <span class="comment">// 集合有一个特点:只能存放引用数据类型的数据，不能是基本数据类型</span></span><br><span class="line">        <span class="comment">// 基本数据类型自动装箱，对应包装类。int---&gt;Integer</span></span><br><span class="line">        col.add(<span class="number">8</span>);</span><br><span class="line">        col.add(<span class="number">88</span>);</span><br><span class="line">        col.add(<span class="number">888</span>);</span><br><span class="line">        <span class="comment">// 这里的 col 是调用了 ArrayList的 toString 方法</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">11</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">100</span>&#125;);</span><br><span class="line">        col.addAll(list); <span class="comment">// 将另一个集合添加入 col 中</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空集合</span></span><br><span class="line">        <span class="comment">// col.clear();</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的数量为 :&quot;</span>+col.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;集合是否为空 : &quot;</span> + col.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> col.remove(<span class="number">15</span>);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中数据是否被删除: &quot;</span> + remove);</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col1.add(<span class="number">8</span>);</span><br><span class="line">        col1.add(<span class="number">88</span>);</span><br><span class="line">        col1.add(<span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col2.add(<span class="number">8</span>);</span><br><span class="line">        col2.add(<span class="number">88</span>);</span><br><span class="line">        col2.add(<span class="number">888</span>);</span><br><span class="line">        System.out.println(col1.equals(col2)); <span class="comment">// equals 比较值</span></span><br><span class="line">        System.out.println(col1 == col2); <span class="comment">// 地址一定不相等 false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合是否包含元素 :&quot;</span>+col2.contains(<span class="number">1688</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-2-Collection-遍历方式"><a href="#4-2-Collection-遍历方式" class="headerlink" title="4.2 Collection 遍历方式"></a>4.2 Collection 遍历方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col.add(<span class="number">8</span>);</span><br><span class="line">        col.add(<span class="number">88</span>);</span><br><span class="line">        col.add(<span class="number">888</span>);</span><br><span class="line">        col.add(<span class="number">1688.88</span>);</span><br><span class="line">        <span class="comment">// 方式1: 增强 for 循环, 普通for循环不行</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : col)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 方式2: iterator</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>iterator 底层简要原理 :</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027024842004.png" alt="image-20221027024842004" style="zoom:200%;">



<h4 id="五-List-接口"><a href="#五-List-接口" class="headerlink" title="五 List 接口"></a>五 List 接口</h4><h5 id="5-1-List-接口常用方法"><a href="#5-1-List-接口常用方法" class="headerlink" title="5.1 List 接口常用方法"></a>5.1 List 接口常用方法</h5><blockquote>
<p>增加: add(int index, E eLement)</p>
<p>删除: remove(int index)    remove(object o)</p>
<p>修改:  set(int index，E element)</p>
<p>查看: get(int index)</p>
<p>判断:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">8</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        list.add(<span class="number">888</span>);</span><br><span class="line">        list.add(<span class="number">8888</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.add(<span class="number">2</span>,<span class="number">1688</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.set(<span class="number">3</span>,<span class="number">1688.88</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.remove(<span class="number">2</span>);<span class="comment">//在集合中存入的是Integer类型数据的时候，调用remove方法调用的是: remove(int index)</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 集合 遍历:</span></span><br><span class="line">        <span class="comment">// 方式1: 普通 for 循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方式2: 增强 for 循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj : list)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方式3: 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-2-ArrayList-实现类-JDK-1-7-源码"><a href="#5-2-ArrayList-实现类-JDK-1-7-源码" class="headerlink" title="5.2 ArrayList 实现类 JDK 1.7 源码"></a>5.2 ArrayList 实现类 JDK 1.7 源码</h5><ol>
<li><p>底层重要属性:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031304840.png" alt="image-20221027031304840"></p>
</li>
</ol>
<p>在JDK1.7中 : 在调用构造器的时候给底层数组elementData初始化，数组初始化长度为10 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031430700.png" alt="image-20221027031430700"></p>
<p>对应内存 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031616896.png" alt="image-20221027031616896"></p>
<p>调用 add 方法 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031902285.png" alt="image-20221027031902285"></p>
<p>当数组中的10个位置都满了的时候就开始进行数组的扩容，扩容长度为原数组的1.5倍 :</p>
<h5 id="5-3-ArrayList-实现类-JDK-1-8源码"><a href="#5-3-ArrayList-实现类-JDK-1-8源码" class="headerlink" title="5.3 ArrayList 实现类 JDK 1.8源码"></a>5.3 ArrayList 实现类 JDK 1.8源码</h5><p>JDK1.8底层依旧是Object类型的数组，size:数组中有效长度:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034416589.png" alt="image-20221027034416589"></p>
<p>ArrayList al = new ArrayList(); 调用空构造器:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034644788.png" alt="image-20221027034644788"></p>
<p>add 方法 :</p>
<table>
<thead>
<tr>
<th><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034801389.png" alt="image-20221027034801389"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034831881.png" alt="image-20221027034831881"></td>
</tr>
<tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034918084.png" alt="image-20221027034918084" style="zoom:150%;"></td>
</tr>
<tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035037056.png" alt="image-20221027035037056"></td>
</tr>
</tbody></table>
<p>底层数组，在调用构造器的时候，底层数组为0，在调用add方法以后<br>底层数组才重新赋值为新数组，新数组的长度为10-》节省了内存，在add后才创建长度为10的数组</p>
<h5 id="5-4-Vector-实现类源码"><a href="#5-4-Vector-实现类源码" class="headerlink" title="5.4 Vector 实现类源码"></a>5.4 Vector 实现类源码</h5><blockquote>
<p>已经淘汰, 了解</p>
</blockquote>
<p>底层Object数组，int类型属性表示数组中有效长度:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035321786.png" alt="image-20221027035321786"></p>
<p>Vector v = new Vector(); 调用构造器 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035418162.png" alt="image-20221027035418162"></p>
<p>add 方法:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035526847.png" alt="image-20221027035526847"></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035805976.png" alt="image-20221027035805976" style="zoom:200%;">



<h5 id="5-5-泛型"><a href="#5-5-泛型" class="headerlink" title="5.5 泛型"></a>5.5 泛型</h5><blockquote>
<p>什么是泛型 ( Generic ):</p>
<p>泛型就相当于标签</p>
<p>形式 : &lt;&gt;</p>
</blockquote>
<p>没有泛型的时候使用集合 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 ArrayList集合 , 向这个集合存入学生的成绩</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">98</span>);</span><br><span class="line">        list.add(<span class="number">95</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        list.add(<span class="string">&quot;马冬梅&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历查看</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : list)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果不使用泛型的话，有缺点:<br>一般我们在使用的时候基本上往集合中存入的都是相同类型的数据–》便于管理，所以现在什么引用数据类型都可以存入集合，不方便!</p>
<p>JDK1.5 开始使用,集合中使用泛型:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入泛型的优点:在编译时期就会对类型进行检查，不是泛型对应的类型就不可以添加入这个集合。</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">98</span>);</span><br><span class="line">        list.add(<span class="number">95</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">// 遍历查看</span></span><br><span class="line">        <span class="keyword">for</span> (Integer o : list)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结  :</strong> 泛型实际就是一个&lt;&gt;引起来的参数类型，这个参数类型具体在使用的时候才会确定具体的类型。使用了泛型以后，可以确定集合中存放数据的类型，在编译时期就可以检查出来。泛型的类型:都是引用数据类型，不能是基本数据类型。</p>
<h5 id="5-6-泛型类-泛型接口"><a href="#5-6-泛型类-泛型接口" class="headerlink" title="5.6 泛型类, 泛型接口"></a>5.6 泛型类, 泛型接口</h5><p>泛型类的定义和实例化 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GenericTest&lt;E&gt;就是一个泛型类</span></span><br><span class="line"><span class="comment"> * &lt;&gt;里面就是一个参数类型，但是这个类型是什么呢?这个类型现在是不确定的，相当于一个占位</span></span><br><span class="line"><span class="comment"> *但是现在确定的是这个类型一定是一个引用数据类型，而不是基本数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    E sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(E n)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">(E[] m)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// GenericTest进行实例化:</span></span><br><span class="line">        <span class="comment">// 实例化的时候不指定泛型:如果实例化的时候不明确的指定类的泛型，那么认为此泛型为object类型</span></span><br><span class="line">        <span class="type">GenericTest</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTest</span>();</span><br><span class="line">        gt.a(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        gt.a(<span class="number">17</span>);</span><br><span class="line">        gt.a(<span class="number">9.8</span>);</span><br><span class="line">        gt.b(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化的时候指定泛型:</span></span><br><span class="line">        GenericTest&lt;String&gt; gt2 = <span class="keyword">new</span> <span class="title class_">GenericTest</span>&lt;&gt;();</span><br><span class="line">        gt2.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>继承情况:</p>
<ul>
<li><p>父类指定泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubGenericTest</span> <span class="keyword">extends</span> <span class="title class_">GenericTest</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用</span></span><br><span class="line">        <span class="type">SubGenericTest</span> <span class="variable">subGenericTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubGenericTest</span>();</span><br><span class="line">        subGenericTest.a(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>父类不指定泛型</p>
<p>如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubGenericTest2</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">GenericTest</span>&lt;E&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line"><span class="comment">//这是main方法，程序的入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(string[]args)</span> &#123;</span><br><span class="line">	SubGenericTest2&lt;string&gt; s = newSubGenericTest2&lt;&gt;();s.a ( <span class="string">&quot;abc&quot;</span> ) ;</span><br><span class="line">s.sex =<span class="string">&quot;女&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>细节 :</strong></p>
<p>泛型类可以定义多个参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span>&lt;A,B,C&gt;&#123;</span><br><span class="line">    A age;</span><br><span class="line">    B name;</span><br><span class="line">    c sex;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(A m,B n,c x)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型类的构造器是不能有泛型参数的</p>
<p>泛型类种的静态方法不能使用类的泛型 。</p>
<h5 id="5-7-泛型方法"><a href="#5-7-泛型方法" class="headerlink" title="5.7 泛型方法"></a>5.7 泛型方法</h5><blockquote>
<p>1.什么是泛型方法:<br>    不是带泛型的方法就是泛型方法<br>    泛型方法有要求:这个方法的泛型的参数类型要和当前的类的泛型无关</p>
<p>​    换个角度:<br>​    泛型方法对应的那个泛型参数类型和﹑当前所在的这个类是否是泛型类，泛型是啥无关</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 不是泛型方法 (不能是静态方法)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(E e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">b</span><span class="params">(T t)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>泛型方法定义的时候，前面要加上<T><br>原因:如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错</T></li>
<li>T的类型是在调用方法的时候确定的</li>
<li>泛型方法可否是静态方法? 可以是静态方法</li>
</ol>
<p>泛型参数存在继承关系的情况 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027074732990.png" alt="image-20221027074732990"></p>
<p><strong>通配符 :</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027075252798.png" alt="image-20221027075252798" style="zoom:200%;">

<p><strong>使用通配符 :</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027075326146.png" alt="image-20221027075326146" style="zoom:200%;">



<h5 id="5-8-泛型受限"><a href="#5-8-泛型受限" class="headerlink" title="5.8 泛型受限"></a>5.8 泛型受限</h5><ol>
<li><p>Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// a,b,c三个集合是并列的关系:</span></span><br><span class="line">        ArrayList&lt;Object&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Person&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Student&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        开始使用泛型受限:泛型的上限list&lt; ? extends Person&gt; :就相当于:;</span></span><br><span class="line"><span class="comment">        List&lt;? extends Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的子类&gt;的父类*/</span></span><br><span class="line"></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// list1 = a;</span></span><br><span class="line">        list1 = b;</span><br><span class="line">        list1 = c;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*开始使用泛型受限:泛型的下限List&lt;? super Person&gt;</span></span><br><span class="line"><span class="comment">就相当于:</span></span><br><span class="line"><span class="comment">List&lt;? super Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的父类&gt;的父类*/</span></span><br><span class="line">        List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;</span><br><span class="line">        list2 = a;</span><br><span class="line">        list2 = b;</span><br><span class="line">       <span class="comment">// list2 = c;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="六-LinkedList"><a href="#六-LinkedList" class="headerlink" title="六 LinkedList"></a>六 LinkedList</h4><blockquote>
<p>JDK 1.8 底层链表 (双向链表)</p>
</blockquote>
<h5 id="6-1-常用方法"><a href="#6-1-常用方法" class="headerlink" title="6.1 常用方法"></a>6.1 常用方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        linkedList常用方法:</span></span><br><span class="line"><span class="comment">            增加 addFirst(E e) addLast(E e)</span></span><br><span class="line"><span class="comment">                    offer(E e) offerFirst(E e) offerLast(E e)</span></span><br><span class="line"><span class="comment">            删除  poLl() JDK 1.6之后</span></span><br><span class="line"><span class="comment">                    poLLFirst( ) polLLast( )removeFirst( ) removeLast( )</span></span><br><span class="line"><span class="comment">            修改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            查看  element()</span></span><br><span class="line"><span class="comment">                    getFirst() getLast( )</span></span><br><span class="line"><span class="comment">                    indexof(object o)LastIndexOf(Object o)peek( )</span></span><br><span class="line"><span class="comment">                peekFirst( ) peekLast()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;8888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.offer(<span class="string">&quot;lll&quot;</span>);  <span class="comment">// 添加元素在尾端</span></span><br><span class="line">        list.offerFirst(<span class="string">&quot;[[ss&quot;</span>);</span><br><span class="line">        list.offerLast(<span class="string">&quot;rrr&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.poll()); <span class="comment">// 删除第一个元素</span></span><br><span class="line">        System.out.println(list.pollFirst());</span><br><span class="line">        System.out.println(list.pollLast());</span><br><span class="line">        System.out.println(list.remove());</span><br><span class="line">        System.out.println(list.removeFirst());</span><br><span class="line">        System.out.println(list); <span class="comment">// LinkList 可以添加重复的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*list.clear(); // 清空集合</span></span><br><span class="line"><span class="comment">        System.out.println(list.pollFirst()); // 输出 []</span></span><br><span class="line"><span class="comment">        System.out.println(list.removeFirst()); // 会报错*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 普通 for 循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 增强 for :</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 迭代器</span></span><br><span class="line">        <span class="comment">/*Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">        while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(it.next());</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator();it.hasNext();)&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-简要底层原理图"><a href="#6-2-简要底层原理图" class="headerlink" title="6.2  简要底层原理图"></a>6.2  简要底层原理图</h5><table>
<thead>
<tr>
<th align="center">LinkList简要原理图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221203062227686.png" alt="image-20221203062227686"></td>
</tr>
</tbody></table>
<h5 id="6-3-模拟-LinkList-源码"><a href="#6-3-模拟-LinkList-源码" class="headerlink" title="6.3 模拟 LinkList 源码"></a>6.3 模拟 LinkList 源码</h5><ul>
<li><p>首先创建一个节点类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">// 节点类</span></span><br><span class="line">    <span class="comment">// 三个属性</span></span><br><span class="line">    <span class="comment">// 上一个元素的地址</span></span><br><span class="line">    <span class="keyword">private</span> Node pre;</span><br><span class="line">    <span class="comment">// 当前存入元素</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="comment">// 下一个元素的地址</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;pre=&quot;</span> + pre +</span><br><span class="line">                <span class="string">&quot;, obj=&quot;</span> + obj +</span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getPre</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPre</span><span class="params">(Node pre)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个链表类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkList</span> &#123;</span><br><span class="line"><span class="comment">//    链中一定有一个首节点</span></span><br><span class="line">    Node first;</span><br><span class="line"><span class="comment">//    链中一定有一个尾节点</span></span><br><span class="line">    Node last;</span><br><span class="line"><span class="comment">//    计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    提供一个构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    添加元素方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123; <span class="comment">// 证明添加的元素是第一个节点</span></span><br><span class="line">            <span class="comment">// 将添加的元素封装为一个 Node 对象</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            node.setPre(<span class="literal">null</span>);</span><br><span class="line">            node.setObj(o);</span><br><span class="line">            node.setNext(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 当前链中第一个节点变为 node</span></span><br><span class="line">            first = node;</span><br><span class="line">            <span class="comment">// 当前链中最后一个节点变为 node</span></span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 已经不是链中的第一个节点了</span></span><br><span class="line">            <span class="comment">// 将添加的元素封装为一个 Node 对象</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            node.setPre(last); <span class="comment">// node 的上一个节点就是当前链中的最后一个节点last</span></span><br><span class="line">            node.setObj(o);</span><br><span class="line">            node.setNext(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 当前链中的最后一个节点的下一个元素 要指向 node</span></span><br><span class="line">            last.setNext(node);</span><br><span class="line">            <span class="comment">// 将最后一个节点变为 node</span></span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 链中元素数量加 1</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到集合中元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    通过下标获得元素</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取链表的头元素</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            n = n.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n.getObj();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyLinkList</span> <span class="variable">ml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkList</span>();</span><br><span class="line">        ml.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        ml.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        System.out.println(ml.getSize());</span><br><span class="line">        System.out.println(ml.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="6-4-LinkedList-源码解析"><a href="#6-4-LinkedList-源码解析" class="headerlink" title="6.4 LinkedList 源码解析"></a>6.4 LinkedList 源码解析</h5><blockquote>
<p>JDK 1.7 和 JDK 1.8 的LinkedList的源码是一致的</p>
</blockquote>
<p>点开 LinkedList 源码看, 发现主要的点跟上面模拟代码的都差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; &#123;<span class="comment">//E是一个泛型，具体的类型要在实例化的时候才会最终确定</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//集合中元素的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Node的内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;<span class="comment">//当前元素</span></span><br><span class="line">        Node&lt;E&gt; next;<span class="comment">//指向下一个元素地址</span></span><br><span class="line">        Node&lt;E&gt; prev; <span class="comment">//上一个元素地址</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;<span class="comment">//链表的首节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;<span class="comment">//链表的尾节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素操作:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;<span class="comment">//添 加的元素e</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//将链表中的last节点给1如果是第一-个元素的话1为null</span></span><br><span class="line">        <span class="comment">//将元素封装为--个Node具体的对象:</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//将链表的last节点指向新的创建的对象:</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)<span class="comment">//如果添加的是第一个节点</span></span><br><span class="line">            first = newNode;<span class="comment">//将链表的first节点指向为新节点</span></span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果添加的不是第一个节点</span></span><br><span class="line">            l.next = newNode;<span class="comment">//将l的下一个指向为新的节点</span></span><br><span class="line">        size++;<span class="comment">//集合中元素数量加1操作</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//获取集合中元素数量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//通过索引得到元素:</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span> <span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkElementIndex (index) ;<span class="comment">//健壮性考虑</span></span><br><span class="line">        <span class="keyword">return</span> node (index).item;</span><br><span class="line">    &#125;</span><br><span class="line">    Node &lt;E&gt; node (<span class="type">int</span> index) &#123;</span><br><span class="line">        <span class="comment">// 如果index在链表的前半段，那么从前往后找</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt;(size &gt;&gt; <span class="number">1</span>))&#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">                x = x.next ;</span><br><span class="line">            <span class="keyword">return</span> x ;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果index在链表的后半段，那么从后往前找</span></span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>size-<span class="number">1</span>;i&gt;index;i--)</span><br><span class="line">                x = x.prev ;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-5-iterator-相关"><a href="#6-5-iterator-相关" class="headerlink" title="6.5 iterator()相关"></a>6.5 iterator()相关</h5><p><strong>对应关系</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221204230549169.png" alt="image-20221204230549169" style="zoom:200%;">

<p><strong>具体实现</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221204231403874.png" alt="image-20221204231403874" style="zoom:200%;">



<p>增加 for 循环底层也是通过迭代器实现的。</p>
<h5 id="6-6-ListIterator-迭代器"><a href="#6-6-ListIterator-迭代器" class="headerlink" title="6.6 ListIterator 迭代器"></a>6.6 ListIterator 迭代器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">       <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">       Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">               list.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码出现如下异常:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">并发修改异常</span><br></pre></td></tr></table></figure>

<p>出错原因: 就是迭代器和list 同时对集合进行操作</p>
<p>解决办法: 就是让一个”人”去做 - &gt; 引入 ListIterator 迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">        ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">                it.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>迭代和添加都是由 ListIterator 完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">        ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">                it.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(it.hasPrevious());</span><br><span class="line"><span class="comment">//        逆向遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasPrevious())&#123;</span><br><span class="line">            System.out.println(it.previous());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h4 id="七-Set-接口"><a href="#七-Set-接口" class="headerlink" title="七 Set 接口"></a>七 Set 接口</h4><blockquote>
<p>这个无序是相对 List 接口部分来说的 , 无序不等于随机</p>
</blockquote>
<p>特点 : 唯一 , 无序</p>
<p>遍历方式 : </p>
<ol>
<li>迭代器</li>
<li>增强 for 循环</li>
</ol>
<p>实现类 : </p>
<ol>
<li>HashSet</li>
</ol>
<h5 id="7-1-HashSet"><a href="#7-1-HashSet" class="headerlink" title="7.1 HashSet"></a>7.1 HashSet</h5><p>HashSet 常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        hs.add(<span class="number">19</span>);</span><br><span class="line">        hs.add(<span class="number">19</span>);</span><br><span class="line">        hs.add(<span class="number">8</span>);</span><br><span class="line">        hs.add(<span class="number">81</span>);</span><br><span class="line">        hs.add(<span class="number">18</span>);</span><br><span class="line">        System.out.println(hs.size()); <span class="comment">// 唯一, 无序</span></span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>放入自定义的引用数据类型的数据 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;Student&gt; hs = new HashSet&lt;&gt;();</span><br><span class="line">        hs.add(new Student(17,&quot;王木木&quot;));</span><br><span class="line">        hs.add(new Student(16,&quot;王木木最棒&quot;));</span><br><span class="line">        hs.add(new Student(16,&quot;王木木厉害aa&quot;));</span><br><span class="line">        hs.add(new Student(17,&quot;王木木&quot;));</span><br><span class="line">        System.out.println(hs.size());</span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面的自定义的类型不满足唯一 , 无需的特点。</p>
<h5 id="7-2-HashSet-简要原理"><a href="#7-2-HashSet-简要原理" class="headerlink" title="7.2 HashSet 简要原理"></a>7.2 HashSet 简要原理</h5><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205074253607.png" alt="image-20221205074253607" style="zoom:200%;">

<p>所以上面的自定义类型的解决方法就是在自定义类型重写 <code>hashCode</code> 和 <code>equals</code> 方法 , 这样就不会出现相同的元素了。</p>
<h5 id="7-3-LinkedHashSet-的使用"><a href="#7-3-LinkedHashSet-的使用" class="headerlink" title="7.3 LinkedHashSet 的使用"></a>7.3 LinkedHashSet 的使用</h5><p>特点 : 唯一, 有序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;Student&gt; hs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(hs.size());</span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其实就是在 HashSet 的基础上，多了一个总的链表,这个总链表将放入的元素串在一起，方便有序的遍历。</p>
<h5 id="7-4-比较器的使用"><a href="#7-4-比较器的使用" class="headerlink" title="7.4 比较器的使用"></a>7.4 比较器的使用</h5><ul>
<li>以 int 类型为案例:<br>比较的思路:将比较的数据做差,然后返回一个int类型的数据，将这个int类型的数值按照 =0 &gt;0 &lt;0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(a-b); <span class="comment">// =0 &gt;0 &lt;0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>以 String 类型比较</p>
<p>String类实现了Comparable接口,这个接口中有一个抽象方法compareTo, String类中重写这个方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">System.out.println(a.compareTo(b));</span><br></pre></td></tr></table></figure></li>
<li><p>Double 类型比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">9.6</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9.3</span>;</span><br><span class="line">System.out.println(((Double)a).compareTo((Double)b));</span><br></pre></td></tr></table></figure></li>
<li><p>自定义类型比较</p>
<p><strong>内部比较器</strong></p>
<ul>
<li><p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, student.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">// 按照年龄进行比较</span></span><br><span class="line">       <span class="comment">// return this.getAge() - o.getAge();</span></span><br><span class="line">        <span class="comment">// 按照名字比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        System.out.println(s1.compareTo(s2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>外部比较器</strong></p>
<ol>
<li><p>Student 类 没有实现 Comparable 接口</p>
</li>
<li><p>新建一个比较器的类实现Comparator 接口并重写compare 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 比较年龄</span></span><br><span class="line">        <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">compare</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Compare</span>();</span><br><span class="line">        System.out.println(compare.compare(s1, s2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ul>
<p>外部比较器和内部比较器 比较 :<br><strong>答案:</strong> 外部比较器，多态,扩展性好</p>
<h5 id="7-5-TreeSet-的使用及原理"><a href="#7-5-TreeSet-的使用及原理" class="headerlink" title="7.5 TreeSet 的使用及原理"></a>7.5 TreeSet 的使用及原理</h5><p>存入 Integer 类型数据 (底层利用的是内部比较器)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="number">1</span>);</span><br><span class="line">        ts.add(<span class="number">11</span>);</span><br><span class="line">        ts.add(<span class="number">11</span>);</span><br><span class="line">        ts.add(<span class="number">1111</span>);</span><br><span class="line">        ts.add(<span class="number">111</span>);</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的案例可以看出</p>
<p>特点 : 唯一 , 无序(没有按照输入顺序进行输出)，有序(按照升序进行遍历)</p>
<p>**原理 : ** 底层 : 二叉树 (数据结构中的一个逻辑结构)</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205083225391.png" alt="image-20221205083225391" style="zoom:200%;">

<p>放入 String 类型数据 : (实现内部比较器)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="string">&quot;blili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;clili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;alili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;dlili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;glili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;alili&quot;</span>);</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>放入自定义类型  Student 数据类型: </p>
<p><strong>内部比较器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, student.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());  <span class="comment">// 比较年龄</span></span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>外部比较器</strong></p>
<ul>
<li><p>自定义类不实现Comparable 接口</p>
</li>
<li><p>新建 Compare 比较类实现 Comparator 接口并重写 Compare 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 比较年龄</span></span><br><span class="line"><span class="comment">//        return o1.getAge() - o2.getAge();</span></span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>利用外部比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 利用外部比较器 , 自己制定</span></span><br><span class="line">        Comparator&lt;Student&gt; compare = <span class="keyword">new</span> <span class="title class_">Compare</span>();</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(compare); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>外部比较强另一种写法</strong></p>
<p>接口是不能创建对象的, 可以匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 利用外部比较器 , 自己制定</span></span><br><span class="line">        Comparator&lt;Student&gt; compare = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(compare); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205085817823.png" alt="image-20221205085817823" style="zoom:200%;">



<p><strong>TreeSet 底层的二叉树的遍历方式</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205090135573.png" alt="image-20221205090135573" style="zoom:200%;">



<h4 id="八-Map-接口"><a href="#八-Map-接口" class="headerlink" title="八 Map 接口"></a>八 Map 接口</h4><p><strong>参数类型 :</strong> k - 映射的建类型 (key)</p>
<p>​                  v - 映射的值类型 (value)</p>
<h5 id="8-1-Map-接口中常用方法"><a href="#8-1-Map-接口中常用方法" class="headerlink" title="8.1 Map 接口中常用方法"></a>8.1 Map 接口中常用方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            增加: put(K key, V value)</span></span><br><span class="line"><span class="comment">            删除: clear() remove(Object key)</span></span><br><span class="line"><span class="comment">            修改:</span></span><br><span class="line"><span class="comment">            查看: entrySet() get(Object key) keySet() size() values()</span></span><br><span class="line"><span class="comment">            判断: containsKey(object key) containsValue(Object value)</span></span><br><span class="line"><span class="comment">            equals(Object o) isEmpty()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">       Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">10101010</span>);</span><br><span class="line">       map.put(<span class="string">&quot;lili&quot;</span>,<span class="number">11112330</span>);</span><br><span class="line">       map.put(<span class="string">&quot;nana&quot;</span>,<span class="number">34566233</span>);</span><br><span class="line">       map.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">12345678</span>);</span><br><span class="line">       map.put(<span class="string">&quot;feifei&quot;</span>,<span class="number">55601010</span>);</span><br><span class="line"><span class="comment">//       map.clear(); // 清空</span></span><br><span class="line"><span class="comment">//        map.remove(&quot;lulu&quot;); // 移除</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        是否包含</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">&quot;lili&quot;</span>));</span><br><span class="line">        System.out.println(map.containsValue(<span class="number">12345678</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Integer&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">10101010</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;lili&quot;</span>,<span class="number">11112330</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;nana&quot;</span>,<span class="number">34566233</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">12345678</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;feifei&quot;</span>,<span class="number">55601010</span>);</span><br><span class="line">        System.out.println(map == map2);</span><br><span class="line">        System.out.println(map.equals(map2)); <span class="comment">//eauals讲行了重写，比较的是集合中的值是否一致</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;lili&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点 :</strong> 无序 , 唯一 ,  按照 key 进行总结 , 底层 key 遵照 哈希表的结构 (数组 + 链表), 哈希表原理必须重写 hashCode 方法 和 equals 方法。</p>
<p><strong>常用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// keySet()对集合中的key进行遍历查看:</span></span><br><span class="line">Set&lt;String&gt; set = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String s : set)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// values()对集合中的value进行遍历查看:</span></span><br><span class="line">Collection&lt;Integer&gt; values = map.values();</span><br><span class="line"><span class="keyword">for</span> (Integer i : values)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get(Object key) keySet()</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String s : keySet)&#123;</span><br><span class="line">    System.out.println(map.get(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// entrySet()</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : entries)&#123;</span><br><span class="line">    System.out.println(e.getKey() + <span class="string">&quot;-----------&quot;</span> + e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-2-HashTable-LinkedHashMap"><a href="#8-2-HashTable-LinkedHashMap" class="headerlink" title="8.2 HashTable , LinkedHashMap"></a>8.2 HashTable , LinkedHashMap</h5><p><strong>HashTable 实现类</strong> 与 <strong>HashMap 实现类</strong> 的区别 :</p>
<p>HashMap JDK 1.2 效率高 线程不安全 key可以存入null 值 , 并且key的null值也遵循唯一的特点<br>HashTable JDK1.0 效率低 线程安全 key不可以存入null值</p>
<p><strong>LinkedHashMap 实现类</strong></p>
<p>特点 : 唯一 , 有序 (按照输入顺序进行输出)</p>
<h5 id="8-3-TreeMap-实现类的使用"><a href="#8-3-TreeMap-实现类的使用" class="headerlink" title="8.3 TreeMap 实现类的使用"></a>8.3 TreeMap 实现类的使用</h5><p>**特点 : **唯一 , 有序</p>
<ol>
<li><p>key 的类型为 String 类型:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;blili&quot;</span>,<span class="number">1212222</span>);</span><br><span class="line">        map.put(<span class="string">&quot;alili&quot;</span>,<span class="number">22124422</span>);</span><br><span class="line">        map.put(<span class="string">&quot;elili&quot;</span>,<span class="number">02112232</span>);</span><br><span class="line">        map.put(<span class="string">&quot;clili&quot;</span>,<span class="number">4212222</span>);</span><br><span class="line">        map.put(<span class="string">&quot;dlili&quot;</span>,<span class="number">3212222</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>key 的类型是一个自定义的引用数据类型</p>
<ul>
<li><p>内部比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line"><span class="comment">//        return this.getAge() - o.getAge();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Student, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1003</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>),<span class="number">1013</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1103</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>),<span class="number">1223</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>外部比较器</p>
<p>自定义数据类型不实现 Comparable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Student, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1003</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>),<span class="number">1013</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1103</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>),<span class="number">1223</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;康康&quot;</span>),<span class="number">1333</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="8-4-HashMap-重要属性"><a href="#8-4-HashMap-重要属性" class="headerlink" title="8.4 HashMap  重要属性"></a>8.4 HashMap  重要属性</h5><table>
<thead>
<tr>
<th align="center">HashMap简要原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221206043533536.png" alt="image-20221206043533536" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>**JDK 1.7 **</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. HashMap的K, V的值,在创建对象的时候确定: K: Integer V:String </span></span><br><span class="line"><span class="comment">//HashMap的父类AbstractMap已经实现类Map接口,但是源码中又单独实现了Map接口</span></span><br><span class="line"><span class="comment">//这个操作就是一一个多余的操作--&gt; 集合的创作者承认 了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">	<span class="keyword">extends</span> <span class="title class_">Abs</span> tractMap&lt;K,V&gt;</span><br><span class="line">	<span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable&#123;</span><br><span class="line">	<span class="comment">//重要属性:</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> DEFAULT_ <span class="type">INITIAL</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">//定 义了一个16,-会要赋给数组的长度</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="type">MAXIMUM_</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">//定 义了一个很大很大的数</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> DEFAULT <span class="type">LOAD</span> <span class="variable">FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">//定义了一个值:0.75负载因子，加载因子</span></span><br><span class="line">	<span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;<span class="comment">//底层 主数组</span></span><br><span class="line">	<span class="keyword">transient</span> <span class="type">int</span> size; <span class="comment">//添加的元素的数量</span></span><br><span class="line">	<span class="type">int</span> threshold; <span class="comment">//定 义个变量，没赋值默认为0 ,--&gt;这 个变量是用来表示数组扩容的边界值，门槛值</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">float</span> loadFactor; <span class="comment">//这 个变量用来接收:装填因子，负载因子，加载因子</span></span><br><span class="line">    <span class="comment">// 空构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// this (16,0.75)</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">       <span class="comment">// capacity一-定最终的结果是一.个2的整数倍 (2^n) ?????</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">			capacity &lt;&lt;= <span class="number">1</span> ;</span><br><span class="line">		<span class="comment">//确定了装填因子,负载因子,加载因子: 0.75</span></span><br><span class="line">		<span class="built_in">this</span>. loadFactor = loadFactor ;</span><br><span class="line">		<span class="comment">//threshold= capacity * loadFactor = 16*0.75=12</span></span><br><span class="line">		<span class="comment">//threshold=12 ---&gt; 数组扩容的边界值</span></span><br><span class="line">		threshold = (<span class="type">int</span>) Math. min (capacity * loadFactor, MAXIMUM_ CAPACITY + <span class="number">1</span>) ;</span><br><span class="line">		<span class="comment">//创建主数组,主数组的长度定义为16</span></span><br><span class="line">		table = <span class="keyword">new</span> <span class="title class_">Entry</span> [capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存储数据的方法:</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;<span class="comment">//k: Integer V:String </span></span><br><span class="line">    <span class="comment">//对空进行判断--&gt;允许key的值为null</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> put <span class="title function_">ForNullKey</span> <span class="params">(value)</span> ;</span><br><span class="line">    <span class="comment">//获取哈希码!</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash (key) ;</span><br><span class="line">    <span class="comment">// 得到元素在数组中的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor (hash, table. length) ;</span><br><span class="line">    <span class="comment">//如果放 入的数组的位置. 上没有元素的话,那么直接添加就行了,不用走这个for循环</span></span><br><span class="line">    <span class="comment">//e != null满足的话,就证明这个位置上已经有东西了</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">   		 Object k;</span><br><span class="line">        <span class="comment">//发生哈西碰撞的时候，会先比较哈希值</span></span><br><span class="line">        <span class="comment">//比较key是否是一个对象,如果key是--个对象的话,equals就不比较了</span></span><br><span class="line">        <span class="comment">//如果不是同一个对象,会比较equals方法</span></span><br><span class="line">        <span class="comment">//如果hash值一样, equals方法比较的结果也一样,那么才会走这个if方法:</span></span><br><span class="line">    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key <span class="number">1</span> key.equals(k))) &#123;</span><br><span class="line">        <span class="comment">// 获取老的 Value</span></span><br><span class="line">   		 <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e. value ;</span><br><span class="line">        e.value = value ; <span class="comment">// 新value 替换老 Value --&gt; 只替换Value 不替换 key</span></span><br><span class="line">        e.recordAccess (<span class="built_in">this</span>) ;</span><br><span class="line">   		 <span class="keyword">return</span> oldValue ; <span class="comment">// 将oldValue 返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash,key,value,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//添加元素的方法:</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value，<span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">	<span class="comment">//如果size&gt;=threshold这个变量不满足,这个if不走</span></span><br><span class="line">	<span class="keyword">if</span> ( (size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table [bucketIndex]) ) &#123;</span><br><span class="line">	resize(<span class="number">2</span> * table. length) ; <span class="comment">// 数组扩容</span></span><br><span class="line">	hash = (nu1l != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">	bucketIndex = indexFor (hash, table.length);</span><br><span class="line">    <span class="comment">//走这里创建一个Entry对象:</span></span><br><span class="line">	createEntry (hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//将下标位置上的元素给e</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table [bucketIndex] ;</span><br><span class="line">    <span class="comment">//封装对象,将这个对象给table [bucketIndex] --- &gt;链表的头插法</span></span><br><span class="line">    table [bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt; (hash, key, value, e) ;</span><br><span class="line">        <span class="comment">// 元素数量加1</span></span><br><span class="line">    size++ ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-5-HashSet-底层原理"><a href="#8-5-HashSet-底层原理" class="headerlink" title="8.5 HashSet 底层原理"></a>8.5 HashSet 底层原理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//重要属性:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() ;</span><br><span class="line">    / /构造器:</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span> <span class="params">()</span> &#123;</span><br><span class="line">    	map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() ;<span class="comment">//HashSet底层就是利用HashMap来完成的</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT) ==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-6-HashMap-1-8-底层原理"><a href="#8-6-HashMap-1-8-底层原理" class="headerlink" title="8.6 HashMap 1.8 底层原理"></a>8.6 HashMap 1.8 底层原理</h5><p>底层 : 数组 + 链表 (红黑树)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123; <span class="comment">// 1. 实现了两个 Map 接口, 重复</span></span><br><span class="line">    <span class="comment">// 3. 属性部分</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line">    <span class="type">int</span> threshold;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt; [] table; <span class="comment">// 底层数组</span></span><br><span class="line">    <span class="comment">// 2.调用空构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.调用有参构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 跳转到HashMap 中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="comment">// 6. 健壮性处理</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +loadFactor);</span><br><span class="line">        <span class="comment">// 7. loadFactory = 0.75</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">// 8. 调用 tableSizeFor 方法, 传入参数</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 9.tableSizeFor -- &gt;确定主数组的长度 --&gt; 返回的是最接近参数的2 的次幂</span></span><br><span class="line">    <span class="comment">// 10--&gt; 16 3 --&gt; 4 6 -&gt; 8</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10. 调用 put 方法</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123; <span class="comment">// 传入键值对</span></span><br><span class="line">        <span class="comment">// 11. 调用 hash 方法</span></span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 12. hash 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123; <span class="comment">// 返回值哈希码</span></span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 13. putVal 方法</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="comment">// 14. if 走</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 15. 走入 resize() 方法</span></span><br><span class="line">            n = (tab = resize()).length;<span class="number">4</span></span><br><span class="line">            <span class="comment">// 经过一个公式: (n-1)&amp;hash]算出键值对在主数组中的位置:i</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>); <span class="comment">// 封装一个节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 哈希碰撞</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 赋值给 e</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue; <span class="comment">// 替换的值返回</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-7-TreeMap-底层源码"><a href="#8-7-TreeMap-底层源码" class="headerlink" title="8.7 TreeMap 底层源码"></a>8.7 TreeMap 底层源码</h5><ol>
<li><p>原理大致介绍</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221206075246580.png" alt="image-20221206075246580" style="zoom:200%;"></li>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="comment">// 重要属性</span></span><br><span class="line">    <span class="comment">//外部比较器:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line">    <span class="comment">//树的根节点:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root = <span class="literal">null</span> ;</span><br><span class="line">    <span class="comment">//集合中元素的数量:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> size= <span class="number">0</span> ;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//空构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">    comparator = <span class="literal">null</span>;<span class="comment">//如果使用空构造器，那么底层就不使用外部比较器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span> <span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>. comparator = comparator;<span class="comment">//如果 使用有参构造器，那么就相当于指定了外部比较器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">     <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123; <span class="comment">//k,V的类型在创建对象的时候确定了</span></span><br><span class="line">         <span class="comment">//如果放入的是第一-对元素，那么t的值为null</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">         <span class="comment">//如果放入的是第一一个元素的话，走入这个if中:</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 自己跟自己比</span></span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line">			<span class="comment">// 根节点确定为 root</span></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// size值变为 1</span></span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">         <span class="comment">// 将外部比较器赋给 cpr :</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">         <span class="comment">//cpr不等于null,意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);<span class="comment">// 将元素的key 值作比较</span></span><br><span class="line">                <span class="comment">// cmp返回的值就是 int 类型的数据</span></span><br><span class="line">                <span class="comment">// 要是这个值 &lt;0 =0 &gt;0</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">// cmp == 0</span></span><br><span class="line">                    <span class="comment">//如果key的值一样，那么新的value替换老的value但是key不变 因为key是唯一的</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//cpr等于null,意味着你刚才创建对象的时候调用了空构造器，指定了内部比较器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="8-8-TreeSet-源码"><a href="#8-8-TreeSet-源码" class="headerlink" title="8.8 TreeSet 源码"></a>8.8 TreeSet 源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重要属性:</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,0bject&gt; m;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用空构造器 , 底层创建了一个 TreeMap</span></span><br><span class="line"> 	<span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TreeSet (NavigableMap&lt;E ,0bject&gt; m)&#123;</span><br><span class="line">    	<span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> m.put (e，PRESENT)= = =nul1 ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="九-Conllections-工具类"><a href="#九-Conllections-工具类" class="headerlink" title="九 Conllections 工具类"></a>九 Conllections 工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Collections 不支持创建对象，因为构造器私有化了</span></span><br><span class="line">        <span class="comment">// 里面的属性和方法都是被stotic修饰，我们可以直接用类名.去调用即可:</span></span><br><span class="line">        <span class="comment">// 常用方法:</span></span><br><span class="line">        <span class="comment">// addAll</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        Collections.addAll(list,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// binarySearch 必须在有序的集合中查找: --》排序:</span></span><br><span class="line">        Collections.sort(list); <span class="comment">// sort 提供的是升序排序</span></span><br><span class="line">        <span class="comment">// binarySearch</span></span><br><span class="line">        System.out.println(Collections.binarySearch(list, <span class="string">&quot;f&quot;</span>));</span><br><span class="line">        <span class="comment">// copy :</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;tt&quot;</span>,<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">        Collections.copy(list,list1); <span class="comment">// 将 list 1 的内容替换到list上去</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill 填充</span></span><br><span class="line">        Collections.fill(list1,<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/2022/12/25/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>Spring , SpringMVC, MyBatis 整合的基本配置</p>
<span id="more"></span>

<p>整合SSM ,其实只需创建 Mybatis 的 Bean</p>
<h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这个是连接 Spring 和 Mybatis 的桥梁--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>db.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">db.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.url</span>=<span class="string">jdbc:mysql://127.0.0.1/test01?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">db.initialSize</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">db.maxActive</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">db.minIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>



<h4 id="2-SSM-的配置"><a href="#2-SSM-的配置" class="headerlink" title="2. SSM 的配置"></a>2. SSM 的配置</h4><ol>
<li><p>spring 的 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    开始配置 MyBatis</span></span><br><span class="line"><span class="comment">        1. 配置 SqlSessionFactory</span></span><br><span class="line"><span class="comment">        2. 配置包扫描 （扫描Mapper接口）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置 SqlSessionFactoryBean 的最终目的 ， 是为了获取SqlSessionFactory 的实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        给指定包下的类取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.model&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper.xml 文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                classpath*:com/smart/shiro/mapper/*.xml</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper 接口的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springmvc 的 spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>servlet 的 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><ol>
<li><p>model 包 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper 接口 和 xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.smart.shiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>service 层 UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/u&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>基本配置大功告成! 启动服务, 游览器输入 <em><a href>localhost:8080/s/u</a></em> 就可以看到效果了。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/12/20/MySQL/</url>
    <content><![CDATA[<img src="/2022/12/20/MySQL/image-20221108183846003.png" alt="image-20221108183846003">

<span id="more"></span>

<h4 id="一-MySQL8-安装"><a href="#一-MySQL8-安装" class="headerlink" title="一 MySQL8 安装"></a>一 MySQL8 安装</h4><p>近期主要历史版本有5.0/5.1/5.5/5.6/5.7，目前最新版本是MySQL8。</p>
<h5 id="1-1-下载压缩包"><a href="#1-1-下载压缩包" class="headerlink" title="1.1 下载压缩包"></a>1.1 下载压缩包</h5><ul>
<li><p>官网下载压缩包，<code>https://dev.mysql.com/downloads/mysql/</code>,如果需要可执行安装，亦可转到下载：<code>https://dev.mysql.com/downloads/windows/installer/8.0.html</code></p>
<p><img src="/2022/12/20/MySQL/image-20221108183236472.png" alt="image-20221108183236472"></p>
</li>
</ul>
<img src="/2022/12/20/MySQL/image-20221108183510267.png" alt="image-20221108183510267" style="zoom:200%;">

<h5 id="1-2-解压与配置"><a href="#1-2-解压与配置" class="headerlink" title="1.2 解压与配置"></a>1.2 解压与配置</h5><ol>
<li><p>解压到相应的目录</p>
<p>如个人目录为 : <code>D:\mysql-8.0.31-winx64</code></p>
</li>
<li><p>环境配置</p>
<p>在安装根目录下新建一个配置文件<code>MySql.ini</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line"><span class="keyword">default</span><span class="operator">-</span><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">=</span>utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置<span class="number">3306</span>端口</span><br><span class="line">port <span class="operator">=</span> <span class="number">3306</span></span><br><span class="line"> </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir<span class="operator">=</span>&quot;D:\mysql-8.0.31-winx64&quot;</span><br><span class="line"> </span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir<span class="operator">=</span>&quot;D:\mysql-8.0.31-winx64\data&quot;</span><br><span class="line"> </span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections<span class="operator">=</span><span class="number">20</span>  </span><br><span class="line"> </span><br><span class="line"># 服务端使用的字符集默认为<span class="number">8</span>比特编码的latin1字符集</span><br><span class="line"><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">-</span>server<span class="operator">=</span>utf8</span><br><span class="line"> </span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line"><span class="keyword">default</span><span class="operator">-</span>storage<span class="operator">-</span>engine<span class="operator">=</span>INNODB</span><br></pre></td></tr></table></figure></li>
<li><p>设置系统环境变量</p>
<p> 将MySql的<code>bin</code>目录加到系统环境变量**<code>path</code>**</p>
</li>
</ol>
<h5 id="1-3-初始化"><a href="#1-3-初始化" class="headerlink" title="1.3 初始化"></a>1.3 初始化</h5><ul>
<li><p>空密码生成</p>
<p>在cmd窗口中执行：<code>mysqld --initialize-insecure --console</code>，<strong>注意：</strong>缺少参数<code>-insecure</code>会生成随即密码。 如果缺少必要的VC库，进行安装即可。</p>
</li>
<li><p>注册安装 MySQL</p>
<p>继续在cmd窗口中执行 <code>mysqld install mysql</code></p>
<p>​    其他与之相关的操作:</p>
<p>​        <strong>卸载mysql服务(需要管理员权限)</strong></p>
<p>​            sc delete mysql </p>
<p>​        <strong>移除mysql服务(需要停止mysql)</strong></p>
<p>​            mysql -remove</p>
<p>​    最后在cmd窗口中能看到 Service successfully installed.  就表示初始化成功</p>
</li>
</ul>
<h5 id="1-4-使用-MySQL"><a href="#1-4-使用-MySQL" class="headerlink" title="1.4 使用 MySQL"></a>1.4 使用 MySQL</h5><ul>
<li><p>启动 MySQL</p>
<p><code>net start mysql</code> ,如需关闭MySql，则执行 <code>net stop mysql</code></p>
</li>
<li><p>登录 MySQL</p>
<p><code>mysql -uroot</code></p>
</li>
<li><p>密码设置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 切换数据库</span><br><span class="line">   use mysql</span><br><span class="line"> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改root用户的密码为,根据需要自己来设置</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span><span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>刷新权限,一般修改密码或授权用户的时候需要使用</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="1-5-退出-MySQL"><a href="#1-5-退出-MySQL" class="headerlink" title="1.5 退出 MySQL"></a>1.5 退出 MySQL</h5><p><code>quit</code> 或者 <code>exit</code> 均可</p>
<h5 id="1-6-修改加密规则"><a href="#1-6-修改加密规则" class="headerlink" title="1.6 修改加密规则"></a>1.6 修改加密规则</h5><p>MySQL8 以前的加密规则与 MySQL8 以后的存在差异</p>
<p> mysql服务启动后,输入命令**:**mysql -uroot -p****进入服务后 , 输入以下命令配置 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER; #修改加密规则</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;  # 更新一下用户的密码 <span class="comment">--&gt;&#x27;password&#x27;根据需要设置密码</span></span><br><span class="line"> </span><br><span class="line">FLUSH PRIVILEGES; #刷新权限</span><br></pre></td></tr></table></figure>

<p>成功后在 SQLyog中 输入修改后的密码即可登录啦</p>
<h4 id="二-基本操作"><a href="#二-基本操作" class="headerlink" title="二 基本操作"></a>二 基本操作</h4><p><strong>SQL 语言分为五部分 :</strong></p>
<p>●数据查询语言(Data Query Language, DQL) : DQL主要用于数据的查询，其基本结构是使用SELECT子句，FROM子句和WHERE子句</p>
<p>的组合来查询一条或多条数据。</p>
<ul>
<li>数据操作语言(Data Manipulation Language, DML) : DML主要用于对数据库中的数据进行增加、修改和删除的操作，其主要包括:</li>
</ul>
<p>​        INSERT:增加数据</p>
<p>​        UPDATE:修改数据</p>
<p>​        DELETE:删除数据</p>
<ul>
<li>数据定义语言(Data Definition Language, DDL) : DDL主要用针对是数据库对象(数据库、表、索引、视图、触发器、存储过程、函数)进行创建、修改和删除操作。其主要包括:</li>
</ul>
<p>​        CREATE:创建数据库对象</p>
<p>​        ALTER:修改数据库对象</p>
<p>​        DROP:删除数据库对象</p>
<ul>
<li><p>数据控制语言(Data Control Language, DCL) : DCL用来授予或回收访问数据库的权限，其主要包括:</p>
<ol>
<li>GRANT:授予用户某种权限</li>
<li>REVOKE:回收授予的某种权限</li>
</ol>
</li>
<li><p>事务控制语言(Transaction Control Language, TCL) : TCL用于数据库的事务管理。其主要包括:</p>
<ol>
<li>START TRANSACTION:开启事务</li>
</ol>
<ol start="2">
<li><p>COMMIT:提交事务</p>
</li>
<li><p>ROLLBACK:回滚事务</p>
</li>
<li><p>SET TRANSACTION:设置事务的属性</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看数据库</span></span><br><span class="line">use 数据库名字; <span class="comment">-- 使用数据库</span></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 查看数据库表</span></span><br></pre></td></tr></table></figure>



<h5 id="2-1-创建数据库表"><a href="#2-1-创建数据库表" class="headerlink" title="2.1 创建数据库表"></a>2.1 创建数据库表</h5><p><strong>表(Table)</strong> 是数据库中数据存储最常见和最简单的一-种形式，数据库可以将复杂的数据结构用较为简单的二维表来表示。=维表是由行和列组成的，分别都包含着数据，如表所示。</p>
<img src="/2022/12/20/MySQL/image-20221108192134838.png" alt="image-20221108192134838" style="zoom:200%;">

<p>每个表都是由若干行和列组成的，在数据库中表中的行被称为记录，表中的列被称为是这些记录的字段。<br>记录也被称为一行数据，是表里的一行。 在关系型数据库的表里, - -行数据是指一条完整的记录。<br>字段是表里的一列，用于保存每条记录的特定信息。如上表所示的学生信息表中的字段包括”学号”、”姓名”、 “性别”和 “年龄”。数据表的一列包含了某个特定字段的全部信息。</p>
<p><strong>创建数据库表 t_student</strong></p>
<ul>
<li>建立- -张用来存储学生信息的表</li>
<li>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息</li>
<li>学号是主键=不能为空+唯一</li>
<li>姓名不能为空</li>
<li>性别默认值是男</li>
<li>Email唯一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">## 单行注释</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 创建数据库表 :</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>), <span class="comment">-- 6 显示长度</span></span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="comment">-- 10 个字符</span></span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构 : 展示表的字段详细信息</span></span><br><span class="line"><span class="keyword">DESC</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表中数据 :</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看建表语句 :</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE `t_student` (</span></span><br><span class="line"><span class="comment">  `sno` INT DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `sname` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `sex` CHAR(1) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `age` INT DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `enterdate` DATE DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `classname` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `email` VARCHAR(15) DEFAULT NULL</span></span><br><span class="line"><span class="comment">) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h5 id="2-2-数据库表列类型"><a href="#2-2-数据库表列类型" class="headerlink" title="2.2 数据库表列类型"></a>2.2 数据库表列类型</h5><ol>
<li><p>整数类型</p>
<img src="/2022/12/20/MySQL/image-20221108194251903.png" alt="image-20221108194251903" style="zoom:200%;"></li>
</ol>
<p>​    MySQL支持选择在该类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。 显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示主键自增:不使用序列，通过 <code>auto_ increment</code>,要求是整数类型</p>
<ol start="2">
<li> 浮点数类型</li>
</ol>
<p>​    <img src="/2022/12/20/MySQL/style\study\MySQL\img\image-20221108194538050.png" alt="image-20221108194538050" style="zoom:150%;"></p>
<ol start="3">
<li>字符串类型</li>
</ol>
<p>​    需要注意的是与整数类型不一样的是，浮点数类型的宽度不会自动扩充。score double(4,1)</p>
<p>score double(4,1)–小数部分为1位，总宽度4位,并且不会自动扩充。</p>
<img src="/2022/12/20/MySQL/image-20221108194832940.png" alt="image-20221108194832940" style="zoom:200%;">

<p>CHAR和VARCHAR类型相似，均用于存于较短的字符串,主要的不同之处在于存储方式。CHAR类型长度固定，VARCHAR类型的长度可变。<br>因为VARCHAR类型能够根据字符串的实际长度来动态改变所占字节的大小，所以在不能明确该字段具体需要多少字符时推荐使用VARCHAR类型，这样可以大大地节约磁盘空间、提高存储效率。<br>CHAR和VARCHAR表示的是字符的个数，而不是字节的个数</p>
<ol start="4">
<li><p>日期和时间类型</p>
<img src="/2022/12/20/MySQL/image-20221108195006302.png" alt="image-20221108195006302" style="zoom:200%;"></li>
</ol>
<h5 id="2-3-添加数据"><a href="#2-3-添加数据" class="headerlink" title="2.3 添加数据"></a>2.3 添加数据</h5><blockquote>
<ol>
<li><p>int宽度是显示宽度,如果超过,可以自动增大宽度int底层都是4个字节</p>
</li>
<li><p>时间的方式多样’1256-12-23’ “1256/12/23” “1256.12.23”</p>
</li>
<li><p>字符串不区分单引号和双引号</p>
</li>
<li><p>如何写入当前的时间now() , sysdate() , CURRENT_ DATE()</p>
</li>
<li><p>char varchar是字符的个数,不是字节的个数，可以使用binary, varbinany表示定长和不定长的字节个数。</p>
</li>
<li><p>如果不是全字段插入数据的话, 需要加入字段的名字。</p>
</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在t_student 数据库表中插入数据:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,&quot;2022-5-16&quot;,<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">10086</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,&quot;2022.5.26&quot;,<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">55</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,NOW(),<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student (sno,sname,enterdate) <span class="keyword">VALUES</span> (<span class="number">1006</span>,<span class="string">&#x27;赵六&#x27;</span>,&quot;2023.3.15&quot;);</span><br></pre></td></tr></table></figure>



<h5 id="2-4-修改-删除数据"><a href="#2-4-修改-删除数据" class="headerlink" title="2.4  修改 , 删除数据"></a>2.4  修改 , 删除数据</h5><ol>
<li>关键字，表名，字段名不区分大小写</li>
<li>默认情况下，内容不区分大小写</li>
<li>删除操作from关键字不可缺少</li>
<li>修改， 删除数据别忘记加限制条件</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表中数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span><span class="number">55</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">21</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除操作</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>



<h5 id="2-5-修改-删除数据库表"><a href="#2-5-修改-删除数据库表" class="headerlink" title="2.5 修改 , 删除数据库表"></a>2.5 修改 , 删除数据库表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据 :</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的结构:</span></span><br><span class="line"><span class="comment">-- 增加一列 :</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>); <span class="comment">-- 5 : 总位数  2 : 小数位</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> score <span class="operator">=</span> <span class="number">123.5678</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一列 (放在最前面)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一列 (放在sex列的后面)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>) AFTER sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改一列:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student MODIFY score <span class="type">FLOAT</span>(<span class="number">4</span>,<span class="number">1</span>); <span class="comment">-- modify修改是列的类型的定义,但是不会改变列的名字</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student CHANGE score score1 <span class="keyword">DOUBLE</span> (<span class="number">5</span>,<span class="number">1</span>); <span class="comment">-- change 修改列名和列的类型的定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_student;</span><br></pre></td></tr></table></figure>



<h5 id="2-6-非外键约束"><a href="#2-6-非外键约束" class="headerlink" title="2.6 非外键约束"></a>2.6 非外键约束</h5><p>为防止不符合规范的数据存入数据库，在用户对数据进行插入、修改、删除等操作时，MySQL提供了一-种机制来检查数据库中的数据是否满足规定的条件，以保证数据库中数据的准确性和一致性，这种机制就是完整性约束。<br>MySQL中主要支持以下几种种完整性约束，如表所示。其中Check约束是MySQL8中提供的支持。</p>
<img src="/2022/12/20/MySQL/image-20221109111005143.png" alt="image-20221109111005143" style="zoom:150%;">

<blockquote>
<p>建立一张用来存储学生信息的表<br>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息<br>约束:<br>建立一张用来存储学生信息的表<br>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信 息</p>
<ol>
<li>学号是主键=不能为空+唯一，</li>
<li>如果主键是整数类型，那么需要自增</li>
<li>姓名不能为空</li>
<li>Email唯一</li>
<li>性别默认值是男</li>
<li>性别只能是男女</li>
<li>年龄只能在18-50之间</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">CHECK</span>(sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">CHECK</span>(age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">AND</span> age<span class="operator">&lt;=</span><span class="number">50</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1048 - Column sname’cannot be null 不能为null</span></span><br><span class="line"><span class="comment">-- 3819 Check constraint&#x27;t_student_chk_l&#x27; is violated. 违反检查约束</span></span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry &#x27;1&#x27; for key &#x27;t_ student . PRIMARY&#x27;主键重复</span></span><br><span class="line"><span class="comment">-- 1062 Duplicate entry &#x27;ls@126. com&#x27; for key &#x27;t_ student.email&#x27;违反唯一约束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果主键没有设定值，或者用null, default都可以完成主键自增的效果</span></span><br><span class="line"><span class="comment">-- 如果sql报错，可能主键就浪费了，后续插入的主键是不连号的，我们主键也不要求连号的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">default</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>约束从作用上可以分为两类:</p>
<ul>
<li>表级约束: 可以约束表中任意一个或多个字段。与列定义相互独立，不包含在列定义中;与定义用’, ‘分隔;必须指出要约束的列的名称;</li>
<li>列级约束: 包含在列定义中,直接跟在该列的其它定义之后，用空格分隔;不必指定列名; </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> pk_stu <span class="keyword">PRIMARY</span> KEY (sno), <span class="comment">-- pk_stu 主键约束的名字</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> ck_stu_sex <span class="keyword">CHECK</span> (sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> ck_stu_age <span class="keyword">CHECK</span> (age <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">50</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> uq_stu_email <span class="keyword">UNIQUE</span> (email)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086@qq.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>



<p><strong>在创建表以后添加约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表以后添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_stu <span class="keyword">PRIMARY</span> KEY (sno); <span class="comment">-- 主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student MODIFY sno <span class="type">INT</span>(<span class="number">6</span>) AUTO_INCREMENT; <span class="comment">-- 修改自增条件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ck_stu_sex <span class="keyword">CHECK</span> (sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ck_stu_age <span class="keyword">CHECK</span> (age <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">50</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uq_stu_email <span class="keyword">UNIQUE</span> (email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的结构</span></span><br><span class="line"><span class="keyword">DESC</span> t_student;</span><br></pre></td></tr></table></figure>



<h5 id="2-7-外键约束"><a href="#2-7-外键约束" class="headerlink" title="2.7 外键约束"></a>2.7 外键约束</h5><ul>
<li>什么是外键约束?</li>
</ul>
<p>​    外键约束(FOREIGN KEY,缩写FK)是用来实现数据库表的参照完整性    的。外键约束可以使两张表紧密的结合起来，特别是针对修改或者删    除的级联操作时，会保证数据的完整性。</p>
<ul>
<li>外键是指表中某个字段的值依赖于另- -张表中某个字段的值，而被依赖的字段必须具有主键约束或者唯- -约束。被依赖的表我们通常称之为父表或者主表,设置外键约束的表称为子表或者从表。</li>
<li>举个例子:如果想要表示学生和班级的关系,首先要有学生表和班级表两张表，然后学生表中有个字段为stu_ clazz (该字段表示学生所在的班级)，而该字段的取值范围由班级表中的主键cla_ no字段(该字段表示班级编号)的取值决定。那么班级表为主表，学生表为从表，且stu_ <em>clazz字段是学生表的外键。通过stu</em> clazz字段就建立了学生表和班级表的关系。</li>
</ul>
<img src="/2022/12/20/MySQL/image-20221109171143965.png" alt="image-20221109171143965" style="zoom:200%;">

<p>主表(父表) : 班级表 - 班级编号 - 主键<br>从表(子表) : 学生表 - 班级编号 - 外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先创建父表 : 班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_class(</span><br><span class="line">	cno <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	cname <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	room <span class="type">CHAR</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加班级数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java001&#x27;</span>,<span class="string">&#x27;r803&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java002&#x27;</span>,<span class="string">&#x27;r403&#x27;</span>`t_student`);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;r103&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以一次性添加多条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java001&#x27;</span>,<span class="string">&#x27;r803&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;java002&#x27;</span>,<span class="string">&#x27;r403&#x27;</span>`t_student`),(<span class="keyword">NULL</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;r103&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询班级表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建子表 外键约束只有表级约束,没有列级约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	classno <span class="type">INT</span>(<span class="number">4</span>), <span class="comment">-- 取值参考t_class 表中的cno 字段,不要求字段名字完全重复,但是类型长度定义 尽量要求相同</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span>  KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	classno <span class="type">INT</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 在创建表以后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加学生信息</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除班级1</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先删除主表 , 再删除从表。</span></span><br></pre></td></tr></table></figure>



<p><strong>外键策略</strong></p>
<p>删除班级1 : 如果直接删除的话肯定不行因为有外键约束:</p>
<p>加入外键策略:</p>
<p>**策略 1 : no action ** 不允许操作</p>
<p>通过操作sql 来完成:</p>
<p>先把班级1 的学生对应的班级 改为 null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 先把班级2的学生对应的班级 改为 null</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> classno <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> classno <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 然后再删除班级2</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<p>**策略 2 : cascade 级联操作 ** 操作主表的时候影响从表的外键信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先删除之前的外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stu_classno;</span><br><span class="line"><span class="comment">-- 重新添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br><span class="line"><span class="comment">-- 试试更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_class <span class="keyword">SET</span> cno <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 试试删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>



<p>**策略 3 : set null ** 置空操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 先删除之前的外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stu_classno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重新添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 试试更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_class <span class="keyword">SET</span> cno <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>



<p><strong>注意 :</strong> </p>
<ol>
<li>策略2 级联操作 和 策略 3 的删除操作 可以混着使用 <code>ON UPDATE CASCADE ON DELETE SET NULL</code> ;</li>
<li>应用场合 :<ul>
<li>朋友圈删除,点赞。留言都删除 – 级联操作</li>
<li>解散班级,对应的学生置为null就可以了 – set null</li>
</ul>
</li>
</ol>
<h5 id="2-8-DDL-和-DML-的补充"><a href="#2-8-DDL-和-DML-的补充" class="headerlink" title="2.8 DDL 和 DML 的补充"></a>2.8 DDL 和 DML 的补充</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加一张表 : 快速添加 : 结构和数据跟t_student 都是一致的</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一张表 : 快速添加 : 结构跟t_student , 不需要数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 快速添加 : 只要部分列 , 部分数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据操作 : 清空数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> t_student;</span><br></pre></td></tr></table></figure>

<p><strong>delete和truncate的区别 :</strong><br>从最终的结果来看，虽然使用TRUNCATE操作和使用DELETE操作都可以删除表中的全部记录,但是两者还是有很多区别的，其区别主要体现在以下几个方面:</p>
<ol>
<li>DELETE为数据操作语言DML; TRUNCATE为数据定义语言DDL。</li>
<li>DELETE操作是将表中所有记录-条-条删除直到删除完; TRUNCATE操作则是保留了表的结构，重新创建了这个表，所有的状态都相当于新表。因此，TRUNCATE操作的效率更高。</li>
<li>DELETE操作可以回滚; TRUNCATE操作会导致隐式提交，因此不能回滚(在第+章中会讲解事务的提交和回滚)。</li>
<li>DELETE操作执行成功后会返回已删除的行数(如删除4行记录,则会显示”Affected rows: 4” ) ;截断操作不会返回已删除的行量，结果通常是”Affected rows: 0”。DELETE操作删除表中记录后，再次向表中添加新记录时，对于设置有自增约束字段的值会从删除前表中该字段的最大值加1开始自增; TRUNCATE操作则会重新从1开始自增。</li>
</ol>
<h4 id="三-DQL"><a href="#三-DQL" class="headerlink" title="三 DQL"></a>三 DQL</h4><h5 id="3-1-表的准备"><a href="#3-1-表的准备" class="headerlink" title="3.1 表的准备"></a>3.1 表的准备</h5><p>准备四张表 : dept(部门表) , emp(员工表) , salgrade(薪资等级表), bonus(奖金表)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT(</span><br><span class="line">	DEPTNO <span class="type">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">	DNAME <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">	LOC <span class="type">VARCHAR</span>(<span class="number">13</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">	<span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_dept <span class="keyword">PRIMARY</span> KEY (deptno);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">(</span><br><span class="line">	EMPNO <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	ENAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	JOB <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">	MGR <span class="type">INT</span>(<span class="number">4</span>),</span><br><span class="line">	HIREDATE <span class="type">DATE</span>,</span><br><span class="line">	SAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	COMM <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	DEPTNO <span class="type">INT</span>(<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">	<span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_DEPTINO <span class="keyword">FOREIGN</span> KEY (DEPTNO)</span><br><span class="line">	<span class="keyword">REFERENCES</span> DEPT (DEPTNO);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALGRADE</span><br><span class="line">(</span><br><span class="line">	GRADE <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	LOSAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	HISAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BONUS</span><br><span class="line">(</span><br><span class="line">	ENAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	J0B <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">	SAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	COMM <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">&#x27; RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27; BOSTON&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7902</span>, <span class="string">&#x27;1980-12-17&#x27;</span>,<span class="number">800</span>,<span class="keyword">NULL</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7499</span>,<span class="string">&#x27;ALL EN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1981-02-20&#x27;</span>,<span class="number">1600</span>,<span class="number">300</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7521</span>,<span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-22&#x27;</span>, <span class="number">1250</span>, <span class="number">500</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7566</span>,<span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-04-02&#x27;</span>, <span class="number">2975</span>, <span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7654</span>,<span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-28&#x27;</span>, <span class="number">1250</span>, <span class="number">1400</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>, <span class="string">&#x27; 1981-05-01&#x27;</span>, <span class="number">2850</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-06-09&#x27;</span>, <span class="number">2450</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7788</span>,<span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1987-04-19&#x27;</span>, <span class="number">3000</span>,<span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7839</span>,<span class="string">&#x27;KING&#x27;</span>, <span class="string">&#x27;PRESIDENT&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;1981-11-17&#x27;</span>, <span class="number">5000</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7844</span>,<span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,<span class="string">&#x27;1981-09-08&#x27;</span>, <span class="number">1500</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7876</span>,<span class="string">&#x27;ADAMS&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7788</span>, <span class="string">&#x27;1987-05-23&#x27;</span>, <span class="number">1100</span>, <span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7900</span>, <span class="string">&#x27;AMES&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">950</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7902</span>,<span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>,<span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">3000</span>,<span class="keyword">NULL</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7934</span>,<span class="string">&#x27;MILLER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7782</span>, <span class="string">&#x27;1982-01-23&#x27;</span>, <span class="number">1300</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">700</span>,<span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1201</span>, <span class="number">1400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1401</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">2001</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">3001</span>, <span class="number">9999</span>);</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 部门表: dept:department 部分，loc - location 位置</span></span><br><span class="line"><span class="comment">--员工表: emp:employee 员工 , mgr :manager上级领导编号， hiredate 入职日期 firedate 解雇日期，common: 补助</span></span><br><span class="line"><span class="comment">-- deptno 外键参考 dept - deptno字段</span></span><br><span class="line"><span class="comment">-- mgr外键参考自身表 emp.empno 产生了自关联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> salgrade;</span><br><span class="line"><span class="comment">-- losal - lowsal</span></span><br><span class="line"><span class="comment">-- hisal - highsal</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-SQL-查询"><a href="#3-2-SQL-查询" class="headerlink" title="3.2 SQL 查询"></a>3.2 SQL 查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 对 emp 表查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- * 代表所有数据</span></span><br><span class="line"><span class="comment">-- 显示部分列</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示部分行 : where 子句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">-- 显示部分列 , 部分行 :</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,mgr <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span><span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> empno 员工编号, ename 姓名,sal 工资 <span class="keyword">FROM</span> emp; <span class="comment">-- as省略，&#x27;&#x27;或者&quot;&quot;省略 了</span></span><br><span class="line"><span class="comment">-- as alias别名</span></span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">AS</span> 员工编号,ename <span class="keyword">AS</span> 姓名,sal <span class="keyword">AS</span> 工资 <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">AS</span> <span class="string">&#x27;员工编号&#x27;</span>,ename <span class="keyword">AS</span> &quot;姓名&quot;,sal <span class="keyword">AS</span> 工资 <span class="keyword">FROM</span> emp ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 算术运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,sal<span class="operator">+</span><span class="number">1000</span> <span class="keyword">AS</span> <span class="string">&#x27;涨薪后&#x27;</span>, deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> <span class="number">2500</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,comm,sal<span class="operator">+</span>comm <span class="keyword">FROM</span> emp;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 去重操作</span></span><br><span class="line"><span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> job, deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job, deptno <span class="keyword">FROM</span> emp; <span class="comment">-- 对后面的所有列组合去重，而不是单独的某一列去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal; <span class="comment">-- 默认情况下是按照升序排列的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">ASC</span>; <span class="comment">-- asc 升序 ,可以默认不写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>; <span class="comment">-- desc 降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">ASC</span> , deptno <span class="keyword">DESC</span>; <span class="comment">-- 在工资升序的情况下，deptno按照降序排列</span></span><br></pre></td></tr></table></figure>



<h5 id="3-3-where-子句"><a href="#3-3-where-子句" class="headerlink" title="3.3 where 子句"></a>3.3 where 子句</h5><p>指定查询条件使用where子句，可以查询符合条件的部分记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- where子句:将过滤条件放在where子句的后面，可以筛选/过滤出我们想要的符合条件的数据:</span></span><br><span class="line"><span class="comment">-- where子句+关系运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;&gt;</span> <span class="number">10</span>; <span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;clerk&#x27;</span>; <span class="comment">-- 默认情况下不区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="type">BINARY</span> job <span class="operator">=</span> <span class="string">&#x27;clerk&#x27;</span>; <span class="comment">-- binary 区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="operator">&lt;</span> <span class="string">&#x27;1981-12-25&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">where</span>子句<span class="operator">+</span>逻辑运算符: <span class="keyword">and</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">3000</span>; <span class="comment">-- (1500 , 3000)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="operator">&amp;&amp;</span> sal <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">3000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="keyword">BETWEEN</span> <span class="number">1500</span> <span class="keyword">AND</span> <span class="number">3000</span>; <span class="comment">-- [ 1500 , 3000]</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">where</span>子句<span class="operator">+</span>逻辑运算符: <span class="keyword">or</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span><span class="operator">||</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="keyword">IN</span> ( <span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span> , <span class="string">&#x27;ANALYST&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- where子句+模糊查询:</span></span><br><span class="line"><span class="comment">-- 查询名字中带A的员工 -- %代表任意多个字符0,1,2,</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 任意一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关于null的判断:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小括号的使用: 因为不同的运算符的优先级别不同，加括号为了可读性</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span><span class="number">1500</span>; <span class="comment">-- 先and再or and &gt; or</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> (job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span><span class="number">1500</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> (job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">AND</span> sal <span class="operator">&gt;=</span> <span class="number">1500</span>;</span><br></pre></td></tr></table></figure>



<h4 id="四-函数"><a href="#四-函数" class="headerlink" title="四 函数"></a>四 函数</h4><h5 id="4-1-函数的分类"><a href="#4-1-函数的分类" class="headerlink" title="4.1 函数的分类"></a>4.1 函数的分类</h5><p>MySQL中提供了大量函数来简化用户对数据库的操作，比如字符串的处理、日期的运算、数值的运算等等。使用函数可以大大提高SELECT语句操作数据库的能力，同时也给数据的转换和处理提供了方便。(在sql 中使用函数)<br>函数只是对查询结果中的数据进行处理，不会改变数据库中数据表的值。MySQL中的函数主要分为单行函数和多行函数两大类。</p>
<p><strong>单行函数</strong></p>
<p>单行函数是指对每一条记录输入值进行计算, 并得到相应的计算结果,然后返回给用户，也就是说，每条记录作为一个输入参数,经过函数计<br>算得到每条记录的计算结果。<br>常用的单行函数主要包括字符串函数、数值函数、日期与时间函数、流程函数以及其他函数。</p>
<p><strong>多行函数</strong></p>
<p>多行函数是指对一组数据进行运算,针对这一组数据 (多行记录)只返回一个结果，也称为分组函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 函数举例:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, <span class="built_in">LOWER</span>( ename) , <span class="built_in">UPPER</span>(ename),sal <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 函数的功能:封装了特定的一些功能，我们直接拿过来使用，可以实现对应的功能</span></span><br><span class="line"><span class="comment">-- 函数作用:为了提高select的能力</span></span><br><span class="line"><span class="comment">-- 注意:函数没有改变数据自身的值，而是在真实数据的.上面进行加工处理，展示新的结果而己。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) , <span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(sal), <span class="built_in">SUM</span>(sal),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- lower(ename) , upper(ename): 改变每一条结果，每一条数据对应一条结果 单行函数</span></span><br><span class="line"><span class="comment">-- max(sal) ,min(sal), count(sa1), sum(sal),avg(sal):多条数据，最终展示一个结果 多行函数</span></span><br></pre></td></tr></table></figure>



<h5 id="4-2-单行函数"><a href="#4-2-单行函数" class="headerlink" title="4.2 单行函数"></a>4.2 单行函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 单行函数包含:</span><br><span class="line"><span class="comment">-- 1.字符串函数</span></span><br><span class="line"><span class="keyword">select</span> ename,length( ename),<span class="built_in">substring</span>(ename,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- substring字符串 截取，2:从字符下标为2开始，3:截取长度3 ( 下标从1开始)</span></span><br><span class="line"><span class="comment">-- 2.数值函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>( <span class="number">-5</span>),<span class="built_in">CEIL</span>(<span class="number">5.3</span>), <span class="built_in">FLOOR</span>(<span class="number">5.9</span>),ROUND(<span class="number">3.14</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- dual实际就是一个伪表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-5</span>) 绝对值,<span class="built_in">CEIL</span>(<span class="number">5.3</span>) 向上取整,<span class="built_in">FLOOR</span>(<span class="number">5.9</span>) 向下取整, ROUND(<span class="number">3.14</span>) 四舍五入; <span class="comment">-- 如果没有where条件的话，from dual可以省略不写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span><span class="operator">/</span><span class="number">3</span>, <span class="number">10</span><span class="operator">%</span><span class="number">3</span>, <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.日期与时间函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(), CURTIME(); <span class="comment">-- curdate()年月日curtime()时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(), SYSDATE(), SLEEP(<span class="number">3</span>) ,NOW(), SYSDATE() <span class="keyword">FROM</span> DUAL; <span class="comment">-- now(), sysdate() 年月日时分秒:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">9999</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27; SAL ASMAN&#x27;</span> , <span class="number">7698</span> , NOW() , <span class="number">1000</span>, nu1l, <span class="number">30</span>);</span><br><span class="line"><span class="comment">-- now()可以表示年月日时分秒，但是插入数据的时候还是要参照表的结构的</span></span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure>



<p><strong>流程函数 (If Switch)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- if相关</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename , sal, IF(sal<span class="operator">&gt;=</span><span class="number">2500</span>, <span class="string">&#x27;高薪&#x27;</span>, <span class="string">&#x27;底薪&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;薪资等级&#x27;</span> <span class="keyword">FROM</span> emp; <span class="comment">-- if-else 双分支结构</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename , sal , comm, sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 如果comm是null，那么取值为0 --单分支</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="number">1</span>,<span class="number">1</span>) ,<span class="built_in">NULLIF</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- 如果value1等于value2，则返回null,否则返回value 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- case相关:</span></span><br><span class="line"><span class="comment">-- case等值判断</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename ,job,</span><br><span class="line"><span class="keyword">CASE</span> job</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">THEN</span><span class="string">&#x27;店员&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;销售&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;经理&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="string">&#x27;岗位&#x27;</span>,</span><br><span class="line">sal <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- case区间判断:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">1000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">2000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">3000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="string">&#x27;工资等级&#x27;</span>,</span><br><span class="line">deptno <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>



<p><strong>其它函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前使用的数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(), <span class="keyword">USER</span>(),VERSION() <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>



<h5 id="4-4-多行函数"><a href="#4-4-多行函数" class="headerlink" title="4.4 多行函数"></a>4.4 多行函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多行函数:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) ,<span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(sal), <span class="built_in">SUM</span>(sal), <span class="built_in">SUM</span>(sal)<span class="operator">/</span><span class="built_in">COUNT</span>(sal),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 多行函数自动忽略 null 值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>( Comm) , <span class="built_in">MIN</span>( comm),<span class="built_in">COUNT</span>( comm) , <span class="built_in">SUM</span>( comm),<span class="built_in">SUM</span>( comm) , <span class="built_in">COUNT</span>(comm) , <span class="built_in">AVG</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">-- max() ,min() , count()针对所有类型  sum(),avg() 只针对数值型类型有效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(ename) ,<span class="built_in">MIN</span>(ename) , <span class="built_in">COUNT</span>(ename) , <span class="built_in">SUM</span>( ename ) , <span class="built_in">AVG</span>(ename) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- count --计数</span></span><br><span class="line"><span class="comment">-- 统计表的记录数:方式1:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ename) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 统计表的记录数:方式2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>



<h5 id="4-5-分组-group-by"><a href="#4-5-分组-group-by" class="headerlink" title="4.5 分组 group by"></a>4.5 分组 group by</h5><p>group by : 用来进行分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计各个部门门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp; <span class="comment">-- 字段和多行函数不可以同时使用</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno; <span class="comment">-- 字段和多行函数不可以同时使用,除非这个字段属于分组</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 统计各个岗位的平均工资:</span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">LOWER</span>(job),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br></pre></td></tr></table></figure>



<h5 id="4-6-having-分组后筛选"><a href="#4-6-having-分组后筛选" class="headerlink" title="4.6 having 分组后筛选"></a>4.6 having 分组后筛选</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计各个部门的平均工资, 只显示平均工资2000以上的- 分组以后进行二次筛选having</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sal) <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal)平均工资 <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> 平均工资<span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal)平均工资 <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> 平均工资<span class="operator">&gt;</span> <span class="number">2000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 统计各个岗位的平均工资,除了MANAGER</span></span><br><span class="line"><span class="comment">-- 方法1:</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">!=</span> <span class="string">&#x27; MANAGER&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 方法2:</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job <span class="keyword">HAVING</span> job <span class="operator">!=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- where在分组前进行过滤的，having在分组后进行后滤。</span></span><br></pre></td></tr></table></figure>



<h5 id="4-7-单表查询总结"><a href="#4-7-单表查询总结" class="headerlink" title="4.7 单表查询总结"></a>4.7 单表查询总结</h5><ul>
<li><p>select语句的执行顺序<br>from– where – group by- select - having- order by</p>
</li>
<li><p>单表查询练习</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列出工资最小值小于2000的职位</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">MIN</span>(sal)</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> job</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">MIN</span>(sal) <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">-- 列出平均工资大于1200元的部门和工作搭配组合I</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,job, <span class="built_in">AVG</span>(sal)</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sal)<span class="operator">&gt;</span><span class="number">1200</span></span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="comment">-- 统计[人数小于4的]部门的平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">COUNT</span>(<span class="number">1</span>),<span class="built_in">AVG</span>(sal )</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">&lt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 统计各部门的最高工资，排除最高工资小于3000的部门。</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">MAX</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(sal) <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="五-多表查询"><a href="#五-多表查询" class="headerlink" title="五 多表查询"></a>五 多表查询</h4><h5 id="5-1-内连接"><a href="#5-1-内连接" class="headerlink" title="5.1 内连接"></a>5.1 内连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号，姓名，部门编号,部门名称:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- 14条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept; <span class="comment">-- 4条记录</span></span><br><span class="line"><span class="comment">-- 多表查询:</span></span><br><span class="line"><span class="comment">-- 交叉连接 : cross join</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> dept; <span class="comment">-- 14*4 = 56条 笛卡尔乘积:没有实际意义， 有理论意义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">JOIN</span> dept; <span class="comment">-- cross 可以省略不写，mysq1中可以，oracle中不可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自然连接: natural join</span></span><br><span class="line"><span class="comment">-- 优点:自动匹配所有的同名列,同名列只展示一次，简单</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> empno , ename, sal, dname , loc</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"><span class="comment">-- 缺点: 查询字段的时候，没有指定字段所属的数据库表，效率低</span></span><br><span class="line"><span class="comment">-- 解决:指定表名:</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.empno , emp.ename, emp.sal, dept.dname , dept.loc, dept.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 缺点:表名太长</span></span><br><span class="line"><span class="comment">-- 解决:表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,d.dname ,d.loc ,d.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept d;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自然连接natural join缺点:自动匹配表中所有的同名列，但是有时候我们希望只匹配部分同名列: </span></span><br><span class="line"><span class="comment">-- 解决: 内连接- using子句:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d 	<span class="comment">-- inner可以不写</span></span><br><span class="line"><span class="keyword">USING</span>(deptno); 		<span class="comment">-- 这里不能写natural join了,这里是内连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- using缺点:关联的字段，必须是同名的</span></span><br><span class="line"><span class="comment">-- 解决:内连接 - on子句: </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> (e.deptno <span class="operator">=</span> d. deptno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多表连接查询的类型: 1.交叉连接 cross join 2.自然连接natural join</span></span><br><span class="line"><span class="comment">-- 3.内连接- using子句 4.内连接- on子句</span></span><br><span class="line"><span class="comment">-- 综合看:内连接- on子句</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> (e.deptno <span class="operator">=</span> d. deptno)</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">3500</span>;</span><br><span class="line"><span class="comment">-- 条件:</span></span><br><span class="line"><span class="comment">-- 1.筛选条件where</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="comment">-- 2.连接条件on, using, natural</span></span><br><span class="line"><span class="comment">-- SQL99语法 :筛选条件和连接条件是分开的</span></span><br></pre></td></tr></table></figure>



<h5 id="5-2-外连接"><a href="#5-2-外连接" class="headerlink" title="5.2 外连接"></a>5.2 外连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- inner join一on子句: 显示的是所有匹配的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d </span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="comment">-- 问题:</span></span><br><span class="line"><span class="comment">-- 1.40号部分没有员工，没有显示在查询结果中</span></span><br><span class="line"><span class="comment">-- 2.员工scott没有部门，没有显示在查询结果中</span></span><br><span class="line"><span class="comment">-- 外连接:除了显示匹配的数据之外，还可以显示不匹配的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左外连接: left outer join -- 左面的那个表的信息，即使不匹配也可以查看出效果</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接: right outer join</span></span><br><span class="line"><span class="comment">-- 右面的那个表的信息，即使不匹配也可以查看出效果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全外连接full outer join --这个语法在mysq1中不支持， 在oracle中支持 -- 展示左，右表全部不匹配的数据</span></span><br><span class="line"><span class="comment">-- scott ，40号部门都可以看到</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解决mysq1中不支持全外连接的问题:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">UNION</span> <span class="comment">-- 并集</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- outer 可以省略不写</span></span><br></pre></td></tr></table></figure>



<h5 id="5-3-三表查询"><a href="#5-3-三表查询" class="headerlink" title="5.3 三表查询"></a>5.3 三表查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.`DEPTNO` <span class="operator">=</span> d.`DEPTNO`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e. ename,e. sal,e. empno,e. deptno,d. dname,s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d. deptno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salgrade s</span><br><span class="line"><span class="keyword">ON</span> e.sal <span class="keyword">BETWEEN</span> s.losal <span class="keyword">AND</span> s. hisal;</span><br></pre></td></tr></table></figure>



<h5 id="5-4-自连接"><a href="#5-4-自连接" class="headerlink" title="5.4 自连接"></a>5.4 自连接</h5><img src="/2022/12/20/MySQL/image-20221209173931160.png" alt="image-20221209173931160" style="zoom:200%;">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号、姓名、上级编号，上级的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e1.`EMPNO` 员工编号,e1.ename 员工姓名,e1.`MGR` 领导编号,e2.`ENAME` 员工领导姓名</span><br><span class="line"><span class="keyword">FROM</span> emp e1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> emp e2</span><br><span class="line"><span class="keyword">ON</span> e1.`MGR` <span class="operator">=</span> e2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.`EMPNO` 员工编号,e1.ename 员工姓名,e1.`MGR` 领导编号,e2.`ENAME` 员工领导姓名</span><br><span class="line"><span class="keyword">FROM</span> emp e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp e2</span><br><span class="line"><span class="keyword">ON</span> e1.`MGR` <span class="operator">=</span> e2.empno;</span><br></pre></td></tr></table></figure>



<h5 id="5-5-多表查询92语法"><a href="#5-5-多表查询92语法" class="headerlink" title="5.5 多表查询92语法"></a>5.5 多表查询92语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称:</span></span><br><span class="line"><span class="keyword">SELECT</span> e. empno, e. ename,e. sal, e. deptno, d. dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="comment">-- 相当于99语法中的cross join ,出现笛卡尔积，没有意义</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno, e.ename,e.sal, e.deptno, d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="comment">-- 相当于99语法中的natural join</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称，查询出工资大于2000的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,e.deptno,d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">AND</span> e.sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的名字，岗位，上级编号，上级名称(自连接) :</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.ename, e1.job,e1.mgr,e2.ename</span><br><span class="line"><span class="keyword">FROM</span> emp e1,emp e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.mgr <span class="operator">=</span> e2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,e.deptno,d.dname,s.grade</span><br><span class="line"><span class="keyword">FROM</span> emp e, dept d, salgrade s</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">AND</span> e.sal <span class="operator">&gt;=</span> s.losal <span class="keyword">AND</span> e.sal <span class="operator">&lt;=</span> s.hisal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 总结:</span></span><br><span class="line"><span class="comment">-- 1.92语法麻烦</span></span><br><span class="line"><span class="comment">-- 2.92语法中 表的连接条件和筛选条件是放在- -起的没有分开</span></span><br><span class="line"><span class="comment">-- 3.99语法中提供了更多的查询连接类型: cross, natural, inner,outer</span></span><br></pre></td></tr></table></figure>



<h5 id="5-6-子查询"><a href="#5-6-子查询" class="headerlink" title="5.6 子查询"></a>5.6 子查询</h5><ul>
<li><p>什么是子查询?</p>
<p>一条SQL语句含有多个select</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 引入子查询:</span></span><br><span class="line"><span class="comment">-- 查询所有比&quot;CLARK&quot;工资高的员工的信息</span></span><br><span class="line"><span class="comment">-- 步骤1:&quot;CLARK&quot; 工资</span></span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span><span class="string">&#x27;CLARK&#x27;</span>; <span class="comment">-- 2450</span></span><br><span class="line"><span class="comment">-- 步骤2:查询所有工资比2450高的员工的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2450</span>;</span><br><span class="line"><span class="comment">-- 两次命令解决问题--》效率低，第二个命令依托于第一个命令，第一个命令的结果给第二个命令使用，但是</span></span><br><span class="line"><span class="comment">-- 因为第一个命令的结果可能不确定要改，所以第二个命令也会导致修改</span></span><br><span class="line"><span class="comment">-- 将步骤1和步骤2合并--》 子查询: </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一个命令解决问题--》效率高</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行顺序:</p>
<p>先执行子查询 , 再执行外查询;</p>
</li>
<li><p>不相关子查询:</p>
<p>子查询可以独立运行 , 称为不相关子查询。</p>
</li>
<li><p>不相关子查询分类:</p>
<p>根据子查询的结果行数, 可以分为单行子查询和多行子查询。</p>
</li>
</ul>
<h6 id="5-6-1-单行子查询"><a href="#5-6-1-单行子查询" class="headerlink" title="5.6.1 单行子查询"></a>5.6.1 单行子查询</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单行子查询: 查询工资高于平均工资的雇员名字和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询和CLARK同- - 部门且比他工资低的雇员名字和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">sal <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> job <span class="operator">=</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span></span><br><span class="line"><span class="string">&#x27;SCOTT&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">hiredate <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> hiredate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="5-6-2-多行子查询"><a href="#5-6-2-多行子查询" class="headerlink" title="5.6.2 多行子查询"></a>5.6.2 多行子查询</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多行子查询:</span></span><br><span class="line"><span class="comment">-- [1]查询[部门20中职务同部门10的雇员一-样的]雇员信息。</span></span><br><span class="line"><span class="comment">-- 查询雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp ;</span><br><span class="line"><span class="comment">-- 查询部门20中的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>; <span class="comment">-- CLERK , MANAGER , ANALYST</span></span><br><span class="line"><span class="comment">-- 部门10的雇员的职务:</span></span><br><span class="line"><span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>; <span class="comment">-- MANAGER, PRESIDENT , CLERK</span></span><br><span class="line"><span class="comment">-- 查询部门20中职务同部门10的雇员一-样的雇员信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job<span class="operator">=</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>); </span><br><span class="line"><span class="comment">-- &gt; Subquery returns more than 1 row</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job <span class="keyword">IN</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [2]查询工资比所有的“SALESMAN&quot;都高的雇员的编号、名字和工资。</span></span><br><span class="line"><span class="comment">-- 查询雇员的编号、名字和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename,sal <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- &quot;SALESMAN&quot;的工 资:</span></span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询工资比所有的“SALESMAN”都高的雇员的编号、名字和工资。</span></span><br><span class="line"><span class="comment">-- 多行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br><span class="line"><span class="comment">-- 单行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename,sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [3]查询工资低于任意一个“CLERK&quot;的工资的雇员信息。</span></span><br><span class="line"><span class="comment">-- 查询雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 查询工资低于任意一个“CLERK”的工资的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">!=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">!=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h6 id="5-6-3-相关子查询"><a href="#5-6-3-相关子查询" class="headerlink" title="5.6.3 相关子查询"></a>5.6.3 相关子查询</h6><ol>
<li>不相关的子查询引入:<ol>
<li>不相关的子查询:子查询可以独立运行，先运行子查询，再运行外查询。</li>
<li>相关子查询:子查询不可以独立运行，并且先运行外查询,再运行子查询</li>
</ol>
</li>
<li>不相关的子查询优缺点:<ol>
<li>好处 : 简单功能强大(- -些使用不相关 子查询不能实现或者实现繁琐的子查询，可以使用相关子查询实现)</li>
<li>缺点 : 稍难理解</li>
</ol>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询最高工资的员工 (不相关子查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp);</span><br><span class="line"><span class="comment">-- 查询本部门最高工资的员工 (相关子查询)</span></span><br><span class="line"><span class="comment">-- 方法1:通过不相关子查询实现:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>)</span><br><span class="line"><span class="comment">-- 缺点 : 语句比较多 , 具体到底有多少个部分未知</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法2 : 相关子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> e.deptno) <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询工资高于其所在岗位的平均工资的那些员工 (相关子查询)</span></span><br><span class="line"><span class="comment">-- 不相关子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> .....</span><br><span class="line"><span class="comment">-- 相关子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e <span class="keyword">WHERE</span> sal <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp e2 <span class="keyword">WHERE</span> e2.job <span class="operator">=</span> e.job);</span><br></pre></td></tr></table></figure>



<h4 id="六-事务"><a href="#六-事务" class="headerlink" title="六 事务"></a>六 事务</h4><p>事务 (Transaction) 是用来维护数据库完整性的，它能够保证一系列的MySQL操作要么全部执行， 要么全不执行。</p>
<p>例子1:<br>举一个例子来进行说明，例如转账操作: A账户要转账给B账户，那么A账户上减少的钱数和B账户上增加的钱数必须一致，也就是说A账户的转出操作和B账户的转入操作要么全部执行，要么全不执行;如果其中一 个操作出现异常而没有执行的话，就会导致账户A和账户B的转入转出金额不一 致的情况，为而事实上这种情况是不允许发生的，所以为了防止这种情况的发生，需要使用事务处理。<br>例子2:<br>在淘宝购物下订单的时候，商家库存要减少,订单增加记录,付款我的账号少100元..操作要么全部执行，要么全不执行。</p>
<ul>
<li>事务的概念<br>事务(Transaction) 指的是一个操作序列, 该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS (数据库管理系统)中的事务管理子系统负责事务的处理。<br>目前常用的存储引擎有<strong>InnoDB</strong> (MySQL5.5以后默认的存储引擎)和MylSAM (MySQL5.5之前默认的存储引擎)，其中<code>InnoDB</code>支持事务处理机制，而MyISAM不支持。</li>
<li>事务的特性<br>事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一 个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。<br>但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation) 和持久性(Durability) 。这四个特性简称为ACID特性。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	uname <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 查看账户表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;丽丽&#x27;</span>,<span class="number">2000</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 丽丽给小刚转200元:</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 默认一个ML语句是一个事务，所以上面的操作执行了2个事务。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 必须让上面的两个操作控制在一个事务中:</span></span><br><span class="line"><span class="comment">-- 手动开启事务:</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动回滚 : 刚才执行的操作全部取消</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动提交:</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在回滚和提交之前，数据库中的数据都是操作的缓存中的数据，而不是数据库的真实数据</span></span><br></pre></td></tr></table></figure>



<h5 id="6-1-事务的并发问题"><a href="#6-1-事务的并发问题" class="headerlink" title="6.1 事务的并发问题"></a>6.1 事务的并发问题</h5><ul>
<li><p>脏读(Dirty read)<br>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中,这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>
</li>
<li><p>不可重复读(Unrepeatableread) : </p>
<p>指在一个事务内多次读同一 数据。在这个事务还没有结束时，另一个事务也访问该数据。那么,在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太-一样。这就发生了在一个事务内两次读到的数据是不一样的情况， 因此称为不可重复读。</p>
</li>
<li><p>幻读 (Phantom read) :</p>
<p>幻读与不可重复读类似。它发生在一个事务(T1) 读取了几行数据,接着另-一个并发事务(T2) 插入了一些数据时。<br>在随后的查询中，第一个事务(T1) 就会发现多了一-些原本不存在的记录，就好像发生了幻觉一样,所以称为幻读。</p>
</li>
</ul>
<p><strong>不可重复度和幻读区别:</strong><br>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>
<p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>
<h5 id="6-2-事务的隔离级别"><a href="#6-2-事务的隔离级别" class="headerlink" title="6.2 事务的隔离级别"></a>6.2 事务的隔离级别</h5><p>事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。<br>事务的隔离级别从低到高依次为<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code>以及<code>SERIALIZABLE</code>,隔离级别越低，越能支持高并发的数据库操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看默认的事务隔离级别MySQL默 认的是repeatable read</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"><span class="comment">-- 设置事务的隔离级别(设置当前会话的隔离级别)</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br></pre></td></tr></table></figure>



<h4 id="七-视图"><a href="#七-视图" class="headerlink" title="七 视图"></a>七 视图</h4><ol>
<li>视图的概念<br>视图(view) 是-个从单张或多张基础数据表或其他视图中构建出来的虚拟表。同基础表一样,视图中也包含了一系列带有名称的列和行数据,但是数据库中只是存放视图的定义，也就是动态检索数据的查询语句，而并不存放视图中的数据，这些数据依旧存放于构建视图的基础表中，只有当用户使用视图时才去数据库请求相对应的数据，即视图中的数据是在引用视图时动态生成的。因此视图中的数据依赖于构建视图的基础表,如果基本表中的数据发生了变化，视图中相应的数据也会跟着改变。<br><strong>PS:</strong> 视图本质上就是: -个查询语句，是一个虚拟的表，不存在的表，你查看视图，其实就是查看视图对应的sq语句</li>
<li>视图的好处<br>简化用户操作:视图可以使用户将注意力集中在所关心地数据上,而不需要关心数据表的结构、与其他表的关联条件以及查询条件等。<br>对机密数据提供安全保护:有了视图，就可以在设计数据库应用系统时，对不同的用户定义不同的视图，避免机密数据(如，敏感字段”salary” )出现在不应该看到这些数据的用户视图上。这样视图就自动提供了对机密数据的安全保护功能。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建单表视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在视图中插入数据:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno , ename , job , deptno) <span class="keyword">VALUES</span> (<span class="number">9999</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno , ename , job , deptno) <span class="keyword">VALUES</span> ( <span class="number">8888</span>, <span class="string">&#x27;nana&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span> ,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建单表视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, job, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno, ename , job , deptno) <span class="keyword">VALUES</span> (<span class="number">7777</span>, <span class="string">&#x27;feifei&#x27;</span> , <span class="string">&#x27;CLERK&#x27;</span> ,<span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 加入了 with check option 后 再添加不相关数据就报错了</span></span><br><span class="line"><span class="comment">-- &gt; 1369 - CHECK OPTION failed &#x27; mytestdb . myview01 &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建/替换多表视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview02</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal, d.deptno, d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d. deptno</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建统计视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview03</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.deptno , d.dname , <span class="built_in">AVG</span>(sal) , <span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">USING</span>(deptno)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview03 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建基于视图的视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview04</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview03 <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview04;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2022/12/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>万里无云的天空,没有一朵云</p>
<span id="more"></span>

<p>关于明天的事 , 后天就知道了</p>
<p>情况就是这个情况, 具体是什么情况还得看情况</p>
]]></content>
      <tags>
        <tag>-日常</tag>
      </tags>
  </entry>
</search>
