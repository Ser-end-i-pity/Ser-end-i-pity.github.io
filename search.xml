<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/2022/12/29/Git/</url>
    <content><![CDATA[<p>分布式版本控制工具 , 远程仓库 , IDEA + Git 的使用</p>
<span id="more"></span>

<h4 id="一-Git-使用"><a href="#一-Git-使用" class="headerlink" title="一 Git 使用"></a>一 Git 使用</h4><h5 id="1-1-Git-安装"><a href="#1-1-Git-安装" class="headerlink" title="1.1 Git 安装"></a>1.1 Git 安装</h5><p>下载地址 : <code>https://git-scm.com/downloads</code></p>
<p>Git 要装到英文目录下。安装过程都是一路 next 。</p>
<p>安装好之后,在文件夹右键就可以看到 Git 选项 – <strong>Git Bash here</strong>。</p>
<h5 id="1-2-基本配置"><a href="#1-2-基本配置" class="headerlink" title="1.2 基本配置"></a>1.2 基本配置</h5><p>通过如下两行命令做一个基本配置,配置的信息将展示在每一次提交的后面,所以不要使用不方便公开的信息,如果不配置以后每一次提交的时候都会让你输入用户名和密码,配置方式如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="variable">$git</span> config --global user.email <span class="string">&quot;10086@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个配置会保存在当前用户目录下的 <code>.gitconfig</code> 文件中。</p>
<h5 id="1-3-Git仓库初始化"><a href="#1-3-Git仓库初始化" class="headerlink" title="1.3 Git仓库初始化"></a>1.3 Git仓库初始化</h5><blockquote>
<p>在需要Git 仓库管理的文件夹目录下右键 Git Bash here 进入命令操作</p>
</blockquote>
<img src="/2022/12/29/Git/01.png" style="zoom:80%;">

<ol>
<li>工作区就是本地的文件夹；</li>
<li>本地的文件夹要通过 git add 命令先将它们添加到暂存区中；</li>
<li>git commit 命令则可以将暂存区中的文件提交到本地仓库中去。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> --version</span><br><span class="line">	<span class="comment">#查看当前git 的版本</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> init			</span><br><span class="line">	<span class="comment"># git仓库初始化,执行完成后当前目录下会多出一个.git的隐藏文件夹,所有git需要的数据和资源都存放在该目录中</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> status</span><br><span class="line">	<span class="comment"># 查看仓库状态</span></span><br><span class="line"><span class="variable">$git</span> add 文件名 </span><br><span class="line">	<span class="comment"># 提交文件到暂缓区</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> add .</span><br><span class="line">	<span class="comment"># 添加当前文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$git</span> commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line">	<span class="comment"># 暂缓区提交到本地仓库</span></span><br><span class="line">	</span><br><span class="line"><span class="variable">$git</span> commit --amend</span><br><span class="line">	<span class="comment"># 自动打开vi 编辑器,修改上一次提交的备注信息</span></span><br><span class="line"><span class="variable">$git</span> commit -am <span class="string">&quot;message&quot;</span></span><br><span class="line">	<span class="comment"># 一步到位, add 和 commit</span></span><br></pre></td></tr></table></figure>

<p>如果要写的备注信息很多,直接执行 <code>git commit</code> 命令,进入vi 编辑器。</p>
<p><strong>vi 编辑器操作:</strong> </p>
<ul>
<li>进入 先按 <code>i</code> 进入编辑模式</li>
<li>按 <code>esc</code> 退出 编辑模式,再按 <code>:</code>  ,然后 输入 <code>wq</code> 保存退出</li>
<li><code>q!</code>退出不保存</li>
</ul>
<h5 id="1-4-查看提交日志"><a href="#1-4-查看提交日志" class="headerlink" title="1.4 查看提交日志"></a>1.4 查看提交日志</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">log</span></span><br><span class="line">	<span class="comment"># 查看以往仓库中提交的日志,版本号,提交者,备注等信息, 如果信息很多的话,按 空格 翻页</span></span><br></pre></td></tr></table></figure>

<p>如果想查看提交时文件的变化, 加上 -p 参数即可,如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p 11.txt</span><br></pre></td></tr></table></figure>

<p>绿色的 + 表示新增的行, 红色的 - 表示删除的行。</p>
<p>查看过程中按 <code>q</code> 键退出查看。</p>
<h5 id="1-5-查看更改前后的差异"><a href="#1-5-查看更改前后的差异" class="headerlink" title="1.5 查看更改前后的差异"></a>1.5 查看更改前后的差异</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> diff </span><br><span class="line">	<span class="comment"># 命令可以查看工作区和暂存区的区别以及工作区和最新提交的差别。</span></span><br><span class="line"><span class="variable">$git</span> diff HEAD</span><br><span class="line">	<span class="comment"># 查看工作区和本地仓库最新提交的是否差别 HEAD是一个指针,指向最新的版本</span></span><br></pre></td></tr></table></figure>

<h5 id="1-6-压缩提交历史"><a href="#1-6-压缩提交历史" class="headerlink" title="1.6 压缩提交历史"></a>1.6 压缩提交历史</h5><p><code>git rebase -i</code> 命令可以实现提交历史的压缩。比如我们在开发某一个功能时,提交了很多次,当所有功能都写完时,想将这些提交压缩为一个,就可以使用该命令。</p>
<h5 id="1-7-代码撤销"><a href="#1-7-代码撤销" class="headerlink" title="1.7 代码撤销"></a>1.7 代码撤销</h5><p>撤销情况分为四种情况:</p>
<ol>
<li><p>本地工作区撤销</p>
<p><code>git checkout -- 文件名</code> 撤销上一次保存的更改</p>
</li>
<li><p>暂存区撤销</p>
<p><code>git reset HEAD</code>  恢复到本地仓库最新的版本</p>
</li>
<li><p>本地仓库撤销</p>
<p><code>git reset --hard 版本号</code>    版本号通过<code>git log</code> 查看 ,恢复到某个提交的时候</p>
<p>这个操作只要有版本号可以重新恢复到某个提交的状态。如果恢复到了最初状态并清空了版本号就不行,这时候可以通过命令 <code>git reflog</code> 查看。</p>
<p><code>git reset --hard HEAD</code>  恢复到最新版本</p>
<p><code>git reset --hard HEAD^</code>恢复到上一个版本</p>
<p><code>git reset --hard HEAD^</code>恢复到上上一个版本, ^ 以此类推</p>
</li>
<li><p>远程仓库撤销</p>
<p>​    其实远程仓库是没有撤销的,就在本地仓库撤销就行了。</p>
</li>
</ol>
<h5 id="1-8-分支的创建切换以及合并"><a href="#1-8-分支的创建切换以及合并" class="headerlink" title="1.8  分支的创建切换以及合并"></a>1.8  分支的创建切换以及合并</h5><p><code>git branch</code>  查看所有分支, * 表示当前的分支</p>
<p><code>git branch 分支名</code> 创建分支</p>
<p><code>git checkout 分支名</code> 切换分支</p>
<p><code>git checkout -</code>  切换到上一个分支</p>
<p><strong>合并分支</strong></p>
<p><img src="/2022/12/29/Git/02.png"></p>
<p>合并之前,分支切换到master</p>
<p><code>git merge --no-ff f1</code> 快速合并f1的分支</p>
<p><code>git log --graph</code> 命令查看分支的创建和合并</p>
<h4 id="二-远程仓库"><a href="#二-远程仓库" class="headerlink" title="二 远程仓库"></a>二 远程仓库</h4><ol>
<li>Github</li>
<li>Gitee</li>
</ol>
<h5 id="2-1-SSH-KEY"><a href="#2-1-SSH-KEY" class="headerlink" title="2.1 SSH KEY"></a>2.1 SSH KEY</h5><p>SSH KEY 的配置不是必须的，不配置的话我们就只能使用 HTTPS 协议，这样每次提交时要输入用户名 密码，略麻烦，所以还是配置一下。配置 SSH KEY 的原理很简单，采用非对称加密方式生成公钥和私 钥，公钥告诉 GitHub ，私钥留在自己电脑上(私钥不可泄露)，当我们向 GitHub 上提交数据时， GitHub 会用我们留给它的公钥加密一段消息返回给我们的电脑，如果我们能够用私钥解密成功，说明 是合法的用户，这样就避免我们输入用户名密码了。大致的原理就是这样，现在很多免登录的系统都采 用了这种方式，比如 Hadoop 免登录配置也是这样。那我们就来看看这个 SSH KEY 要怎么生成。</p>
<h5 id="2-2-配置-SSH-KEY"><a href="#2-2-配置-SSH-KEY" class="headerlink" title="2.2 配置 SSH KEY"></a>2.2 配置 SSH KEY</h5><ol>
<li>生成 SSH z指纹</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line"><span class="comment"># 输入后 直接按回车, 默认配置</span></span><br><span class="line"><span class="comment"># 然后它会在当前用户目录下生成 .ssh 文件夹,里面就是公钥和密钥文件</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加 ssh 到 ssh-agent 中</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试ssh是否绑定成功</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<h5 id="2-3-将公钥告诉-Github"><a href="#2-3-将公钥告诉-Github" class="headerlink" title="2.3 将公钥告诉 Github"></a>2.3 将公钥告诉 Github</h5><blockquote>
<p>登录 Github ,点击右上角的向下的箭头. 选择 Settings</p>
<p>打开C盘,选择当前用户目录, .ssh 文件夹, 右键 .pub 文件,全选复制文本内容</p>
</blockquote>
<img src="/2022/12/29/Git/03.png">



<h5 id="2-4-创建远程仓库"><a href="#2-4-创建远程仓库" class="headerlink" title="2.4 创建远程仓库"></a>2.4 创建远程仓库</h5><p>Github 右上角点 <code>+</code> 号 选择 New repository</p>
<img src="/2022/12/29/Git/QQ截图20221017214813.png4.png">



<h5 id="2-5-关联远程仓库"><a href="#2-5-关联远程仓库" class="headerlink" title="2.5 关联远程仓库"></a>2.5 关联远程仓库</h5><p>首先在需要推到远程仓库的文件夹进行git 初始化并且推到本地仓库中,然后进行如下操作:</p>
<img src="/2022/12/29/Git/04.png" style="zoom:200%;">



<h5 id="2-6-远程仓库恢复"><a href="#2-6-远程仓库恢复" class="headerlink" title="2.6 远程仓库恢复"></a>2.6 远程仓库恢复</h5><p>这个就是前面所说的远程仓库撤销,如果提交了远程仓库最新版本,但是发现代码写错了,有Bug,想修改!别慌!</p>
<p>先在本地仓库操作,<code>git reset --hard HEAD^</code> </p>
<p>或者往前 <code>git reset --hard HEAD^^</code> ,</p>
<p>然后 再执行这命令 <code>git push -f</code> 强制提交。</p>
<p>因为远程仓库是最新版本,这次提交旧版本,故而强制提交。</p>
<p>当提交过第一次远程仓库以后, 以后提交直接 <code>git push</code>, 不用后面的 <code>-u origin</code> 了。</p>
<h5 id="2-7-克隆远程仓库到本地"><a href="#2-7-克隆远程仓库到本地" class="headerlink" title="2.7 克隆远程仓库到本地"></a>2.7 克隆远程仓库到本地</h5><p>先在 <code>Github</code> 复制远程仓库地址, 然后在文件夹右键 <code>git bash here</code> 输入以下命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> 远程仓库地址</span><br><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:weixinqqteam/springboot-projects.git</span><br></pre></td></tr></table></figure>

<p>克隆下来的仓库有 <code>.git</code> 的文件夹, 就是在一顿写代码,修bug后,不用在进行远程配置,直接 git add, commit, <code>git push</code> 提交。 </p>
<p>除了首次拉代码用克隆命令,之后这个仓库代码发生了变化,都不用克隆,直接拉取命令 <code>git pull</code>;</p>
<p><code>git pull</code>  拉代码</p>
<p><code>git push</code>  上传代码,提交到远程仓库</p>
<p>如果远程仓库有 f1 分支, 想要把 f1 分支也克隆下来, 执行如下命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout -b f1 origin/f1</span><br></pre></td></tr></table></figure>

<p>表示根据远程仓库的 f1 分支创建一个本地仓库的 f1 分支,创建完之后进行切换,也可以通过如下命令只创建不切换:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> branch f1 origin/f1</span><br></pre></td></tr></table></figure>



<h5 id="2-8-代码储藏"><a href="#2-8-代码储藏" class="headerlink" title="2.8 代码储藏"></a>2.8 代码储藏</h5><p>现在有一个 master 分支，master 分支中有一个文件叫 01.txt ，该文件中只有一行数据，然后对 01.txt 执行 add 和 commit ，然后再从 master 分支中创建出一个新的分支 fa ，切换到 fa 分支上，然 后向 01.txt 中再添加一行数据，添加成功之后，不做任何事情，再切换回 master 分支，此时用 cat 命 令查看 01.txt 文件，发现竟然有两行数据，按理说 master 中的 01.txt 只有一行数据，而 fa 中的 01.txt 有两行数据。</p>
<p>上面这个操作少了两个步骤，那就是 add/commit ，fa 分支 中的数据修改之后直接切换回了 master ，而没有 add/commit 。<strong>正常情况下（修改数据后</strong> <strong>add/commit****），如果</strong> <strong>master</strong> <strong>和</strong> <strong>fa</strong> <strong>分支中的数据不一致，我们执行了</strong> git checkout <strong>-</strong> <strong>进行分支的</strong> <strong>切换，这个时候工作区中的文件内容也是会跟着变化的（大家可以通过</strong> <strong>cat</strong> <strong>命令或者直接在记事本中打</strong> <strong>开工作区的文件来查看这种变化），但是如果我在</strong> <strong>fa</strong> <strong>分支中修改了文件却没有</strong> <strong>add/commit</strong> <strong>就切换回</strong> <strong>master</strong> <strong>，此时如果工作区的文件变化了，可能会导致我在</strong> <strong>fa</strong> <strong>分支中的修改丢失，因此，这个时候工</strong> <strong>作区的文件就没有变化，即工作区的文件内容还是</strong> <strong>fa</strong> <strong>分支中修改的内容。</strong> </p>
<p><strong>解决方案</strong></p>
<ol>
<li><p>第一种解决方案就是在某一个分支修改文件之后，先 add 并且 commit 之后再去切换分支;</p>
</li>
<li><p>第二种解决方案就是储藏 (Stashing)，储藏适用在如下场景中：</p>
<blockquote>
<p>当我在一个分支 fa 中修改了文件，但是还没有完全改好，此时我并不想 add/commit ，但是这个时候有一个更急迫的事情在另外一个分支 fb 上需要我去做，我必须要切换分支。 </p>
</blockquote>
</li>
<li><p>从 fa 切换到 fb 之后，工作区的代码还是 fa 的代码，不符合我的工作要求。 </p>
</li>
<li><p>假设我不在乎问题 1，在 fb 中直接修改工作区的代码，等我在 fb 中修改完后提交后再回到 fa ，会发现我之前的代码丢失了。 </p>
<p>为了解决这个问题，Git 给我们提供了储藏 (Stashing)。 </p>
<p>现在假设一开始 master 和 fa 分支中的文件内容都是一致的，而且两个分支的工作区都是干净的，即没有东西需要 add/commit ，此时，我在 master 中修改了文件，修改完成之后，执行 git status 命 令我们看到 master 中有东西需要 add/commit ，此时我想切换到 fa 分支中去，但是并不想对 master 分支执行 add/commit ，这个时候我们可以执行如下命令，先将当前分支中的文件储藏起来：</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash</span><br></pre></td></tr></table></figure>

<p>​    执行完 git stash 命令之后，再执行 git status ，我们发现此时 master 分支已经是干净的了，此时我们可以愉快的切换到 fa 分支中去了，切换到 fa 分支之后，我们发现 master 中的修改并没 有干扰到 fa 分支，当我们完成了 fa 分支中的工作之后，再回到 master 分支，此时执行如下命令可以恢复刚刚储藏的数据：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash apply</span><br></pre></td></tr></table></figure>

<p>​    上面这个命令执行完之后，master 分支中的工作区中的文件就恢复了，此时执行 git status 就可以看到又有数据需要 add/commit 了。 </p>
<p>​    我们也可将工作区储藏多次，这个时候我们可以执行如下命令来查看储藏：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> stash list</span><br></pre></td></tr></table></figure>

<p><code>git stash apply</code> 表示恢复最近一次储藏，如果我们想恢复到之前的某一次储藏，可以加上储藏的名 </p>
<p>字，如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>



<p>还有一些其他的关于储藏的命令： </p>
<ol>
<li><p>恢复储藏并出栈</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<p>执行效果和 git stash apply 一样，不同的是，这里执行完之后，会将栈顶的储藏移除。 </p>
</li>
<li><p>删除某一个储藏</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash drop stash@&#123;4&#125;</span><br></pre></td></tr></table></figure>

<p>最后一个参数是指储藏的名字。</p>
</li>
</ol>
<h5 id="2-9-Git-标签"><a href="#2-9-Git-标签" class="headerlink" title="2.9 Git 标签"></a>2.9 Git 标签</h5><p>查看当前仓库中的所有标签:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag</span><br></pre></td></tr></table></figure>



<p>打开标签的方式很简单, 直接通过 <code>git tag &lt;tagname&gt;</code> , 表示创建了一个名为 v1 的 tag, 这个 tag 默认是创建在最新一次的 commit 上的,如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag v1</span><br></pre></td></tr></table></figure>



<p>利用 <code>git show &lt;tagname&gt;</code> 来查看标签对应的版本信息, 如下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> show v1</span><br></pre></td></tr></table></figure>



<p>通过 <code>git tag -d &lt;tagname&gt;</code> 命令删除一个标签:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> tag -d v1</span><br></pre></td></tr></table></figure>



<p>想给历史上的某次 commit 打一个标签呢?我们可以通过如下命令 <code>git tag &lt;tagname&gt; &lt;commitversion&gt;</code> ,如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git ta v0.0 7d519</span><br></pre></td></tr></table></figure>

<p>表示给 commit 的哈希码为 7d519 的那一次 commit 打上一个标签。</p>
<p><strong>含附注的标签</strong></p>
<p>而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字,电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。 </p>
<p>打一个含附注的标签很简单，使用 <code>git tag -a &lt;tagname&gt; -m &lt;msg&gt;</code> 命令,如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.0 -m <span class="string">&quot;文件初次建立&quot;</span> 7d519</span><br></pre></td></tr></table></figure>

<p>如果不加最后的版本号参数，表示给最新的一次 commit 打标签。 </p>
<p><strong>标签推送到远程仓库</strong></p>
<p><code>git push</code> 命令并不会把tag提交到远程仓库中去，需要我们手动提交，如下： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git push origin v0.0</span><br></pre></td></tr></table></figure>

<p>表示将 v0.0 标签提交到远程仓库，也可以通过 <code>$ git push origin --tags</code> 提交所有的 tag 到远程仓库，此时别人调用 <code>git pull</code> 更新代码之后，就能看到我们的 tag。</p>
<h4 id="三-Git-IDEA"><a href="#三-Git-IDEA" class="headerlink" title="三 Git + IDEA"></a>三 Git + IDEA</h4><h5 id="3-1-IDEA-克隆远程仓库"><a href="#3-1-IDEA-克隆远程仓库" class="headerlink" title="3.1 IDEA 克隆远程仓库"></a>3.1 IDEA 克隆远程仓库</h5><ul>
<li><p>手动克隆远程仓库, 在 Git bash here Clone</p>
</li>
<li><p>IDEA Open Project</p>
</li>
<li><p>导入项目后发现多了不同的按钮</p>
<table>
<thead>
<tr>
<th><img src="/2022/12/29/Git/05.png"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2022/12/29/Git/06.png"></td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="3-2-IDEA-中更新-amp-提交"><a href="#3-2-IDEA-中更新-amp-提交" class="headerlink" title="3.2 IDEA 中更新&amp; 提交"></a>3.2 IDEA 中更新&amp; 提交</h5><p>本地工作区提交到远程仓库</p>
<img src="/2022/12/29/Git/07.png" style="zoom:200%;">



<p>IDEA 分支</p>
<img src="/2022/12/29/Git/08.png" style="zoom:200%;">



<p>IDEA 提交远程代码忽略某些不必要的文件</p>
<p>新建 <code>.gitignore</code> 文件</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">out/</span><br><span class="line">*.iml</span><br><span class="line">.gitignore</span><br></pre></td></tr></table></figure>



<p>IDEA 合并本地分支</p>
<img src="/2022/12/29/Git/09.png" style="zoom:200%;">

<p>在当前master分支 合并 f1 分支</p>
<h5 id="3-3-仓库邀请其他用户"><a href="#3-3-仓库邀请其他用户" class="headerlink" title="3.3 仓库邀请其他用户"></a>3.3 仓库邀请其他用户</h5><p>在远程仓库中点设置</p>
<img src="/2022/12/29/Git/10.png" style="zoom:200%;">



<h4 id="四-补充"><a href="#四-补充" class="headerlink" title="四 补充"></a>四 补充</h4><h5 id="4-1-如何解决error-failed-to-push-some-refs-to-‘https-gitee-com"><a href="#4-1-如何解决error-failed-to-push-some-refs-to-‘https-gitee-com" class="headerlink" title="4.1 如何解决error: failed to push some refs to ‘https://gitee.com/"></a>4.1 如何解决error: failed to push some refs to ‘<a href="https://gitee.com/">https://gitee.com/</a></h5><p>出现问题的原因 :</p>
<p>出现错误的主要原因是 因为远程仓库与本地仓库并不一致所造成 </p>
<p>解决 :  把远程库同步到本地库就可以了 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库中的更新合并到本地仓库，–rebase的作用是取消掉本地仓库中刚刚的commit</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后执行</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流</title>
    <url>/2023/01/10/Java-IO%E6%B5%81/</url>
    <content><![CDATA[<p>File 类的使用, 字符流 , 字节流 , 数据流 , 对象流的使用<span id="more"></span></p>
<h4 id="一-File-类的引入"><a href="#一-File-类的引入" class="headerlink" title="一 File 类的引入"></a>一 File 类的引入</h4><ol>
<li><p>文件 , 目录</p>
<p>文件:<br>内存中存放的数据在计算机关机后就会消失。要长久保存数据，就要使用硬盘、光盘、U盘等设备。为了便于数据的管理和检索，引入了“文件”的概念。一篇文章、一段视频、一个可执行程序，都可以被保存为一个文件，并赋予一个文件名。操作系统以文件为单位管理磁盘中的数据。</p>
<p>一般来说，文件可分为文本文件、视频文件、音频文件、图像文件、可执行文件等多种类别，这是从文件的功能进行分类的。从数据存储的角度来说，所有的文件本质上都是一样的，都是由一个个字节组成的，归根到底都是0、1比特串。不同的文件呈现出不同的形态（有的是文本，有的是视频等等)</p>
<p>文件夹（目录):<br>成千上万个文件如果不加分类放在一起，用户使用起来显然非常不便，因此又引入了树形目录（目录也叫文件夹)的机制，可以把文件放在不同的文件夹中，文件夹中还可以嵌套文件夹，这就便于用户对文件进行管理和使用</p>
</li>
<li><p>在java程序中操纵 文件/目录</p>
<p>java程序，最典型的特点，面向对象，java程序最擅长的就是操作对象，盘符上的文件/目录，将它的各种信息进行了封装，封装为一个对象java程序最擅长的就是操纵对象，这个对象属于—》File类</p>
<p>盘符上的文件—》封装为对象—》对象属于File类的对象–》有了这个对象，我们程序就可以直接操纵这个对象，通过这个对象获取文件的各种信息，还可以对文件进行创建，删除。</p>
</li>
</ol>
<h4 id="二-File-对文件的操作"><a href="#二-File-对文件的操作" class="headerlink" title="二 File 对文件的操作"></a>二 File 对文件的操作</h4><h5 id="2-1-对文件操作"><a href="#2-1-对文件操作" class="headerlink" title="2.1 对文件操作"></a>2.1 对文件操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/Java_Project/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        File.separator 属性获取当前操作系统的路径拼接符号</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:&quot;</span> + File.separator + <span class="string">&quot;test.txt&quot;</span>); <span class="comment">// 建议使用这个</span></span><br><span class="line">        <span class="comment">// 常用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否可读 :&quot;</span>+f.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否可写:&quot;</span>+f.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的名字:&quot;</span>+f.getName( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;上级目录∶&quot;</span>+f.getParent( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是一个目录: &quot;</span>+f.isDirectory( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是一个文件: &quot;</span>+f.isFile( ) );</span><br><span class="line">        System.out.println(<span class="string">&quot;是否隐藏:&quot;</span>+f.isHidden());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的大小:&quot;</span>+f.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在:&quot;</span> + f.exists());</span><br><span class="line">        <span class="comment">/*if (f.exists())&#123; // 如果文件存在,将文件删除操作</span></span><br><span class="line"><span class="comment">            f.delete();</span></span><br><span class="line"><span class="comment">        &#125;else &#123;</span></span><br><span class="line"><span class="comment">            f.createNewFile();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(f == f1); <span class="comment">// 比较两个对象的地址</span></span><br><span class="line">        System.out.println(f.equals(f1)); <span class="comment">// 比较两个对象对应的文件的路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+f.getAbsolutePath() );</span><br><span class="line">        System.out.println(<span class="string">&quot;相对路径:&quot;</span>+f.getPath());</span><br><span class="line">        System.out.println( <span class="string">&quot;toString : &quot;</span>+f.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">       <span class="comment">/* File f5 = new File(&quot;demo.txt&quot; );</span></span><br><span class="line"><span class="comment">        if(!f5.exists())&#123;</span></span><br><span class="line"><span class="comment">            f5.createNewFile();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;绝对路径:&quot;+f5.getAbsolutePath());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;相对路径:&quot;+f5.getPath());</span></span><br><span class="line"><span class="comment">        // toString 的效果永远是相对路径</span></span><br><span class="line"><span class="comment">        System.out.println( &quot;toString : &quot;+f5.toString());</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-对目录操作"><a href="#2-2-对目录操作" class="headerlink" title="2.2 对目录操作"></a>2.2 对目录操作</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        将目录封装为 File 类的对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java_Project&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否可读 :&quot;</span>+f.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否可写:&quot;</span>+f.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的名字:&quot;</span>+f.getName( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;上级目录∶&quot;</span>+f.getParent( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是一个目录: &quot;</span>+f.isDirectory( ));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是一个文件: &quot;</span>+f.isFile( ) );</span><br><span class="line">        System.out.println(<span class="string">&quot;是否隐藏:&quot;</span>+f.isHidden());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的大小:&quot;</span>+f.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在:&quot;</span> + f.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;绝对路径:&quot;</span>+f.getAbsolutePath() );</span><br><span class="line">        System.out.println(<span class="string">&quot;相对路径:&quot;</span>+f.getPath());</span><br><span class="line">        System.out.println( <span class="string">&quot;toString : &quot;</span>+f.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        跟目录相关的操作</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java_Project\\a\\b\\c&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建目录</span></span><br><span class="line"><span class="comment">//        f2.mkdir(); // 创建单层目录</span></span><br><span class="line"><span class="comment">//        f2.mkdirs();// 创建多级目录</span></span><br><span class="line"><span class="comment">//        f2.delete();//删除 : 如果是删除目录的话，只会删除一层，并且前提:这层目录是空的，里面没有内容，如果内容就不会被删陈</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看</span></span><br><span class="line">        String[] list = f.list(); <span class="comment">// 文件夹下目录/文件对应的名字的数组</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        File[] files = f.listFiles(); <span class="comment">// 作用更加广泛</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files)&#123;</span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;,&quot;</span>+file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="三-IO流"><a href="#三-IO流" class="headerlink" title="三 IO流"></a>三 IO流</h4><h5 id="3-1-引入"><a href="#3-1-引入" class="headerlink" title="3.1 引入"></a>3.1 引入</h5><blockquote>
<p>I/O : Input/Output的缩写，用于处理设备之间的数据的传输。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">形象理解 IO流当做一根”管”</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231032622510.png" alt="image-20221231032622510" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="3-2-FileReader-读取文件内容"><a href="#3-2-FileReader-读取文件内容" class="headerlink" title="3.2 FileReader 读取文件内容"></a>3.2 FileReader 读取文件内容</h5><p>一个字符一个字符的将文件中的内容读取到程序中了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//文件--》程序:</span></span><br><span class="line">        <span class="comment">//1.有一个文件: ----》创建一个File类的对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用FileReader这个流，这个“管”怼到源文件上去---》创建一个FiLeReader的流的对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="comment">//3.进行操作&quot;吸&quot;的动作---》读取动作</span></span><br><span class="line">        <span class="comment">// 如果读到文件的末尾处,那么读取的内容为-1</span></span><br><span class="line">        <span class="comment">// 方式 1 :</span></span><br><span class="line">       <span class="comment">/* int n = fr.read();</span></span><br><span class="line"><span class="comment">        while(n!=-1)&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(n);</span></span><br><span class="line"><span class="comment">            n=fr.read();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">       <span class="comment">// 方式 2 :</span></span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">while</span>((n=fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.“管”不用了，就要关闭---》关闭流</span></span><br><span class="line">        <span class="comment">// 流，数据库，网络资源，靠jvm本身没有办法帮我们关闭，此时必须程序员手动关闭:</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>一次性读取多个字符 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个 FileReader 的流的对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>]; <span class="comment">// 缓冲数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fileReader.read(ch);</span><br><span class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 错误方式</span></span><br><span class="line">           <span class="comment">/* for (int i=0;i&lt;ch.length;i++)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(ch[i]);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">           <span class="comment">// 正确方式 1</span></span><br><span class="line">            <span class="comment">/*for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(ch[i]);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正确方式 2 : 将数组转为 String</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(ch, <span class="number">0</span>, len);</span><br><span class="line">            System.out.println(string);</span><br><span class="line">            len=fileReader.read(ch);<span class="comment">//读下一个</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-3-FileWriter-写出数据操作"><a href="#3-3-FileWriter-写出数据操作" class="headerlink" title="3.3 FileWriter 写出数据操作"></a>3.3 FileWriter 写出数据操作</h5><p>一个字符一个字符的往外输出 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 1. 如果目标文件不存在的话，那么会自动创建此文件。存在则覆盖</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">       <span class="comment">// 2. FileWriter 管怼到文件上去</span></span><br><span class="line">       <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br><span class="line">       <span class="comment">// 3. 开始动作: 输出动作</span></span><br><span class="line">       <span class="comment">// 一个字符一个字符的往外输出</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">           fw.write(str.charAt(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 4. 关闭流</span></span><br><span class="line">       fw.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>发现 :</strong> <code>new FileWriter(f)</code> 相当于对源文件进行覆盖操作。<br><code>new FileWriter(f,false) </code>相当于对源文件进行覆盖操作。不是追加。反之, <code>true</code>, 在原文件内容追加不覆盖。</p>
<p>利用缓冲数组 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. FileWriter 管怼到文件上去</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 3. 开始动作: 输出动作</span></span><br><span class="line">        <span class="comment">// 一个字符一个字符的往外输出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好,世界&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">        fw.write(chars);</span><br><span class="line">        <span class="comment">// 4. 关闭流</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-4-字符流文件复制"><a href="#3-4-字符流文件复制" class="headerlink" title="3.4 字符流文件复制"></a>3.4 字符流文件复制</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test2.txt&quot;</span>);</span><br><span class="line">       <span class="comment">// 3. 一个输入的管,怼到源文件上</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 一个输出的管,怼到目标文件上</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 开始操作</span></span><br><span class="line">        <span class="comment">// 方式1 一个字符一个字符的复制</span></span><br><span class="line">       <span class="comment">/* int n = fr.read();</span></span><br><span class="line"><span class="comment">        while(n!=-1)&#123;</span></span><br><span class="line"><span class="comment">            fw.write(n);</span></span><br><span class="line"><span class="comment">            n=fr.read();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 方式2 ：　利用缓冲字符数组</span></span><br><span class="line">        <span class="comment">/*char[] chars = new char[5];</span></span><br><span class="line"><span class="comment">        int len = fr.read(chars);</span></span><br><span class="line"><span class="comment">        while(len!=-1)&#123;</span></span><br><span class="line"><span class="comment">            fw.write(chars,0,len); // 将缓冲数组中有效长度写出</span></span><br><span class="line"><span class="comment">            len=fr.read(chars);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">// 方式 3 :</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fr.read(chars);</span><br><span class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, len); <span class="comment">// 转成字符串写入</span></span><br><span class="line">            fw.write(str);</span><br><span class="line">            len=fr.read(chars);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 关闭流 , 倒着关,后用先关</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>**警告 : **不要用字符流去操作非文本文件!</p>
<p>文本文件: .txt.java .c .cpp —》建议使用字符流操作<br>非文本文件: .jpg，.mp3 , .mp4 , .doc ,.ppt —》建议使用字节流操作</p>
<h5 id="3-5-try-catch-finally处理"><a href="#3-5-try-catch-finally处理" class="headerlink" title="3.5 try-catch-finally处理"></a>3.5 try-catch-finally处理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 1. 源文件</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">       <span class="comment">// 2. 目标文件</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test2.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 3. 一个输入的管,怼到源文件上</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(f1);</span><br><span class="line">           <span class="comment">// 4. 一个输出的管,怼到目标文件上</span></span><br><span class="line">           fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f2);</span><br><span class="line">           <span class="comment">// 5. 开始操作</span></span><br><span class="line">           <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">           <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fr.read(chars);</span><br><span class="line">           <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">0</span>, len); <span class="comment">// 转成字符串写入</span></span><br><span class="line">               fw.write(str);</span><br><span class="line">               len=fr.read(chars);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 6. 关闭流 , 倒着关,后用先关</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (fw!=<span class="literal">null</span>)&#123; <span class="comment">// 防止空指针异常</span></span><br><span class="line">                   fw.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (fr!=<span class="literal">null</span>)&#123;</span><br><span class="line">                   fr.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-6-FileInputStream"><a href="#3-6-FileInputStream" class="headerlink" title="3.6 FileInputStream"></a>3.6 FileInputStream</h5><ol>
<li>读取文本文件 :</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流将文件中内容读到程序中来</span></span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        2.将一个字节流这个管怼到源文件上</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 3.开始读取</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 细节1:</span></span><br><span class="line"><span class="comment">        * 文件是utf-8进行存储的，所以英文字符底层实际占用1个字节</span></span><br><span class="line"><span class="comment">        * 但是中文字符，底层实际占用3个字节。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *  细节2:</span></span><br><span class="line"><span class="comment">           如果文件是文本文件，那么就不要使用字节流读取了，建议使用字符流。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 细节3:</span></span><br><span class="line"><span class="comment">            read()读取一个字节，返回值是 int类型，而不是byte类型?</span></span><br><span class="line"><span class="comment">            read方法底层做了处理，让返回的数据都是“正数&quot;</span></span><br><span class="line"><span class="comment">            就是为了避免如果字节返回的是-1的话，那到底是读入的字节，还是到文件结尾呢。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        <span class="keyword">while</span>(n!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)n);</span><br><span class="line">            n=fis.read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.关闭流</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>利用字节流读取非文本文件(以图片为案例) :</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流将文件中内容读到程序中来</span></span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\1.png&quot;</span>);</span><br><span class="line"><span class="comment">//        2.将一个字节流这个管怼到源文件上</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 3.开始读取</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 定义一个计时器,用来计读取的字节的个数 (文件大小的属性)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        <span class="keyword">while</span>(n!=-<span class="number">1</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println((<span class="type">char</span>)n);</span><br><span class="line">            n=fis.read();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">        <span class="comment">// 4.关闭流</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>利用缓冲数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流将文件中内容读到程序中来</span></span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\1.png&quot;</span>);</span><br><span class="line"><span class="comment">//        2.将一个字节流这个管怼到源文件上</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 3.开始读取</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fis.read(b); <span class="comment">// len 指的就是读取的数组中的有效长度</span></span><br><span class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(len);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                System.out.println(b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            len=fis.read(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.关闭流</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-7-字节流文件复制"><a href="#3-7-字节流文件复制" class="headerlink" title="3.7 字节流文件复制"></a>3.7 字节流文件复制</h5><ol>
<li>读一个字节,写一个字节</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流将文件中内容读到程序中来</span></span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\1.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\11.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 有一个输入的管道怼到源文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f1);</span><br><span class="line">        <span class="comment">// 4. 有一个输出的管道怼到目标文件上</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 开始复制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        <span class="keyword">while</span>(n!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(n);</span><br><span class="line">            n=fis.read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用缓冲数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流将文件中内容读到程序中来</span></span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\1.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\11.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 有一个输入的管道怼到源文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f1);</span><br><span class="line">        <span class="comment">// 4. 有一个输出的管道怼到目标文件上</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 开始复制</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fis.read(b);</span><br><span class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">            len=fis.read(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.关闭流</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-8-缓冲字节流"><a href="#3-8-缓冲字节流" class="headerlink" title="3.8 缓冲字节流"></a>3.8 缓冲字节流</h5><table>
<thead>
<tr>
<th align="center">读一个字节写一个字节</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231075155277.png" alt="image-20221231075155277" style="zoom:200%;"></td>
</tr>
<tr>
<td align="center"><strong>利用缓冲字节数组</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231075315713.png" alt="image-20221231075315713" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p><strong>引入缓冲区</strong></p>
<img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231080607957.png" alt="image-20221231080607957" style="zoom:200%;">

<p>想要完成上面的效果，单纯的靠<code>FilelnputStream</code>,<code>FileOutputStream</code>是不可以完成的，这个时候就需要功能的加强,</p>
<p>这个加强就需要引入新的流(在<code>FilelnputStream</code>,<code>FileOutputStream</code>外面再套一层流): <code>BufferedInputStream</code> ,<code>BufferedOutputStream</code>—–&gt; 处理流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 1. 源文件</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\1.png&quot;</span>);</span><br><span class="line">       <span class="comment">// 2.目标文件</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\11.png&quot;</span>);</span><br><span class="line">       <span class="comment">// 3. 有一个输入的管道怼到源文件</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f1);</span><br><span class="line">       <span class="comment">// 4. 有一个输出的管道怼到目标文件上</span></span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 5. 功能加强 , 在 FileInputStream 外面套一个管: BufferedInputStream</span></span><br><span class="line">       <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">       <span class="comment">// 6. 功能加强 , 在 FileOutputStream 外面套一个管: BufferedOutputStream</span></span><br><span class="line">       <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 7.开始复制</span></span><br><span class="line">       <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">6</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bis.read(b);</span><br><span class="line">       <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">           bos.write(b,<span class="number">0</span>,len);</span><br><span class="line">           <span class="comment">/* bos.fLush();底层已经帮我们做了刷新缓冲区的操作，不用我们手动完成:底层调用flushBuffer() */</span></span><br><span class="line">           len=bis.read(b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 8. 关闭流 倒着关</span></span><br><span class="line">       <span class="comment">//如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。</span></span><br><span class="line">       bos.close();</span><br><span class="line">       bis.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-9-缓冲字符流"><a href="#3-9-缓冲字符流" class="headerlink" title="3.9 缓冲字符流"></a>3.9 缓冲字符流</h5><p><code>BufferedReader</code> , <code>BufferedWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test01.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 有一个输入的管道怼到源文件</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f1);</span><br><span class="line">        <span class="comment">// 4. 有一个输出的管道怼到目标文件上</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 套一根管在输入字符流外面</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">        <span class="comment">// 6. 套一根管在输出字符流外面</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">        <span class="comment">// 7.开始复制</span></span><br><span class="line">        <span class="comment">// 方式 1 : 读一个字符,输出一个字符</span></span><br><span class="line">        <span class="comment">/*int n = br.read();</span></span><br><span class="line"><span class="comment">        while(n!=-1)&#123;</span></span><br><span class="line"><span class="comment">            bw.write(n);</span></span><br><span class="line"><span class="comment">            n=br.read();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式 2 : 利用缓冲数组</span></span><br><span class="line">        <span class="comment">/*char[] ch = new char[30];</span></span><br><span class="line"><span class="comment">        int len = br.read(ch);</span></span><br><span class="line"><span class="comment">        while(len!=-1)&#123;</span></span><br><span class="line"><span class="comment">            bw.write(ch,0,len);</span></span><br><span class="line"><span class="comment">            len=br.read(ch);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式 3 : 读取 String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="keyword">while</span>(str!=<span class="literal">null</span>)&#123; <span class="comment">// 每次读取文本文件中一行,返回字符串</span></span><br><span class="line">            bw.write(str);</span><br><span class="line">            <span class="comment">// 在文本文件中应该再写出一个换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            str=br.readLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. 关闭流 倒着关</span></span><br><span class="line">        <span class="comment">//如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="四-转换流"><a href="#四-转换流" class="headerlink" title="四 转换流"></a>四 转换流</h4><ol>
<li><p>转换流</p>
<p>作用: 将字节流和字符流进行转换</p>
<p>属于字节流还是字符流? 属于字符流</p>
</li>
<li><p>InputStreamReader : 字节输入流 –&gt; 字符的输入流</p>
</li>
<li><p>OutputStreamWriter : 字符输出流 –&gt; 字节的输出流</p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">转换流</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231095953349.png" alt="image-20221231095953349" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>将输入的字节流转换为输入的字符流，然后完成文件–》程序∶</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">       <span class="comment">// 一个输入的字节流接触文件</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f1);</span><br><span class="line">       <span class="comment">//3.加入一个转换流，将字节流转换为字符流:（转换流属于一个处理流）</span></span><br><span class="line">       <span class="comment">//将字节转换为字符的时候，需要指定一个编码，这个编码跟文件本身的编码格式统一/如果编码格式不统一的话，那么在控制台上展示的效果就会出现乱码</span></span><br><span class="line">       <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       <span class="comment">// 将文件中内容显示在控制台</span></span><br><span class="line">       <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> isr.read(ch);</span><br><span class="line">       <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">           System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(ch, <span class="number">0</span>, len));</span><br><span class="line">           len=isr.read(ch);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 关闭流</span></span><br><span class="line">       isr.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p>转换流-InputStreamReader, OutputStreamWrter实现文本文性的复制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 源文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test02.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 输入方向</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f1);</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出方向</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f2);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="comment">// 开始复制</span></span><br><span class="line">        <span class="type">char</span>[] ch = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> isr.read(ch);</span><br><span class="line">        <span class="keyword">while</span>(len!=-<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(ch,<span class="number">0</span>,len);</span><br><span class="line">            len=isr.read(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="五-System-类对IO-流的支持"><a href="#五-System-类对IO-流的支持" class="headerlink" title="五 System 类对IO 流的支持"></a>五 System 类对IO 流的支持</h4><ol>
<li><p>System 的属性</p>
<p><code>System.in</code> :“标准”输入流 —》默认情况下从键盘输入 </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 得到的是标准的输入流: --&gt; 从键盘输入</span></span><br><span class="line">       <span class="comment">// InputStream in = System.in;</span></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="comment">//   int n = in.read(); // read()方法等待键盘的录入 , 所以这个方法是一个阻塞方法</span></span><br><span class="line">        <span class="comment">//   System.out.println(n);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以前案例:从键盘录入一个int类型的数据:</span></span><br><span class="line">        <span class="comment">//从上面的代码证明，键盘录入实际上是: System.in</span></span><br><span class="line">        <span class="comment">//形象的理解: System.in管，这个管怼到键盘上去了，所以你从键盘录入的话，就从这个管到程序中了</span></span><br><span class="line">        <span class="comment">// Scanner的作用:扫描器:起扫描作用的，扫键盘的从这根管出来的数据</span></span><br><span class="line">       <span class="comment">/* Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">        String str = sc.nextLine();</span></span><br><span class="line"><span class="comment">        System.out.println(str);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 既然scanner是扫描的作用，不一定非得扫 System.in进来的东西，还可以扫描其他管的内容:</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\test.txt&quot;</span>)));</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">            System.out.println(sc.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​        <code>System.out</code> :“标准”输出流。—》默认情况下，输出到控制台。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 写到控制台</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        out.print(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;扣你几哇&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;我是地球人&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">        out.println(<span class="string">&quot;我是中国人&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;我是广东人&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>System.out : 返回的输出流, 打印流(PrintStream)</p>
<h4 id="六-练习"><a href="#六-练习" class="headerlink" title="六 练习"></a>六 练习</h4><p>键盘录入内容输出到文件中</p>
<table>
<thead>
<tr>
<th align="center">思路</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/10/Java-IO%E6%B5%81/image-20221231103600856.png" alt="image-20221231103600856" style="zoom:200%;"></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 输入方向</span></span><br><span class="line">        <span class="comment">// 键盘录入</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> System.in; <span class="comment">// 属于字节流</span></span><br><span class="line">        <span class="comment">// 字节流 --&gt; 字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in);</span><br><span class="line">        <span class="comment">// 在 isr 外面再套一个缓冲流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出方向</span></span><br><span class="line">        <span class="comment">// 目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\data.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始动作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="keyword">while</span>(!s.equals(<span class="string">&quot;exit&quot;</span>))&#123;</span><br><span class="line">            bw.write(s);</span><br><span class="line">            bw.newLine();<span class="comment">// 文件中换行</span></span><br><span class="line">            s=br.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="七-数据流"><a href="#七-数据流" class="headerlink" title="七 数据流"></a>七 数据流</h4><p>用来操作基本数据类型和字符串的</p>
<p><code>DatalnputStream</code>: 将文件中存储的基本数据类型和字符串写入内存的变量中</p>
<p><code>DataOutputStream</code>: 将内存中的基本数据类型和字符串的变量写出文件中</p>
<p> 利用DataOutputStream向外写出变量 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// DataOutputStream:将内存中的基本数据类型和字符串的变量写出文件中</span></span><br><span class="line">       <span class="comment">/* File f = new File(&quot;e:\\Java_Project\\demo.txt&quot;);</span></span><br><span class="line"><span class="comment">        FileOutputStream fos = new FileOutputStream(f);</span></span><br><span class="line"><span class="comment">        DataOutputStream dos = new DataOutputStream(fos);*/</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">// 向外将变量写到文件中去 :</span></span><br><span class="line">        dos.writeUTF(<span class="string">&quot;你好,2023&quot;</span>);</span><br><span class="line">        dos.writeBoolean(<span class="literal">false</span>);</span><br><span class="line">        dos.writeDouble(<span class="number">8.8</span>);</span><br><span class="line">        dos.writeInt(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        dos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>打开文件发现内容是乱码,看不懂,其实这些内容是给程序看的。</p>
<p>下面开始读取的程序:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// DataInputStream:将文件中存储的基本数据类型和字符串</span></span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">// 将文件中内容读取到程序中来 :</span></span><br><span class="line">        System.out.println(dis.readUTF());</span><br><span class="line">        System.out.println(dis.readBoolean());</span><br><span class="line">        System.out.println(dis.readDouble());</span><br><span class="line">        System.out.println(dis.readInt());</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        dis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>验证: 那个文件，我们看不懂，程序看得懂</p>
<p>要求: 写出的类型跟读入的类型必须要匹配!</p>
<h4 id="八-对象流"><a href="#八-对象流" class="headerlink" title="八 对象流"></a>八 对象流</h4><ol>
<li>对象流 <code>ObjectInputStream</code></li>
</ol>
<p>用于存储和读取基本数据类型数据或对象的处理流。<br>它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p>
<ol start="2">
<li><p>序列化和反序列化</p>
<p><code>ObjectOutputStream</code>类︰把内存中的Java对象转换成平台无关的二进制数据，从而允许把这种二进制数据持久地保存在磁盘上,或通过网络将这种二进制数据传输到另一个网络节点。—-》序列化</p>
<p>用ObjectInputStream类:当其它程序获取了这种二进制数据，就可以恢复成原来的Java对象。—-》反序列化</p>
</li>
</ol>
<p>首先将一个字符串对象写到文件中去:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo01.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">// 将内存中的字符串写到文件中去</span></span><br><span class="line">        oos.writeObject(<span class="string">&quot;你好2023&quot;</span>);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>写一个程序读文件中内容:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 将文件中保存的字符串读入到内存</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo01.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)ois.readObject();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="九-Serializable-接口"><a href="#九-Serializable-接口" class="headerlink" title="九 Serializable 接口"></a>九 Serializable 接口</h4><h5 id="9-1-序列化和反序列化"><a href="#9-1-序列化和反序列化" class="headerlink" title="9.1 序列化和反序列化"></a>9.1 序列化和反序列化</h5><p>操作自定义类的对象</p>
<p>首先自定义的Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Integer id, String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       <span class="comment">// 序列化 : 将内存中对象 --&gt; 文件</span></span><br><span class="line">        <span class="comment">//有一个对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;lulu&quot;</span>, <span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        <span class="comment">// 对象流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo02.txt&quot;</span>)));</span><br><span class="line">        <span class="comment">// 向外写</span></span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接着运行的时候出现异常: <code>Exception in thread &quot;main&quot; java.io.NotSerializableException</code></p>
<p>原因 : 想要序列化的那个对象对应的类 , 必须实现一个<code>Serializable</code>接口 , </p>
<p>接口内部，什么都没有，这种接口叫标识接口。<br>起到标识作用，标识什么呢?只要实现这个接口的类的对象才能序列化，否则不可以。</p>
<p>将文件读入内存 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      <span class="comment">// 反序列化</span></span><br><span class="line">       <span class="comment">// 对象流</span></span><br><span class="line">       <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\Java_Project\\demo02.txt&quot;</span>)));</span><br><span class="line">       <span class="comment">// 读入内存</span></span><br><span class="line">       <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">       System.out.println(p.toString());</span><br><span class="line">       <span class="comment">//关闭流</span></span><br><span class="line">       ois.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="9-2-SerialVersionUID"><a href="#9-2-SerialVersionUID" class="headerlink" title="9.2 SerialVersionUID"></a>9.2 SerialVersionUID</h5><p>凡是实现Serializable接口(标识接口）的类都有一个表示序列化版本标识符的静态变量</p>
<p><code>private static final long serialVersionUID;</code></p>
<blockquote>
<p>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序加化时是否兼容。</p>
</blockquote>
<p>上面的自定义类是没加 <code>toString()</code> 方法 , 故运行程序的时候会打印字符串的地址,现在加上再运行程序,出现异常 : <code>Exception in thread &quot;main&quot; java.io.InvalidClassException</code></p>
<p>原因 : </p>
<p>序列化:将Person对象—》文件中当时那个Person类没有 toString 方法<br>现在在Person中加入了 toString 方法，然后再进行反序列化读进来的对象的类不带toString，本身这个类你加了 toString 这两个类不匹配问题</p>
<p>解决 :</p>
<p>给这个类如入一个序列号:<code>serialVersionUID</code></p>
<p>在自定义类加上这个:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">123456L</span>; <span class="comment">// 随便给值</span></span><br></pre></td></tr></table></figure>



<h5 id="9-3-序列化细节"><a href="#9-3-序列化细节" class="headerlink" title="9.3 序列化细节"></a>9.3 序列化细节</h5><ol>
<li>被序列化的类的内部的所有属性，必须是可序列化的(基本数据类型都是可序列化的) , 自定义类都要实现 <code>Serializable</code> 接口 ;</li>
<li>static，transient修饰的属性不可以被序列化。</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/01/02/Linux/</url>
    <content><![CDATA[<img src="/2023/01/02/Linux/Linux封面.png" alt="Linux封面" style="zoom:200%;">

<p>新的一年 , 新气象 , 万事胜意 。最美的人生姿态是努力向前 ,每一次努力,都是决不放弃 ! 每一次向前 , 都是超越自己 !!</p>
<span id="more"></span>

<h4 id="一-Linux-介绍"><a href="#一-Linux-介绍" class="headerlink" title="一 Linux 介绍"></a>一 Linux 介绍</h4><h5 id="1-1-Linux-的版本"><a href="#1-1-Linux-的版本" class="headerlink" title="1.1 Linux 的版本"></a>1.1 Linux 的版本</h5><ul>
<li>Ubuntu</li>
<li>redhat</li>
<li>CentOS</li>
</ul>
<blockquote>
<p>Linux的版本分为两种，一种是Linus团队正在维护的开源内核版本。另一种是一些厂商基于内核版本封装的发行版本。</p>
<ul>
<li><p>Linux的内核版本官网：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
</li>
<li><p>Linux的发行版本，就是 CentOS</p>
</li>
</ul>
</blockquote>
<h5 id="1-2-Linux和Windows区别"><a href="#1-2-Linux和Windows区别" class="headerlink" title="1.2 Linux和Windows区别"></a>1.2 Linux和Windows区别</h5><blockquote>
<ul>
<li>Linux是严格区分大小写的，Windows无所谓。</li>
<li>Linux中一切皆是文件。</li>
<li>Linux中文件是没有后缀的，但是他有一些约定俗成的后缀。</li>
<li>Windows下的软件一般是无法直接运行的Linux中。</li>
</ul>
</blockquote>
<h5 id="1-3-Linux-安装"><a href="#1-3-Linux-安装" class="headerlink" title="1.3 Linux 安装"></a>1.3 Linux 安装</h5><blockquote>
<ul>
<li><p>安装Linux，需要一个虚拟机，为了安装虚拟环境：VMware或者Virtual Box（采用VMware）</p>
<p><a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a></p>
</li>
<li><p>为了安装Linux，需要一个Linux的镜像文件：CentOS7版本</p>
<p><a href="https://vault.centos.org/">https://vault.centos.org/</a></p>
</li>
<li><p>安装一个连接Linux的图形化界面：Xterm，SSH，XShell（Xterm）</p>
<p><a href="https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip">https://download.mobatek.net/2012020021813110/MobaXterm_Portable_v20.1.zip</a></p>
</li>
</ul>
</blockquote>
<h5 id="1-4-通过mtputty连接-Linux"><a href="#1-4-通过mtputty连接-Linux" class="headerlink" title="1.4 通过mtputty连接 Linux"></a>1.4 通过mtputty连接 Linux</h5><p>进入linux 输入命令查看ip地址 :</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 看到 inet 就是linux 的ip地址</span></span><br></pre></td></tr></table></figure>

<p>然后使用mtputty 连接</p>
<img src="/2023/01/02/Linux/mtputty%E8%BF%9E%E6%8E%A5linux.png" style="zoom:200%;">



<h4 id="二-Linux-目录结构"><a href="#二-Linux-目录结构" class="headerlink" title="二 Linux 目录结构"></a>二 Linux 目录结构</h4><blockquote>
<p>Windows的目录结构是带有盘符的。D：  E： C：，而Linux中是没有盘符的</p>
<p>在 mtputty 中输入ls / 查看Linux的顶级目录。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Linux目录树状图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/02/Linux/1586239342796.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>root：该目录为系统管理员HOME目录</li>
<li>bin：这个目录下放着经常使用的命令</li>
<li>boot：这里存放的是启动Linux时的一些核心文件</li>
<li>etc：存放系统管理所需要的配置文件和子目录</li>
<li>home：普通用户的HOME目录</li>
<li>usr：默认安装软件的目录，类似Windows中的Program Files目录</li>
<li>opt：是主机额外安装软件拜访的目录</li>
</ul>
</blockquote>
<h4 id="三-Linux-基本命令"><a href="#三-Linux-基本命令" class="headerlink" title="三 Linux 基本命令"></a>三 Linux 基本命令</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前路径的文件夹/文件</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制停止</span></span><br><span class="line">ctrl+c</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping 域名</span></span><br><span class="line">ping 地址</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出</span></span><br><span class="line"></span><br><span class="line">reboot <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>



<h4 id="四-Linux-目录命令"><a href="#四-Linux-目录命令" class="headerlink" title="四 Linux 目录命令"></a>四 Linux 目录命令</h4><h5 id="4-1-列出目录"><a href="#4-1-列出目录" class="headerlink" title="4.1 列出目录"></a>4.1 列出目录</h5><blockquote>
<p>查看指定目录下的内容，默认查看当前目录下内容</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-ald] [目录名]</span><br><span class="line"><span class="comment"># 目录名不填写，默认为当前目录。</span></span><br><span class="line"><span class="comment"># -a：列出的全部的文件，包括隐藏文件</span></span><br><span class="line"><span class="comment"># -l：列举出全部的信息</span></span><br><span class="line"><span class="comment"># -d：仅查看目录本身</span></span><br></pre></td></tr></table></figure>



<h5 id="4-2-切换目录"><a href="#4-2-切换目录" class="headerlink" title="4.2 切换目录"></a>4.2 切换目录</h5><blockquote>
<p>实现目录间切换，使用绝对路径、相对路径、特殊符号</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 具体路径 | 特殊符号</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>特殊符号</th>
<th>表达的路径</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>当前目录</td>
</tr>
<tr>
<td>..</td>
<td>上一级目录</td>
</tr>
<tr>
<td>/</td>
<td>根目录</td>
</tr>
<tr>
<td>~</td>
<td>当前登录用户的HOME目录</td>
</tr>
<tr>
<td>-</td>
<td>返回</td>
</tr>
</tbody></table>
<h5 id="4-3-创建目录"><a href="#4-3-创建目录" class="headerlink" title="4.3 创建目录"></a>4.3 创建目录</h5><blockquote>
<p>创建目录，以及创建多级目录方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] 目录名</span><br><span class="line"><span class="comment"># -p：代表创建多级目录时，使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p a/b/c</span><br></pre></td></tr></table></figure>



<h5 id="4-4-删除目录"><a href="#4-4-删除目录" class="headerlink" title="4.4 删除目录"></a>4.4 删除目录</h5><blockquote>
<p>删除非空目录或包含内容的目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能删除空目录</span></span><br><span class="line"><span class="built_in">rmdir</span> 目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除非空目录</span></span><br><span class="line"><span class="built_in">rm</span> [-rf] 目录名</span><br><span class="line"><span class="comment"># -r：代表递归删除目录下的全部内容</span></span><br><span class="line"><span class="comment"># -f：不询问，直接删除</span></span><br></pre></td></tr></table></figure>



<h5 id="4-5-复制目录"><a href="#4-5-复制目录" class="headerlink" title="4.5 复制目录"></a>4.5 复制目录</h5><blockquote>
<p>复制目录下的全部内容</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 来源目录 目标目录</span><br><span class="line"><span class="comment"># -r：递归复制全部内容，必填项</span></span><br></pre></td></tr></table></figure>



<h5 id="4-6-移动-重命名目录"><a href="#4-6-移动-重命名目录" class="headerlink" title="4.6 移动 , 重命名目录"></a>4.6 移动 , 重命名目录</h5><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 目录名 新目录名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如 这个就是重命名</span></span><br><span class="line"><span class="built_in">mv</span> jdk-8u301-linux-x64.tar.gz jdk8.0.tar.gz</span><br><span class="line"><span class="comment"># 移动</span></span><br><span class="line"><span class="built_in">mv</span> jdk8.0.tar.gz ..</span><br></pre></td></tr></table></figure>



<h4 id="五-Linux-文件命令"><a href="#五-Linux-文件命令" class="headerlink" title="五 Linux 文件命令"></a>五 Linux 文件命令</h4><h5 id="5-1-创建文件"><a href="#5-1-创建文件" class="headerlink" title="5.1 创建文件"></a>5.1 创建文件</h5><blockquote>
<p>创建空文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 文件名1 文件名2 ……</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;内容&quot;</span> &gt; 文件名  <span class="comment"># 在指定文件写入内容</span></span><br><span class="line"><span class="built_in">cat</span> 文件名 <span class="comment"># 查看该文件内容</span></span><br></pre></td></tr></table></figure>



<h5 id="5-2-编辑文件"><a href="#5-2-编辑文件" class="headerlink" title="5.2 编辑文件"></a>5.2 编辑文件</h5><blockquote>
<p>编辑文件，后期最常的命令之一</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi 文件名 				<span class="comment"># 查看文件。（查看模式）</span></span><br><span class="line">i | a | o   		  <span class="comment"># 进入编辑模式。（编辑模式）</span></span><br><span class="line">                      <span class="comment"># i：在当前光标处，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># a：在当前光标后一格，进入编辑模式。 </span></span><br><span class="line">                      <span class="comment"># o：在当前光标下一行，进入编辑模式。</span></span><br><span class="line">esc				      <span class="comment"># 退出编辑模式，回到查看模式。</span></span><br><span class="line">:				      <span class="comment"># 从查看模式进入到底行命令模式。（底行命名模式）</span></span><br><span class="line">                      <span class="comment"># 在底行命令模式下，输入wq：保存并退出。输入q!：不保存并退出</span></span><br><span class="line">                      <span class="comment"># 在查看模式下，摁ZZ，可以快速保存并退出。</span></span><br></pre></td></tr></table></figure>



<h5 id="5-3-vi文件时-其他操作"><a href="#5-3-vi文件时-其他操作" class="headerlink" title="5.3 vi文件时, 其他操作"></a>5.3 vi文件时, 其他操作</h5><blockquote>
<p>编辑文件时，常用的快捷键，方便操作</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在vi文件时，在底行命令模式下可以输入以下常用内容</span></span><br><span class="line"><span class="comment"># 行号操作</span></span><br><span class="line"><span class="built_in">set</span> nu              <span class="comment"># 查看文件的行号</span></span><br><span class="line">to rownum           <span class="comment"># 快速的跳转到指定行</span></span><br><span class="line"><span class="built_in">set</span> nonu            <span class="comment"># 取消行号</span></span><br><span class="line"><span class="comment"># 搜索操作</span></span><br><span class="line">/word               <span class="comment"># 类似Windows的Ctrl + F搜索文件中的具体内容所在位置，查看下一个可以输入字母n</span></span><br><span class="line"><span class="comment"># 快速定位</span></span><br><span class="line">G                   <span class="comment"># 快速跳转到最后一行</span></span><br><span class="line">gg                  <span class="comment"># 快速跳转到第一行</span></span><br><span class="line">u					<span class="comment"># 撤销操作</span></span><br></pre></td></tr></table></figure>



<h5 id="5-4-查看文件"><a href="#5-4-查看文件" class="headerlink" title="5.4 查看文件"></a>5.4 查看文件</h5><blockquote>
<p>根据不同的业务, 可以选择不同的查看方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件，直接展示到最后一行</span></span><br><span class="line"><span class="built_in">cat</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从最后一行开始展示</span></span><br><span class="line"><span class="built_in">tac</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从第一行开始查看文件内容，展示全部</span></span><br><span class="line"><span class="built_in">nl</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示文件的用时，展示行号</span></span><br><span class="line">more 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以一页一页的向下翻</span></span><br><span class="line"><span class="comment"># 嗯space向下翻页，退出时摁q</span></span><br><span class="line"></span><br><span class="line">less 文件名</span><br><span class="line"><span class="comment"># 查看大文件时，可以任意的向上或者向下翻</span></span><br><span class="line"><span class="comment"># 向上或向下翻页摁PageUp和PageDown，一行一行查看，摁光标的↑↓</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看前几行</span></span><br><span class="line"><span class="built_in">head</span> 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只查看后几行</span></span><br><span class="line"><span class="built_in">tail</span> 文件名</span><br><span class="line"><span class="comment"># tail -f 日志 监控日志</span></span><br></pre></td></tr></table></figure>



<h5 id="5-5-移动-重命名文件"><a href="#5-5-移动-重命名文件" class="headerlink" title="5.5 移动 , 重命名文件"></a>5.5 移动 , 重命名文件</h5><blockquote>
<p>移动、重命名目录，会根据第二个参数指定具体操作逻辑</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 文件名 新文件名 | 路径</span><br><span class="line"><span class="comment"># 如果第二个参数指定的路径不存在，就是重命名，如果第二个参数的路径存在，就是移动</span></span><br></pre></td></tr></table></figure>



<h5 id="5-6-复制文件"><a href="#5-6-复制文件" class="headerlink" title="5.6 复制文件"></a>5.6 复制文件</h5><blockquote>
<p>复制文件到指定目录下</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 文件名 目录</span><br></pre></td></tr></table></figure>



<h5 id="5-7-删除文件"><a href="#5-7-删除文件" class="headerlink" title="5.7 删除文件"></a>5.7 删除文件</h5><blockquote>
<p>删除文件方式</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-f] 文件名</span><br><span class="line"><span class="comment"># -f：是否询问</span></span><br></pre></td></tr></table></figure>



<h4 id="六-Linux-压缩包命令"><a href="#六-Linux-压缩包命令" class="headerlink" title="六 Linux 压缩包命令"></a>六 Linux 压缩包命令</h4><h5 id="6-1-针对tar命令"><a href="#6-1-针对tar命令" class="headerlink" title="6.1 针对tar命令"></a>6.1 针对tar命令</h5><blockquote>
<p>Linux中常用的压缩包，大多是.tar，.tar.gz，tgz的</p>
</blockquote>
<h5 id="6-2-解压压缩包"><a href="#6-2-解压压缩包" class="headerlink" title="6.2 解压压缩包"></a>6.2 解压压缩包</h5><blockquote>
<p>针对压缩包后缀的情况，采用不同的参数，否则可能会损失文件</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zxvf] 压缩包名称 [-C 路径]</span><br><span class="line"><span class="comment"># -z： 代表压缩包后缀是.gz的</span></span><br><span class="line"><span class="comment"># -x： 代表解压</span></span><br><span class="line"><span class="comment"># -v： 解压时，打印详细信息</span></span><br><span class="line"><span class="comment"># -f： -f选项必须放在所有选项的最后，代表指定文件名称</span></span><br><span class="line"><span class="comment"># -C 路径： 代表将压缩包内容解压到指定路径</span></span><br><span class="line"></span><br><span class="line">tar -zxvf jdk8.0.tar.gz</span><br></pre></td></tr></table></figure>



<h5 id="6-3-打包成压缩包"><a href="#6-3-打包成压缩包" class="headerlink" title="6.3 打包成压缩包"></a>6.3 打包成压缩包</h5><blockquote>
<p>可以将多个文件以及目录打包成压缩包，根据选择的参数指定压缩包名</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar [-zcvf] 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br><span class="line"><span class="comment"># -c： 代表打包</span></span><br><span class="line"><span class="comment"># 其他参数同上</span></span><br></pre></td></tr></table></figure>



<h5 id="6-4-针对zip类型压缩包"><a href="#6-4-针对zip类型压缩包" class="headerlink" title="6.4 针对zip类型压缩包"></a>6.4 针对zip类型压缩包</h5><blockquote>
<p>Linux不仅仅针对tar类型的压缩包，也支持zip，rar这种Windows下的压缩包。</p>
<p>不过需要安装软件针对对各种类型压缩包的操作</p>
</blockquote>
<h6 id="6-4-1-安装软件"><a href="#6-4-1-安装软件" class="headerlink" title="6.4.1 安装软件"></a>6.4.1 安装软件</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install zip     <span class="comment"># 打包程序</span></span><br><span class="line">yum -y install unzip   <span class="comment"># 解压程序</span></span><br></pre></td></tr></table></figure>



<h6 id="6-4-2-解压以及打包"><a href="#6-4-2-解压以及打包" class="headerlink" title="6.4.2 解压以及打包"></a>6.4.2 解压以及打包</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip 压缩包名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包</span></span><br><span class="line">zip 压缩包名称 文件1 文件2 目录1 目录2 ...</span><br></pre></td></tr></table></figure>



<h4 id="七-用户-amp-用户组的操作"><a href="#七-用户-amp-用户组的操作" class="headerlink" title="七 用户 &amp; 用户组的操作"></a>七 用户 &amp; 用户组的操作</h4><h5 id="7-1-用户的常用操作命令"><a href="#7-1-用户的常用操作命令" class="headerlink" title="7.1 用户的常用操作命令"></a>7.1 用户的常用操作命令</h5><blockquote>
<p>Linux是一个多用户的操作系统，任何一个用户想要操作Linux操作系统，必须向系统管理员申请一个账号才可以，并且以这个账号的身份去操作Linux。</p>
<p>用户的账号一方面可以帮助系统管理员追踪当前用户的操作。另一方面可以控制当前用户对系统资源访问。</p>
</blockquote>
<h6 id="7-1-1-用户的创建"><a href="#7-1-1-用户的创建" class="headerlink" title="7.1.1 用户的创建"></a>7.1.1 用户的创建</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">useradd [-cgd] [选项指定的具体内容] 用户名</span><br><span class="line"><span class="comment"># -c：代表comment，给用户添加一段注释</span></span><br><span class="line"><span class="comment"># -g：代表group，可以修改用户的所在组</span></span><br><span class="line"><span class="comment"># -d：代表指定用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h6 id="7-1-2-设置用户密码"><a href="#7-1-2-设置用户密码" class="headerlink" title="7.1.2 设置用户密码"></a>7.1.2 设置用户密码</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>



<h6 id="7-1-3-切换用户"><a href="#7-1-3-切换用户" class="headerlink" title="7.1.3 切换用户"></a>7.1.3 切换用户</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">su 用户名</span><br><span class="line"><span class="comment"># [root@localhost ~]#   -&gt; root用户在本地登录，并且当前在~目录下，#代表是超级管理员</span></span><br></pre></td></tr></table></figure>



<h6 id="7-1-4-删除用户"><a href="#7-1-4-删除用户" class="headerlink" title="7.1.4 删除用户"></a>7.1.4 删除用户</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">userdel [-r] 用户名</span><br><span class="line"><span class="comment"># -r： 代表删除用户的同时，删除该用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h6 id="7-1-5-修改用户"><a href="#7-1-5-修改用户" class="headerlink" title="7.1.5 修改用户"></a>7.1.5 修改用户</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">usermod [-cgd] [选项指定的具体内容] 用户名</span><br><span class="line"><span class="comment"># -c：代表comment，给用户添加一段注释</span></span><br><span class="line"><span class="comment"># -g：代表group，可以修改用户的所在组</span></span><br><span class="line"><span class="comment"># -d：代表指定用户的HOME目录</span></span><br></pre></td></tr></table></figure>



<h5 id="7-2-用户组的操作"><a href="#7-2-用户组的操作" class="headerlink" title="7.2 用户组的操作"></a>7.2 用户组的操作</h5><blockquote>
<p>用户的身份除了用户本身，还会分配到指定的用户组，可以通过用户组对设置一些文件的操作权限</p>
</blockquote>
<h6 id="7-2-1-创建用户组"><a href="#7-2-1-创建用户组" class="headerlink" title="7.2.1 创建用户组"></a>7.2.1 创建用户组</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure>



<h6 id="7-2-2-修改用户组"><a href="#7-2-2-修改用户组" class="headerlink" title="7.2.2 修改用户组"></a>7.2.2 修改用户组</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupmod [-n] [选项指定的具体内容] 用户组名</span><br><span class="line"><span class="comment"># -n 修改用户组名称</span></span><br></pre></td></tr></table></figure>



<h6 id="7-2-3-删除用户组"><a href="#7-2-3-删除用户组" class="headerlink" title="7.2.3 删除用户组"></a>7.2.3 删除用户组</h6><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br><span class="line"><span class="comment"># 只能删除不存在用户的用户组</span></span><br></pre></td></tr></table></figure>



<h4 id="八-文件权限的修改"><a href="#八-文件权限的修改" class="headerlink" title="八 文件权限的修改"></a>八 文件权限的修改</h4><blockquote>
<p>在Linux中输入ls -l 或者 ll查看文件和目录的详细信息</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">文件详情</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/02/Linux/1586268971368.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>实例中，a目录的第一个属性用“d”标识这个a是一个目录。</p>
<p>anaconda-ks.cfg第一个属性用“-”标识他是一个文件。</p>
<p>在Linux文件详情的后面属性需要分为三组查看</p>
<ul>
<li>rwx： 代表文件拥有者的权限</li>
<li>rwx： 代表文件所属组用户的权限</li>
<li>rwx： 代表其他用户对当前文件的操作权限<ul>
<li>r： 代表read，读的权限</li>
<li>w： 代表write，写的权限</li>
<li>x： 代表execute，代表执行权限</li>
</ul>
</li>
</ul>
<p>其余信息</p>
<ul>
<li><p>后续的第一个root：代表当前文件的拥有者</p>
</li>
<li><p>后续的第二个root： 代表当前文件的所属组</p>
</li>
<li><p>后续分别为：文件的大小和最后修改时间等信息</p>
</li>
</ul>
</blockquote>
<h5 id="8-1-对文件权限修改"><a href="#8-1-对文件权限修改" class="headerlink" title="8.1 对文件权限修改"></a>8.1 对文件权限修改</h5><blockquote>
<p>使用chmod对文件的权限进行修改，一种使用数字，一种使用符号……</p>
<ul>
<li>数字方式方便操作，不过要修改整体权限信息</li>
<li>符号方式更细粒度华，不过操作麻烦</li>
</ul>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +r hello.txt</span><br><span class="line"><span class="comment"># 这是默认为三组权限加了可读权限</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -w hello.txt</span><br><span class="line"><span class="comment"># 这是默认为三组权限减了可写权限</span></span><br></pre></td></tr></table></figure>



<h5 id="8-1-1-数字方式"><a href="#8-1-1-数字方式" class="headerlink" title="8.1.1 数字方式"></a>8.1.1 数字方式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] 777 文件|目录</span><br><span class="line"><span class="comment"># 上面三组是为三组权限都给予可读可写可执行 4+2+1=7</span></span><br><span class="line"><span class="comment"># rwx在这三个权限中r：4，w：2，x：1   0: 无权限</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>



<h5 id="8-1-2-符号方式"><a href="#8-1-2-符号方式" class="headerlink" title="8.1.2 符号方式"></a>8.1.2 符号方式</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] a=rw 文件|目录</span><br><span class="line"><span class="comment"># user：u，group：g，other：o，all：a</span></span><br><span class="line"><span class="comment"># read：r，write：w，execute：x</span></span><br><span class="line"><span class="comment"># 赋予权限的方式 , 添加：+，减掉：-，设定：=</span></span><br><span class="line"><span class="comment"># -R： 当修改一个目录权限时，可以添加-R，将目录下的全部内容，都修改权限。</span></span><br></pre></td></tr></table></figure>



<h5 id="8-2-文件拥有者及所属组修改"><a href="#8-2-文件拥有者及所属组修改" class="headerlink" title="8.2 文件拥有者及所属组修改"></a>8.2 文件拥有者及所属组修改</h5><blockquote>
<p>chown可以直接修改拥有者和所属组，chgrp只能修改所属组……</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件的拥有者和所属组</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者：所属组 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的拥有者</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 拥有者 文件|目录</span><br><span class="line"><span class="comment"># 修改文件的所属组</span></span><br><span class="line"><span class="built_in">chgrp</span> [-R] 所属组 文件|目录</span><br></pre></td></tr></table></figure>



<h4 id="九-Linux-的其他操作命令"><a href="#九-Linux-的其他操作命令" class="headerlink" title="九 Linux 的其他操作命令"></a>九 Linux 的其他操作命令</h4><h5 id="9-1-进程操作"><a href="#9-1-进程操作" class="headerlink" title="9.1 进程操作"></a>9.1 进程操作</h5><blockquote>
<p>需要用到类似Windows的结束进程时，在Linux下需要使用如下命令</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef </span><br><span class="line"><span class="comment"># 查看全部正在运行的进程</span></span><br><span class="line">ps -ef | grep 搜索的内容</span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>



<h5 id="9-2-服务的操作"><a href="#9-2-服务的操作" class="headerlink" title="9.2 服务的操作"></a>9.2 服务的操作</h5><blockquote>
<p>和Windows下的服务操作一致，只需使用如下命令，默认为centos7版本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对服务的启动，停止，重启，开机自动启动，禁止开机自动启动，查看服务状态。</span></span><br><span class="line">systemctl start|stop|restart|<span class="built_in">enable</span>|<span class="built_in">disable</span>|status 服务名称</span><br></pre></td></tr></table></figure>



<h5 id="9-3-端口号查看"><a href="#9-3-端口号查看" class="headerlink" title="9.3 端口号查看"></a>9.3 端口号查看</h5><blockquote>
<p>如发现端口号被占用，可以使用如下方式查找pid，并结束进程</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 想使用指定的命令需要事先下载netstat</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># 查看端口号占用情况</span></span><br><span class="line">netstat -naop | grep 端口号</span><br></pre></td></tr></table></figure>



<h5 id="9-4-访问地址"><a href="#9-4-访问地址" class="headerlink" title="9.4 访问地址"></a>9.4 访问地址</h5><blockquote>
<p>类似浏览器访问路径，无法图形化显示，一般用于测试</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl 访问地址</span><br></pre></td></tr></table></figure>



<h5 id="9-5-查找文件"><a href="#9-5-查找文件" class="headerlink" title="9.5 查找文件"></a>9.5 查找文件</h5><blockquote>
<p>在Linux中查找指定文件，参数较多，如下为根据文件名称查询</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find 路径 -<span class="built_in">type</span> f | grep 文件名</span><br></pre></td></tr></table></figure>



<h4 id="十-安装JDK"><a href="#十-安装JDK" class="headerlink" title="十 安装JDK"></a>十 安装JDK</h4><blockquote>
<p>linux 安装jdk只需要配置下环境变量就行了, 先解压jdk包</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"> tar -zxvf jdk8.0.tar.gz -C /opt/</span><br><span class="line"> <span class="built_in">mv</span> jdk8.0 java</span><br><span class="line"> <span class="comment"># 解压到opt目录</span></span><br><span class="line"> <span class="built_in">cd</span> /root/</span><br><span class="line"> <span class="built_in">ls</span> -la</span><br><span class="line"> vi .bash_profile</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 在这个文件添加java的配置</span></span><br><span class="line">JAVA_HOME=/opt/java</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin <span class="comment"># : 是连接符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#	接着 wq 保存退出来</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile <span class="comment"># 立即执行文件配置生效</span></span><br></pre></td></tr></table></figure>



<h4 id="十一-部署Tomcat"><a href="#十一-部署Tomcat" class="headerlink" title="十一 部署Tomcat"></a>十一 部署Tomcat</h4><blockquote>
<p>通过 wget 下载 Tomcat</p>
<p>首先得安装 wget</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tomcat 地址下载</span></span><br><span class="line">wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.84/bin/apache-tomcat-8.5.84.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者现在windows 下载好,然后Xftp 上传至linux</span></span><br><span class="line">tar -zxvf apache-tomcat-8.5.84.tar.gz -C /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/tomcat8.0/bin</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 启动tomcat</span></span><br><span class="line">./startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动后在游览器输入linux ip地址:8080</span></span><br><span class="line"><span class="comment"># 如果无法访问 , linux 输入命令</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment"># Bootstrap 就是tomcat , 说明tomcat启动成功</span></span><br><span class="line"><span class="comment"># 接下来使用 curl 来证明是不是网络问题</span></span><br><span class="line">curl www.baidu.com <span class="comment"># 可以的话不是网络问题</span></span><br><span class="line">curl http://localhost:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面都行的话 , 那就是防火墙的问题, 没有放行</span></span><br><span class="line"><span class="comment"># 关闭防火墙之后就可以在游览器访问了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 Tomcat</span></span><br><span class="line"><span class="comment"># 先 jps 看到 Bootstrap 前面的代码, 例如6197</span></span><br><span class="line"><span class="built_in">kill</span> 6197</span><br><span class="line"><span class="comment"># 或者 在Tomcat 目录下</span></span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure>

<p>关闭防火墙：</p>
<ul>
<li>systemctl stop firewalld 关闭</li>
<li>systemctl disable firewalld （重启之后防火墙也不会再打开了）</li>
</ul>
<h4 id="十二-部署-SpringBoot-工程"><a href="#十二-部署-SpringBoot-工程" class="headerlink" title="十二 部署 SpringBoot 工程"></a>十二 部署 SpringBoot 工程</h4><blockquote>
<p>首先把 vue 工程打包成 静态文件 , 通过命令 npm run build , 打包完成之后放在 dist 目录 , 接着把该目录文件复制于spring boot 的resources 中static文件夹下。</p>
<p>然后 Idea 将工程打包成 jar 包</p>
<p>通过 Xftp 将jar 上传至 linux 服务</p>
<p>启动 Spring Boot：</p>
<p><code>nohup java -jar vhr-admin-0.0.1.jar &gt; 8081.log &amp;</code></p>
<p><code>nohup</code> 表示当前窗口关闭的时候，不要挂起应用</p>
<p>&amp; 表示应用再后台运行</p>
<p><code>&gt;8081.log</code> 表示日志输出到 8081.log 文件中</p>
<p>关闭springboot 工程</p>
<p>jps</p>
<p> kill 进程代码</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-集合</title>
    <url>/2022/12/28/Java-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>集合的基本使用, 迭代器底层代码 , 深入分析 JDK 1.7 , 1.8 HashMap底层原理 </p>
<span id="more"></span>

<h4 id="一-什么是算法"><a href="#一-什么是算法" class="headerlink" title="一 什么是算法"></a>一 什么是算法</h4><p><strong>【1】算法:</strong></p>
<ol>
<li>可以解决具体问题:例如1+2+3+4+。。。+99+100</li>
</ol>
<p>​    解题流程=算法</p>
<ol start="2">
<li><p>有设计解决的具体的流程<br>算法1:1+2=3 3+3=6 6+4=10.……加到100 –》5050</p>
<p>算法2:(1+100)<em>50=101</em>50=5050–&gt;高斯算法</p>
<p>有评价这个算法的具体的指标–》时间复杂度    空间复杂度（从数学角度考虑)</p>
</li>
</ol>
<p><strong>【2】数据结构:</strong></p>
<p>​    就是在计算机的缓存，内存，硬盘如何组织管理数据的。重点在结构上，是按照什么结构来组织管理我们的数据。</p>
<p><strong>数据结构分为:</strong><br>(1）逻辑结构︰–》思想上的结构–》卧室，厨房，卫生间—》线性表（数组，链表)，图，树，栈，队列</p>
<p>(2）物理结构∶–》真实结构–》钢筋混凝土+牛顿力学—–》紧密结构（顺序结构)，跳转结构（链式结构)</p>
<p>集合重点讲就是 : <strong>紧密结构</strong> 和 <strong>跳转结构</strong>。</p>
<h5 id="1-1-紧密结构"><a href="#1-1-紧密结构" class="headerlink" title="1.1 紧密结构"></a>1.1 紧密结构</h5><blockquote>
<p>紧密结构典型的就是 数组</p>
</blockquote>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027014918288.png" alt="image-20221027014918288" style="zoom:200%;">



<h5 id="1-2-跳转结构"><a href="#1-2-跳转结构" class="headerlink" title="1.2 跳转结构"></a>1.2 跳转结构</h5><blockquote>
<p>线性逻辑结构如果是跳转结构, 典型的是 链表</p>
</blockquote>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015109666.png" alt="image-20221027015109666" style="zoom:200%;">

<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015207396.png" alt="image-20221027015207396"></p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027015259389.png" alt="image-20221027015259389"></p>
<p><strong>跳转结构的优点 与 缺点 :</strong></p>
<p><strong>优点 :</strong> 删除元素,插入元素效率高</p>
<p><strong>缺点 :</strong> 查询元素效率低</p>
<h4 id="二-集合的引入"><a href="#二-集合的引入" class="headerlink" title="二 集合的引入"></a>二 集合的引入</h4><blockquote>
<p>数组，集合都是对多个数据进行存储操作的，简称为容器。</p>
<p>这里的存储指的是内存层面的存储，而不是持久化存储(.txt,.avi.jpg,数据库)。</p>
</blockquote>
<p><strong>数组 : 特点 :</strong></p>
<ol>
<li><p>数组一旦指定了长度，那么长度就被确定了，不可以更改。int[] arr = new int[6];</p>
</li>
<li><p>数组一旦声明了类型以后，数组中只能存放这个类型的数据。数组中只能存放同一种类型的数据。</p>
<p>int[] arr,String[] s,double[] d…..</p>
</li>
</ol>
<p><strong>数组 : 缺点 :</strong></p>
<ol>
<li>数组一旦指定了长度，那么长度就被确定了，不可以更改。</li>
<li>删除，增加元素效率低。</li>
<li>数组中实际元素的数量是没有办法获取的，没有提供对应的方法或者属性来获取</li>
<li>数组存储:有序，可重复，对于无序的，不可重复的数组不能满足要求。</li>
</ol>
<p>正因为上面的缺点，引入了一个新的存储数据的结构—》<strong>集合</strong></p>
<h4 id="三-简要集合结构图"><a href="#三-简要集合结构图" class="headerlink" title="三 简要集合结构图"></a>三 简要集合结构图</h4><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027020651831.png" alt="image-20221027020651831" style="zoom:200%;">

<h5 id="3-1-集合的应用场合"><a href="#3-1-集合的应用场合" class="headerlink" title="3.1 集合的应用场合"></a>3.1 集合的应用场合</h5><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027020906562.png" alt="image-20221027020906562" style="zoom:200%;">

<p>当需要将相同结构的个体整合到一起的时候，需要集合。</p>
<p>实际应用场合 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027021123636.png" alt="image-20221027021123636"></p>
<h4 id="四-Collection-接口"><a href="#四-Collection-接口" class="headerlink" title="四 Collection 接口"></a>四 Collection 接口</h4><h5 id="4-1-collection-常用方法"><a href="#4-1-collection-常用方法" class="headerlink" title="4.1 collection 常用方法"></a>4.1 collection 常用方法</h5><blockquote>
<p>Collection 接口的常用方法:</p>
<p>增加: add(E e) addALL(collection&lt; ? extends E&gt;c)</p>
<p>删除: clear() remove(object o)</p>
<p>修改:</p>
<p>查看: iterator()  size()</p>
<p>判断: contains(0bject o)  equals(object o) isEmpty()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        创建对象 : 接口不能创建对象 , 利用实现类创建对象</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">// 调用方法:</span></span><br><span class="line">        <span class="comment">// 集合有一个特点:只能存放引用数据类型的数据，不能是基本数据类型</span></span><br><span class="line">        <span class="comment">// 基本数据类型自动装箱，对应包装类。int---&gt;Integer</span></span><br><span class="line">        col.add(<span class="number">8</span>);</span><br><span class="line">        col.add(<span class="number">88</span>);</span><br><span class="line">        col.add(<span class="number">888</span>);</span><br><span class="line">        <span class="comment">// 这里的 col 是调用了 ArrayList的 toString 方法</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">11</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">100</span>&#125;);</span><br><span class="line">        col.addAll(list); <span class="comment">// 将另一个集合添加入 col 中</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空集合</span></span><br><span class="line">        <span class="comment">// col.clear();</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的数量为 :&quot;</span>+col.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;集合是否为空 : &quot;</span> + col.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> col.remove(<span class="number">15</span>);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中数据是否被删除: &quot;</span> + remove);</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col1.add(<span class="number">8</span>);</span><br><span class="line">        col1.add(<span class="number">88</span>);</span><br><span class="line">        col1.add(<span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col2.add(<span class="number">8</span>);</span><br><span class="line">        col2.add(<span class="number">88</span>);</span><br><span class="line">        col2.add(<span class="number">888</span>);</span><br><span class="line">        System.out.println(col1.equals(col2)); <span class="comment">// equals 比较值</span></span><br><span class="line">        System.out.println(col1 == col2); <span class="comment">// 地址一定不相等 false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合是否包含元素 :&quot;</span>+col2.contains(<span class="number">1688</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-2-Collection-遍历方式"><a href="#4-2-Collection-遍历方式" class="headerlink" title="4.2 Collection 遍历方式"></a>4.2 Collection 遍历方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        col.add(<span class="number">8</span>);</span><br><span class="line">        col.add(<span class="number">88</span>);</span><br><span class="line">        col.add(<span class="number">888</span>);</span><br><span class="line">        col.add(<span class="number">1688.88</span>);</span><br><span class="line">        <span class="comment">// 方式1: 增强 for 循环, 普通for循环不行</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : col)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 方式2: iterator</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>iterator 底层简要原理 :</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027024842004.png" alt="image-20221027024842004" style="zoom:200%;">



<h4 id="五-List-接口"><a href="#五-List-接口" class="headerlink" title="五 List 接口"></a>五 List 接口</h4><h5 id="5-1-List-接口常用方法"><a href="#5-1-List-接口常用方法" class="headerlink" title="5.1 List 接口常用方法"></a>5.1 List 接口常用方法</h5><blockquote>
<p>增加: add(int index, E eLement)</p>
<p>删除: remove(int index)    remove(object o)</p>
<p>修改:  set(int index，E element)</p>
<p>查看: get(int index)</p>
<p>判断:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">8</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        list.add(<span class="number">888</span>);</span><br><span class="line">        list.add(<span class="number">8888</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.add(<span class="number">2</span>,<span class="number">1688</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.set(<span class="number">3</span>,<span class="number">1688.88</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.remove(<span class="number">2</span>);<span class="comment">//在集合中存入的是Integer类型数据的时候，调用remove方法调用的是: remove(int index)</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(<span class="number">3</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 集合 遍历:</span></span><br><span class="line">        <span class="comment">// 方式1: 普通 for 循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方式2: 增强 for 循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj : list)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方式3: 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-2-ArrayList-实现类-JDK-1-7-源码"><a href="#5-2-ArrayList-实现类-JDK-1-7-源码" class="headerlink" title="5.2 ArrayList 实现类 JDK 1.7 源码"></a>5.2 ArrayList 实现类 JDK 1.7 源码</h5><ol>
<li><p>底层重要属性:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031304840.png" alt="image-20221027031304840"></p>
</li>
</ol>
<p>在JDK1.7中 : 在调用构造器的时候给底层数组elementData初始化，数组初始化长度为10 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031430700.png" alt="image-20221027031430700"></p>
<p>对应内存 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031616896.png" alt="image-20221027031616896"></p>
<p>调用 add 方法 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027031902285.png" alt="image-20221027031902285"></p>
<p>当数组中的10个位置都满了的时候就开始进行数组的扩容，扩容长度为原数组的1.5倍 :</p>
<h5 id="5-3-ArrayList-实现类-JDK-1-8源码"><a href="#5-3-ArrayList-实现类-JDK-1-8源码" class="headerlink" title="5.3 ArrayList 实现类 JDK 1.8源码"></a>5.3 ArrayList 实现类 JDK 1.8源码</h5><p>JDK1.8底层依旧是Object类型的数组，size:数组中有效长度:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034416589.png" alt="image-20221027034416589"></p>
<p>ArrayList al = new ArrayList(); 调用空构造器:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034644788.png" alt="image-20221027034644788"></p>
<p>add 方法 :</p>
<table>
<thead>
<tr>
<th><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034801389.png" alt="image-20221027034801389"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034831881.png" alt="image-20221027034831881"></td>
</tr>
<tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027034918084.png" alt="image-20221027034918084" style="zoom:150%;"></td>
</tr>
<tr>
<td><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035037056.png" alt="image-20221027035037056"></td>
</tr>
</tbody></table>
<p>底层数组，在调用构造器的时候，底层数组为0，在调用add方法以后<br>底层数组才重新赋值为新数组，新数组的长度为10-》节省了内存，在add后才创建长度为10的数组</p>
<h5 id="5-4-Vector-实现类源码"><a href="#5-4-Vector-实现类源码" class="headerlink" title="5.4 Vector 实现类源码"></a>5.4 Vector 实现类源码</h5><blockquote>
<p>已经淘汰, 了解</p>
</blockquote>
<p>底层Object数组，int类型属性表示数组中有效长度:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035321786.png" alt="image-20221027035321786"></p>
<p>Vector v = new Vector(); 调用构造器 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035418162.png" alt="image-20221027035418162"></p>
<p>add 方法:</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035526847.png" alt="image-20221027035526847"></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027035805976.png" alt="image-20221027035805976" style="zoom:200%;">



<h5 id="5-5-泛型"><a href="#5-5-泛型" class="headerlink" title="5.5 泛型"></a>5.5 泛型</h5><blockquote>
<p>什么是泛型 ( Generic ):</p>
<p>泛型就相当于标签</p>
<p>形式 : &lt;&gt;</p>
</blockquote>
<p>没有泛型的时候使用集合 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 ArrayList集合 , 向这个集合存入学生的成绩</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">98</span>);</span><br><span class="line">        list.add(<span class="number">95</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        list.add(<span class="string">&quot;马冬梅&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历查看</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : list)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果不使用泛型的话，有缺点:<br>一般我们在使用的时候基本上往集合中存入的都是相同类型的数据–》便于管理，所以现在什么引用数据类型都可以存入集合，不方便!</p>
<p>JDK1.5 开始使用,集合中使用泛型:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入泛型的优点:在编译时期就会对类型进行检查，不是泛型对应的类型就不可以添加入这个集合。</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">98</span>);</span><br><span class="line">        list.add(<span class="number">95</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">// 遍历查看</span></span><br><span class="line">        <span class="keyword">for</span> (Integer o : list)&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结  :</strong> 泛型实际就是一个&lt;&gt;引起来的参数类型，这个参数类型具体在使用的时候才会确定具体的类型。使用了泛型以后，可以确定集合中存放数据的类型，在编译时期就可以检查出来。泛型的类型:都是引用数据类型，不能是基本数据类型。</p>
<h5 id="5-6-泛型类-泛型接口"><a href="#5-6-泛型类-泛型接口" class="headerlink" title="5.6 泛型类, 泛型接口"></a>5.6 泛型类, 泛型接口</h5><p>泛型类的定义和实例化 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GenericTest&lt;E&gt;就是一个泛型类</span></span><br><span class="line"><span class="comment"> * &lt;&gt;里面就是一个参数类型，但是这个类型是什么呢?这个类型现在是不确定的，相当于一个占位</span></span><br><span class="line"><span class="comment"> *但是现在确定的是这个类型一定是一个引用数据类型，而不是基本数据类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    E sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(E n)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">(E[] m)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// GenericTest进行实例化:</span></span><br><span class="line">        <span class="comment">// 实例化的时候不指定泛型:如果实例化的时候不明确的指定类的泛型，那么认为此泛型为object类型</span></span><br><span class="line">        <span class="type">GenericTest</span> <span class="variable">gt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTest</span>();</span><br><span class="line">        gt.a(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        gt.a(<span class="number">17</span>);</span><br><span class="line">        gt.a(<span class="number">9.8</span>);</span><br><span class="line">        gt.b(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化的时候指定泛型:</span></span><br><span class="line">        GenericTest&lt;String&gt; gt2 = <span class="keyword">new</span> <span class="title class_">GenericTest</span>&lt;&gt;();</span><br><span class="line">        gt2.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>继承情况:</p>
<ul>
<li><p>父类指定泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubGenericTest</span> <span class="keyword">extends</span> <span class="title class_">GenericTest</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用</span></span><br><span class="line">        <span class="type">SubGenericTest</span> <span class="variable">subGenericTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubGenericTest</span>();</span><br><span class="line">        subGenericTest.a(<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>父类不指定泛型</p>
<p>如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubGenericTest2</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">GenericTest</span>&lt;E&gt;&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line"><span class="comment">//这是main方法，程序的入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(string[]args)</span> &#123;</span><br><span class="line">	SubGenericTest2&lt;string&gt; s = newSubGenericTest2&lt;&gt;();s.a ( <span class="string">&quot;abc&quot;</span> ) ;</span><br><span class="line">s.sex =<span class="string">&quot;女&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>细节 :</strong></p>
<p>泛型类可以定义多个参数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span>&lt;A,B,C&gt;&#123;</span><br><span class="line">    A age;</span><br><span class="line">    B name;</span><br><span class="line">    c sex;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(A m,B n,c x)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型类的构造器是不能有泛型参数的</p>
<p>泛型类种的静态方法不能使用类的泛型 。</p>
<h5 id="5-7-泛型方法"><a href="#5-7-泛型方法" class="headerlink" title="5.7 泛型方法"></a>5.7 泛型方法</h5><blockquote>
<p>1.什么是泛型方法:<br>    不是带泛型的方法就是泛型方法<br>    泛型方法有要求:这个方法的泛型的参数类型要和当前的类的泛型无关</p>
<p>​    换个角度:<br>​    泛型方法对应的那个泛型参数类型和﹑当前所在的这个类是否是泛型类，泛型是啥无关</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">// 不是泛型方法 (不能是静态方法)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(E e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">b</span><span class="params">(T t)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>泛型方法定义的时候，前面要加上<T><br>原因:如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错</T></li>
<li>T的类型是在调用方法的时候确定的</li>
<li>泛型方法可否是静态方法? 可以是静态方法</li>
</ol>
<p>泛型参数存在继承关系的情况 :</p>
<p><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027074732990.png" alt="image-20221027074732990"></p>
<p><strong>通配符 :</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027075252798.png" alt="image-20221027075252798" style="zoom:200%;">

<p><strong>使用通配符 :</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221027075326146.png" alt="image-20221027075326146" style="zoom:200%;">



<h5 id="5-8-泛型受限"><a href="#5-8-泛型受限" class="headerlink" title="5.8 泛型受限"></a>5.8 泛型受限</h5><ol>
<li><p>Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// a,b,c三个集合是并列的关系:</span></span><br><span class="line">        ArrayList&lt;Object&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Person&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Student&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        开始使用泛型受限:泛型的上限list&lt; ? extends Person&gt; :就相当于:;</span></span><br><span class="line"><span class="comment">        List&lt;? extends Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的子类&gt;的父类*/</span></span><br><span class="line"></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// list1 = a;</span></span><br><span class="line">        list1 = b;</span><br><span class="line">        list1 = c;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*开始使用泛型受限:泛型的下限List&lt;? super Person&gt;</span></span><br><span class="line"><span class="comment">就相当于:</span></span><br><span class="line"><span class="comment">List&lt;? super Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的父类&gt;的父类*/</span></span><br><span class="line">        List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;</span><br><span class="line">        list2 = a;</span><br><span class="line">        list2 = b;</span><br><span class="line">       <span class="comment">// list2 = c;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="六-LinkedList"><a href="#六-LinkedList" class="headerlink" title="六 LinkedList"></a>六 LinkedList</h4><blockquote>
<p>JDK 1.8 底层链表 (双向链表)</p>
</blockquote>
<h5 id="6-1-常用方法"><a href="#6-1-常用方法" class="headerlink" title="6.1 常用方法"></a>6.1 常用方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        linkedList常用方法:</span></span><br><span class="line"><span class="comment">            增加 addFirst(E e) addLast(E e)</span></span><br><span class="line"><span class="comment">                    offer(E e) offerFirst(E e) offerLast(E e)</span></span><br><span class="line"><span class="comment">            删除  poLl() JDK 1.6之后</span></span><br><span class="line"><span class="comment">                    poLLFirst( ) polLLast( )removeFirst( ) removeLast( )</span></span><br><span class="line"><span class="comment">            修改</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            查看  element()</span></span><br><span class="line"><span class="comment">                    getFirst() getLast( )</span></span><br><span class="line"><span class="comment">                    indexof(object o)LastIndexOf(Object o)peek( )</span></span><br><span class="line"><span class="comment">                peekFirst( ) peekLast()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbbb&quot;</span>);</span><br><span class="line">        list.addFirst(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        list.addLast(<span class="string">&quot;8888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.offer(<span class="string">&quot;lll&quot;</span>);  <span class="comment">// 添加元素在尾端</span></span><br><span class="line">        list.offerFirst(<span class="string">&quot;[[ss&quot;</span>);</span><br><span class="line">        list.offerLast(<span class="string">&quot;rrr&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.poll()); <span class="comment">// 删除第一个元素</span></span><br><span class="line">        System.out.println(list.pollFirst());</span><br><span class="line">        System.out.println(list.pollLast());</span><br><span class="line">        System.out.println(list.remove());</span><br><span class="line">        System.out.println(list.removeFirst());</span><br><span class="line">        System.out.println(list); <span class="comment">// LinkList 可以添加重复的数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*list.clear(); // 清空集合</span></span><br><span class="line"><span class="comment">        System.out.println(list.pollFirst()); // 输出 []</span></span><br><span class="line"><span class="comment">        System.out.println(list.removeFirst()); // 会报错*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 普通 for 循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 增强 for :</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 迭代器</span></span><br><span class="line">        <span class="comment">/*Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">        while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(it.next());</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator();it.hasNext();)&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-简要底层原理图"><a href="#6-2-简要底层原理图" class="headerlink" title="6.2  简要底层原理图"></a>6.2  简要底层原理图</h5><table>
<thead>
<tr>
<th align="center">LinkList简要原理图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221203062227686.png" alt="image-20221203062227686"></td>
</tr>
</tbody></table>
<h5 id="6-3-模拟-LinkList-源码"><a href="#6-3-模拟-LinkList-源码" class="headerlink" title="6.3 模拟 LinkList 源码"></a>6.3 模拟 LinkList 源码</h5><ul>
<li><p>首先创建一个节点类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123; <span class="comment">// 节点类</span></span><br><span class="line">    <span class="comment">// 三个属性</span></span><br><span class="line">    <span class="comment">// 上一个元素的地址</span></span><br><span class="line">    <span class="keyword">private</span> Node pre;</span><br><span class="line">    <span class="comment">// 当前存入元素</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="comment">// 下一个元素的地址</span></span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;pre=&quot;</span> + pre +</span><br><span class="line">                <span class="string">&quot;, obj=&quot;</span> + obj +</span><br><span class="line">                <span class="string">&quot;, next=&quot;</span> + next +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getPre</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPre</span><span class="params">(Node pre)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pre = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个链表类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkList</span> &#123;</span><br><span class="line"><span class="comment">//    链中一定有一个首节点</span></span><br><span class="line">    Node first;</span><br><span class="line"><span class="comment">//    链中一定有一个尾节点</span></span><br><span class="line">    Node last;</span><br><span class="line"><span class="comment">//    计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//    提供一个构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    添加元素方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="literal">null</span>)&#123; <span class="comment">// 证明添加的元素是第一个节点</span></span><br><span class="line">            <span class="comment">// 将添加的元素封装为一个 Node 对象</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            node.setPre(<span class="literal">null</span>);</span><br><span class="line">            node.setObj(o);</span><br><span class="line">            node.setNext(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 当前链中第一个节点变为 node</span></span><br><span class="line">            first = node;</span><br><span class="line">            <span class="comment">// 当前链中最后一个节点变为 node</span></span><br><span class="line">            last = node;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 已经不是链中的第一个节点了</span></span><br><span class="line">            <span class="comment">// 将添加的元素封装为一个 Node 对象</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            node.setPre(last); <span class="comment">// node 的上一个节点就是当前链中的最后一个节点last</span></span><br><span class="line">            node.setObj(o);</span><br><span class="line">            node.setNext(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 当前链中的最后一个节点的下一个元素 要指向 node</span></span><br><span class="line">            last.setNext(node);</span><br><span class="line">            <span class="comment">// 将最后一个节点变为 node</span></span><br><span class="line">            last = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 链中元素数量加 1</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到集合中元素的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    通过下标获得元素</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取链表的头元素</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            n = n.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n.getObj();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyLinkList</span> <span class="variable">ml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkList</span>();</span><br><span class="line">        ml.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        ml.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        System.out.println(ml.getSize());</span><br><span class="line">        System.out.println(ml.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="6-4-LinkedList-源码解析"><a href="#6-4-LinkedList-源码解析" class="headerlink" title="6.4 LinkedList 源码解析"></a>6.4 LinkedList 源码解析</h5><blockquote>
<p>JDK 1.7 和 JDK 1.8 的LinkedList的源码是一致的</p>
</blockquote>
<p>点开 LinkedList 源码看, 发现主要的点跟上面模拟代码的都差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; &#123;<span class="comment">//E是一个泛型，具体的类型要在实例化的时候才会最终确定</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//集合中元素的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Node的内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;<span class="comment">//当前元素</span></span><br><span class="line">        Node&lt;E&gt; next;<span class="comment">//指向下一个元素地址</span></span><br><span class="line">        Node&lt;E&gt; prev; <span class="comment">//上一个元素地址</span></span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;<span class="comment">//链表的首节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;<span class="comment">//链表的尾节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素操作:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;<span class="comment">//添 加的元素e</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">//将链表中的last节点给1如果是第一-个元素的话1为null</span></span><br><span class="line">        <span class="comment">//将元素封装为--个Node具体的对象:</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//将链表的last节点指向新的创建的对象:</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)<span class="comment">//如果添加的是第一个节点</span></span><br><span class="line">            first = newNode;<span class="comment">//将链表的first节点指向为新节点</span></span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果添加的不是第一个节点</span></span><br><span class="line">            l.next = newNode;<span class="comment">//将l的下一个指向为新的节点</span></span><br><span class="line">        size++;<span class="comment">//集合中元素数量加1操作</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//获取集合中元素数量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//通过索引得到元素:</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span> <span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkElementIndex (index) ;<span class="comment">//健壮性考虑</span></span><br><span class="line">        <span class="keyword">return</span> node (index).item;</span><br><span class="line">    &#125;</span><br><span class="line">    Node &lt;E&gt; node (<span class="type">int</span> index) &#123;</span><br><span class="line">        <span class="comment">// 如果index在链表的前半段，那么从前往后找</span></span><br><span class="line">        <span class="keyword">if</span>(index &lt;(size &gt;&gt; <span class="number">1</span>))&#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)</span><br><span class="line">                x = x.next ;</span><br><span class="line">            <span class="keyword">return</span> x ;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果index在链表的后半段，那么从后往前找</span></span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>size-<span class="number">1</span>;i&gt;index;i--)</span><br><span class="line">                x = x.prev ;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-5-iterator-相关"><a href="#6-5-iterator-相关" class="headerlink" title="6.5 iterator()相关"></a>6.5 iterator()相关</h5><p><strong>对应关系</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221204230549169.png" alt="image-20221204230549169" style="zoom:200%;">

<p><strong>具体实现</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221204231403874.png" alt="image-20221204231403874" style="zoom:200%;">



<p>增加 for 循环底层也是通过迭代器实现的。</p>
<h5 id="6-6-ListIterator-迭代器"><a href="#6-6-ListIterator-迭代器" class="headerlink" title="6.6 ListIterator 迭代器"></a>6.6 ListIterator 迭代器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">       <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">       Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">       <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">               list.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码出现如下异常:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">并发修改异常</span><br></pre></td></tr></table></figure>

<p>出错原因: 就是迭代器和list 同时对集合进行操作</p>
<p>解决办法: 就是让一个”人”去做 - &gt; 引入 ListIterator 迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">        ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">                it.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>迭代和添加都是由 ListIterator 完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 在 &quot;dd&quot; 之后添加一个字符串 &quot;ee&quot;</span></span><br><span class="line">        ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;dd&quot;</span>.equals(it.next()))&#123;</span><br><span class="line">                it.add(<span class="string">&quot;ee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(it.hasPrevious());</span><br><span class="line"><span class="comment">//        逆向遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasPrevious())&#123;</span><br><span class="line">            System.out.println(it.previous());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<h4 id="七-Set-接口"><a href="#七-Set-接口" class="headerlink" title="七 Set 接口"></a>七 Set 接口</h4><blockquote>
<p>这个无序是相对 List 接口部分来说的 , 无序不等于随机</p>
</blockquote>
<p>特点 : 唯一 , 无序</p>
<p>遍历方式 : </p>
<ol>
<li>迭代器</li>
<li>增强 for 循环</li>
</ol>
<p>实现类 : </p>
<ol>
<li>HashSet</li>
</ol>
<h5 id="7-1-HashSet"><a href="#7-1-HashSet" class="headerlink" title="7.1 HashSet"></a>7.1 HashSet</h5><p>HashSet 常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        hs.add(<span class="number">19</span>);</span><br><span class="line">        hs.add(<span class="number">19</span>);</span><br><span class="line">        hs.add(<span class="number">8</span>);</span><br><span class="line">        hs.add(<span class="number">81</span>);</span><br><span class="line">        hs.add(<span class="number">18</span>);</span><br><span class="line">        System.out.println(hs.size()); <span class="comment">// 唯一, 无序</span></span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>放入自定义的引用数据类型的数据 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;Student&gt; hs = new HashSet&lt;&gt;();</span><br><span class="line">        hs.add(new Student(17,&quot;王木木&quot;));</span><br><span class="line">        hs.add(new Student(16,&quot;王木木最棒&quot;));</span><br><span class="line">        hs.add(new Student(16,&quot;王木木厉害aa&quot;));</span><br><span class="line">        hs.add(new Student(17,&quot;王木木&quot;));</span><br><span class="line">        System.out.println(hs.size());</span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面的自定义的类型不满足唯一 , 无需的特点。</p>
<h5 id="7-2-HashSet-简要原理"><a href="#7-2-HashSet-简要原理" class="headerlink" title="7.2 HashSet 简要原理"></a>7.2 HashSet 简要原理</h5><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205074253607.png" alt="image-20221205074253607" style="zoom:200%;">

<p>所以上面的自定义类型的解决方法就是在自定义类型重写 <code>hashCode</code> 和 <code>equals</code> 方法 , 这样就不会出现相同的元素了。</p>
<h5 id="7-3-LinkedHashSet-的使用"><a href="#7-3-LinkedHashSet-的使用" class="headerlink" title="7.3 LinkedHashSet 的使用"></a>7.3 LinkedHashSet 的使用</h5><p>特点 : 唯一, 有序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;Student&gt; hs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>));</span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(hs.size());</span><br><span class="line">        System.out.println(hs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其实就是在 HashSet 的基础上，多了一个总的链表,这个总链表将放入的元素串在一起，方便有序的遍历。</p>
<h5 id="7-4-比较器的使用"><a href="#7-4-比较器的使用" class="headerlink" title="7.4 比较器的使用"></a>7.4 比较器的使用</h5><ul>
<li>以 int 类型为案例:<br>比较的思路:将比较的数据做差,然后返回一个int类型的数据，将这个int类型的数值按照 =0 &gt;0 &lt;0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(a-b); <span class="comment">// =0 &gt;0 &lt;0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>以 String 类型比较</p>
<p>String类实现了Comparable接口,这个接口中有一个抽象方法compareTo, String类中重写这个方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">System.out.println(a.compareTo(b));</span><br></pre></td></tr></table></figure></li>
<li><p>Double 类型比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">9.6</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">9.3</span>;</span><br><span class="line">System.out.println(((Double)a).compareTo((Double)b));</span><br></pre></td></tr></table></figure></li>
<li><p>自定义类型比较</p>
<p><strong>内部比较器</strong></p>
<ul>
<li><p>Student</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, student.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">// 按照年龄进行比较</span></span><br><span class="line">       <span class="comment">// return this.getAge() - o.getAge();</span></span><br><span class="line">        <span class="comment">// 按照名字比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        System.out.println(s1.compareTo(s2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>外部比较器</strong></p>
<ol>
<li><p>Student 类 没有实现 Comparable 接口</p>
</li>
<li><p>新建一个比较器的类实现Comparator 接口并重写compare 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 比较年龄</span></span><br><span class="line">        <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>, <span class="string">&quot;王木木&quot;</span>);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">compare</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Compare</span>();</span><br><span class="line">        System.out.println(compare.compare(s1, s2));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
</ul>
<p>外部比较器和内部比较器 比较 :<br><strong>答案:</strong> 外部比较器，多态,扩展性好</p>
<h5 id="7-5-TreeSet-的使用及原理"><a href="#7-5-TreeSet-的使用及原理" class="headerlink" title="7.5 TreeSet 的使用及原理"></a>7.5 TreeSet 的使用及原理</h5><p>存入 Integer 类型数据 (底层利用的是内部比较器)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="number">1</span>);</span><br><span class="line">        ts.add(<span class="number">11</span>);</span><br><span class="line">        ts.add(<span class="number">11</span>);</span><br><span class="line">        ts.add(<span class="number">1111</span>);</span><br><span class="line">        ts.add(<span class="number">111</span>);</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的案例可以看出</p>
<p>特点 : 唯一 , 无序(没有按照输入顺序进行输出)，有序(按照升序进行遍历)</p>
<p>**原理 : ** 底层 : 二叉树 (数据结构中的一个逻辑结构)</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205083225391.png" alt="image-20221205083225391" style="zoom:200%;">

<p>放入 String 类型数据 : (实现内部比较器)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="string">&quot;blili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;clili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;alili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;dlili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;glili&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;alili&quot;</span>);</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>放入自定义类型  Student 数据类型: </p>
<p><strong>内部比较器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, student.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());  <span class="comment">// 比较年龄</span></span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>外部比较器</strong></p>
<ul>
<li><p>自定义类不实现Comparable 接口</p>
</li>
<li><p>新建 Compare 比较类实现 Comparator 接口并重写 Compare 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 比较年龄</span></span><br><span class="line"><span class="comment">//        return o1.getAge() - o2.getAge();</span></span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>利用外部比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 利用外部比较器 , 自己制定</span></span><br><span class="line">        Comparator&lt;Student&gt; compare = <span class="keyword">new</span> <span class="title class_">Compare</span>();</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(compare); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>外部比较强另一种写法</strong></p>
<p>接口是不能创建对象的, 可以匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 利用外部比较器 , 自己制定</span></span><br><span class="line">        Comparator&lt;Student&gt; compare = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(compare); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">// 一旦指定外部比较器，那么就会按照外部比较器来比较</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木最棒&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>));</span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205085817823.png" alt="image-20221205085817823" style="zoom:200%;">



<p><strong>TreeSet 底层的二叉树的遍历方式</strong></p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221205090135573.png" alt="image-20221205090135573" style="zoom:200%;">



<h4 id="八-Map-接口"><a href="#八-Map-接口" class="headerlink" title="八 Map 接口"></a>八 Map 接口</h4><p><strong>参数类型 :</strong> k - 映射的建类型 (key)</p>
<p>​                  v - 映射的值类型 (value)</p>
<h5 id="8-1-Map-接口中常用方法"><a href="#8-1-Map-接口中常用方法" class="headerlink" title="8.1 Map 接口中常用方法"></a>8.1 Map 接口中常用方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            增加: put(K key, V value)</span></span><br><span class="line"><span class="comment">            删除: clear() remove(Object key)</span></span><br><span class="line"><span class="comment">            修改:</span></span><br><span class="line"><span class="comment">            查看: entrySet() get(Object key) keySet() size() values()</span></span><br><span class="line"><span class="comment">            判断: containsKey(object key) containsValue(Object value)</span></span><br><span class="line"><span class="comment">            equals(Object o) isEmpty()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">       Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">10101010</span>);</span><br><span class="line">       map.put(<span class="string">&quot;lili&quot;</span>,<span class="number">11112330</span>);</span><br><span class="line">       map.put(<span class="string">&quot;nana&quot;</span>,<span class="number">34566233</span>);</span><br><span class="line">       map.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">12345678</span>);</span><br><span class="line">       map.put(<span class="string">&quot;feifei&quot;</span>,<span class="number">55601010</span>);</span><br><span class="line"><span class="comment">//       map.clear(); // 清空</span></span><br><span class="line"><span class="comment">//        map.remove(&quot;lulu&quot;); // 移除</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        是否包含</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">&quot;lili&quot;</span>));</span><br><span class="line">        System.out.println(map.containsValue(<span class="number">12345678</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Integer&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">10101010</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;lili&quot;</span>,<span class="number">11112330</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;nana&quot;</span>,<span class="number">34566233</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;lulu&quot;</span>,<span class="number">12345678</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;feifei&quot;</span>,<span class="number">55601010</span>);</span><br><span class="line">        System.out.println(map == map2);</span><br><span class="line">        System.out.println(map.equals(map2)); <span class="comment">//eauals讲行了重写，比较的是集合中的值是否一致</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line"></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;lili&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点 :</strong> 无序 , 唯一 ,  按照 key 进行总结 , 底层 key 遵照 哈希表的结构 (数组 + 链表), 哈希表原理必须重写 hashCode 方法 和 equals 方法。</p>
<p><strong>常用方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// keySet()对集合中的key进行遍历查看:</span></span><br><span class="line">Set&lt;String&gt; set = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String s : set)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// values()对集合中的value进行遍历查看:</span></span><br><span class="line">Collection&lt;Integer&gt; values = map.values();</span><br><span class="line"><span class="keyword">for</span> (Integer i : values)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// get(Object key) keySet()</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span> (String s : keySet)&#123;</span><br><span class="line">    System.out.println(map.get(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// entrySet()</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : entries)&#123;</span><br><span class="line">    System.out.println(e.getKey() + <span class="string">&quot;-----------&quot;</span> + e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-2-HashTable-LinkedHashMap"><a href="#8-2-HashTable-LinkedHashMap" class="headerlink" title="8.2 HashTable , LinkedHashMap"></a>8.2 HashTable , LinkedHashMap</h5><p><strong>HashTable 实现类</strong> 与 <strong>HashMap 实现类</strong> 的区别 :</p>
<p>HashMap JDK 1.2 效率高 线程不安全 key可以存入null 值 , 并且key的null值也遵循唯一的特点<br>HashTable JDK1.0 效率低 线程安全 key不可以存入null值</p>
<p><strong>LinkedHashMap 实现类</strong></p>
<p>特点 : 唯一 , 有序 (按照输入顺序进行输出)</p>
<h5 id="8-3-TreeMap-实现类的使用"><a href="#8-3-TreeMap-实现类的使用" class="headerlink" title="8.3 TreeMap 实现类的使用"></a>8.3 TreeMap 实现类的使用</h5><p>**特点 : **唯一 , 有序</p>
<ol>
<li><p>key 的类型为 String 类型:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;blili&quot;</span>,<span class="number">1212222</span>);</span><br><span class="line">        map.put(<span class="string">&quot;alili&quot;</span>,<span class="number">22124422</span>);</span><br><span class="line">        map.put(<span class="string">&quot;elili&quot;</span>,<span class="number">02112232</span>);</span><br><span class="line">        map.put(<span class="string">&quot;clili&quot;</span>,<span class="number">4212222</span>);</span><br><span class="line">        map.put(<span class="string">&quot;dlili&quot;</span>,<span class="number">3212222</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>key 的类型是一个自定义的引用数据类型</p>
<ul>
<li><p>内部比较器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line"><span class="comment">//        return this.getAge() - o.getAge();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Student, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1003</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>),<span class="number">1013</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1103</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>),<span class="number">1223</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>外部比较器</p>
<p>自定义数据类型不实现 Comparable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeMap&lt;Student, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1003</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木最棒&quot;</span>),<span class="number">1013</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;王木木&quot;</span>),<span class="number">1103</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">16</span>,<span class="string">&quot;王木木厉害aa&quot;</span>),<span class="number">1223</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">17</span>,<span class="string">&quot;康康&quot;</span>),<span class="number">1333</span>);</span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="8-4-HashMap-重要属性"><a href="#8-4-HashMap-重要属性" class="headerlink" title="8.4 HashMap  重要属性"></a>8.4 HashMap  重要属性</h5><table>
<thead>
<tr>
<th align="center">HashMap简要原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221206043533536.png" alt="image-20221206043533536" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>**JDK 1.7 **</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. HashMap的K, V的值,在创建对象的时候确定: K: Integer V:String </span></span><br><span class="line"><span class="comment">//HashMap的父类AbstractMap已经实现类Map接口,但是源码中又单独实现了Map接口</span></span><br><span class="line"><span class="comment">//这个操作就是一一个多余的操作--&gt; 集合的创作者承认 了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">	<span class="keyword">extends</span> <span class="title class_">Abs</span> tractMap&lt;K,V&gt;</span><br><span class="line">	<span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable&#123;</span><br><span class="line">	<span class="comment">//重要属性:</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> DEFAULT_ <span class="type">INITIAL</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">//定 义了一个16,-会要赋给数组的长度</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="type">MAXIMUM_</span> <span class="variable">CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">//定 义了一个很大很大的数</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> DEFAULT <span class="type">LOAD</span> <span class="variable">FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">//定义了一个值:0.75负载因子，加载因子</span></span><br><span class="line">	<span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;<span class="comment">//底层 主数组</span></span><br><span class="line">	<span class="keyword">transient</span> <span class="type">int</span> size; <span class="comment">//添加的元素的数量</span></span><br><span class="line">	<span class="type">int</span> threshold; <span class="comment">//定 义个变量，没赋值默认为0 ,--&gt;这 个变量是用来表示数组扩容的边界值，门槛值</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">float</span> loadFactor; <span class="comment">//这 个变量用来接收:装填因子，负载因子，加载因子</span></span><br><span class="line">    <span class="comment">// 空构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// this (16,0.75)</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带参数构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">       <span class="comment">// capacity一-定最终的结果是一.个2的整数倍 (2^n) ?????</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">			capacity &lt;&lt;= <span class="number">1</span> ;</span><br><span class="line">		<span class="comment">//确定了装填因子,负载因子,加载因子: 0.75</span></span><br><span class="line">		<span class="built_in">this</span>. loadFactor = loadFactor ;</span><br><span class="line">		<span class="comment">//threshold= capacity * loadFactor = 16*0.75=12</span></span><br><span class="line">		<span class="comment">//threshold=12 ---&gt; 数组扩容的边界值</span></span><br><span class="line">		threshold = (<span class="type">int</span>) Math. min (capacity * loadFactor, MAXIMUM_ CAPACITY + <span class="number">1</span>) ;</span><br><span class="line">		<span class="comment">//创建主数组,主数组的长度定义为16</span></span><br><span class="line">		table = <span class="keyword">new</span> <span class="title class_">Entry</span> [capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//存储数据的方法:</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;<span class="comment">//k: Integer V:String </span></span><br><span class="line">    <span class="comment">//对空进行判断--&gt;允许key的值为null</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> put <span class="title function_">ForNullKey</span> <span class="params">(value)</span> ;</span><br><span class="line">    <span class="comment">//获取哈希码!</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash (key) ;</span><br><span class="line">    <span class="comment">// 得到元素在数组中的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor (hash, table. length) ;</span><br><span class="line">    <span class="comment">//如果放 入的数组的位置. 上没有元素的话,那么直接添加就行了,不用走这个for循环</span></span><br><span class="line">    <span class="comment">//e != null满足的话,就证明这个位置上已经有东西了</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">   		 Object k;</span><br><span class="line">        <span class="comment">//发生哈西碰撞的时候，会先比较哈希值</span></span><br><span class="line">        <span class="comment">//比较key是否是一个对象,如果key是--个对象的话,equals就不比较了</span></span><br><span class="line">        <span class="comment">//如果不是同一个对象,会比较equals方法</span></span><br><span class="line">        <span class="comment">//如果hash值一样, equals方法比较的结果也一样,那么才会走这个if方法:</span></span><br><span class="line">    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key <span class="number">1</span> key.equals(k))) &#123;</span><br><span class="line">        <span class="comment">// 获取老的 Value</span></span><br><span class="line">   		 <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e. value ;</span><br><span class="line">        e.value = value ; <span class="comment">// 新value 替换老 Value --&gt; 只替换Value 不替换 key</span></span><br><span class="line">        e.recordAccess (<span class="built_in">this</span>) ;</span><br><span class="line">   		 <span class="keyword">return</span> oldValue ; <span class="comment">// 将oldValue 返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash,key,value,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//添加元素的方法:</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value，<span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">	<span class="comment">//如果size&gt;=threshold这个变量不满足,这个if不走</span></span><br><span class="line">	<span class="keyword">if</span> ( (size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table [bucketIndex]) ) &#123;</span><br><span class="line">	resize(<span class="number">2</span> * table. length) ; <span class="comment">// 数组扩容</span></span><br><span class="line">	hash = (nu1l != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">	bucketIndex = indexFor (hash, table.length);</span><br><span class="line">    <span class="comment">//走这里创建一个Entry对象:</span></span><br><span class="line">	createEntry (hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//将下标位置上的元素给e</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table [bucketIndex] ;</span><br><span class="line">    <span class="comment">//封装对象,将这个对象给table [bucketIndex] --- &gt;链表的头插法</span></span><br><span class="line">    table [bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt; (hash, key, value, e) ;</span><br><span class="line">        <span class="comment">// 元素数量加1</span></span><br><span class="line">    size++ ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-5-HashSet-底层原理"><a href="#8-5-HashSet-底层原理" class="headerlink" title="8.5 HashSet 底层原理"></a>8.5 HashSet 底层原理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//重要属性:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() ;</span><br><span class="line">    / /构造器:</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span> <span class="params">()</span> &#123;</span><br><span class="line">    	map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;() ;<span class="comment">//HashSet底层就是利用HashMap来完成的</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT) ==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-6-HashMap-1-8-底层原理"><a href="#8-6-HashMap-1-8-底层原理" class="headerlink" title="8.6 HashMap 1.8 底层原理"></a>8.6 HashMap 1.8 底层原理</h5><p>底层 : 数组 + 链表 (红黑树)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123; <span class="comment">// 1. 实现了两个 Map 接口, 重复</span></span><br><span class="line">    <span class="comment">// 3. 属性部分</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line">    <span class="type">int</span> threshold;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt; [] table; <span class="comment">// 底层数组</span></span><br><span class="line">    <span class="comment">// 2.调用空构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.调用有参构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 跳转到HashMap 中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="comment">// 6. 健壮性处理</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +loadFactor);</span><br><span class="line">        <span class="comment">// 7. loadFactory = 0.75</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">// 8. 调用 tableSizeFor 方法, 传入参数</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 9.tableSizeFor -- &gt;确定主数组的长度 --&gt; 返回的是最接近参数的2 的次幂</span></span><br><span class="line">    <span class="comment">// 10--&gt; 16 3 --&gt; 4 6 -&gt; 8</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10. 调用 put 方法</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123; <span class="comment">// 传入键值对</span></span><br><span class="line">        <span class="comment">// 11. 调用 hash 方法</span></span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 12. hash 方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123; <span class="comment">// 返回值哈希码</span></span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 13. putVal 方法</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="comment">// 14. if 走</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 15. 走入 resize() 方法</span></span><br><span class="line">            n = (tab = resize()).length;<span class="number">4</span></span><br><span class="line">            <span class="comment">// 经过一个公式: (n-1)&amp;hash]算出键值对在主数组中的位置:i</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>); <span class="comment">// 封装一个节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 哈希碰撞</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 赋值给 e</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue; <span class="comment">// 替换的值返回</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-7-TreeMap-底层源码"><a href="#8-7-TreeMap-底层源码" class="headerlink" title="8.7 TreeMap 底层源码"></a>8.7 TreeMap 底层源码</h5><ol>
<li><p>原理大致介绍</p>
<img src="/2022/12/28/Java-%E9%9B%86%E5%90%88/image-20221206075246580.png" alt="image-20221206075246580" style="zoom:200%;"></li>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="comment">// 重要属性</span></span><br><span class="line">    <span class="comment">//外部比较器:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line">    <span class="comment">//树的根节点:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root = <span class="literal">null</span> ;</span><br><span class="line">    <span class="comment">//集合中元素的数量:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> size= <span class="number">0</span> ;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//空构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">    comparator = <span class="literal">null</span>;<span class="comment">//如果使用空构造器，那么底层就不使用外部比较器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span> <span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>. comparator = comparator;<span class="comment">//如果 使用有参构造器，那么就相当于指定了外部比较器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">     <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123; <span class="comment">//k,V的类型在创建对象的时候确定了</span></span><br><span class="line">         <span class="comment">//如果放入的是第一-对元素，那么t的值为null</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">         <span class="comment">//如果放入的是第一一个元素的话，走入这个if中:</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 自己跟自己比</span></span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line">			<span class="comment">// 根节点确定为 root</span></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// size值变为 1</span></span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">         <span class="comment">// 将外部比较器赋给 cpr :</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">         <span class="comment">//cpr不等于null,意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);<span class="comment">// 将元素的key 值作比较</span></span><br><span class="line">                <span class="comment">// cmp返回的值就是 int 类型的数据</span></span><br><span class="line">                <span class="comment">// 要是这个值 &lt;0 =0 &gt;0</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span> <span class="comment">// cmp == 0</span></span><br><span class="line">                    <span class="comment">//如果key的值一样，那么新的value替换老的value但是key不变 因为key是唯一的</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//cpr等于null,意味着你刚才创建对象的时候调用了空构造器，指定了内部比较器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="8-8-TreeSet-源码"><a href="#8-8-TreeSet-源码" class="headerlink" title="8.8 TreeSet 源码"></a>8.8 TreeSet 源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重要属性:</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,0bject&gt; m;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>() ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用空构造器 , 底层创建了一个 TreeMap</span></span><br><span class="line"> 	<span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TreeSet (NavigableMap&lt;E ,0bject&gt; m)&#123;</span><br><span class="line">    	<span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> m.put (e，PRESENT)= = =nul1 ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="九-Conllections-工具类"><a href="#九-Conllections-工具类" class="headerlink" title="九 Conllections 工具类"></a>九 Conllections 工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Collections 不支持创建对象，因为构造器私有化了</span></span><br><span class="line">        <span class="comment">// 里面的属性和方法都是被stotic修饰，我们可以直接用类名.去调用即可:</span></span><br><span class="line">        <span class="comment">// 常用方法:</span></span><br><span class="line">        <span class="comment">// addAll</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        Collections.addAll(list,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// binarySearch 必须在有序的集合中查找: --》排序:</span></span><br><span class="line">        Collections.sort(list); <span class="comment">// sort 提供的是升序排序</span></span><br><span class="line">        <span class="comment">// binarySearch</span></span><br><span class="line">        System.out.println(Collections.binarySearch(list, <span class="string">&quot;f&quot;</span>));</span><br><span class="line">        <span class="comment">// copy :</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;tt&quot;</span>,<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">        Collections.copy(list,list1); <span class="comment">// 将 list 1 的内容替换到list上去</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill 填充</span></span><br><span class="line">        Collections.fill(list1,<span class="string">&quot;yyy&quot;</span>);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/2022/12/25/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>Spring , SpringMVC, MyBatis 整合的基本配置</p>
<span id="more"></span>

<p>整合SSM ,其实只需创建 Mybatis 的 Bean</p>
<h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这个是连接 Spring 和 Mybatis 的桥梁--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>db.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">db.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.url</span>=<span class="string">jdbc:mysql://127.0.0.1/test01?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">db.initialSize</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">db.maxActive</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">db.minIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>



<h4 id="2-SSM-的配置"><a href="#2-SSM-的配置" class="headerlink" title="2. SSM 的配置"></a>2. SSM 的配置</h4><ol>
<li><p>spring 的 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    开始配置 MyBatis</span></span><br><span class="line"><span class="comment">        1. 配置 SqlSessionFactory</span></span><br><span class="line"><span class="comment">        2. 配置包扫描 （扫描Mapper接口）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置 SqlSessionFactoryBean 的最终目的 ， 是为了获取SqlSessionFactory 的实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        给指定包下的类取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.model&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper.xml 文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                classpath*:com/smart/shiro/mapper/*.xml</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper 接口的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springmvc 的 spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>servlet 的 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h4><ol>
<li><p>model 包 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper 接口 和 xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.smart.shiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>service 层 UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/u&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>基本配置大功告成! 启动服务, 游览器输入 <em><a href>localhost:8080/s/u</a></em> 就可以看到效果了。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/12/20/MySQL/</url>
    <content><![CDATA[<img src="/2022/12/20/MySQL/MySQL.png" alt="MySQL">

<span id="more"></span>

<h4 id="一-MySQL8-安装"><a href="#一-MySQL8-安装" class="headerlink" title="一 MySQL8 安装"></a>一 MySQL8 安装</h4><p>近期主要历史版本有5.0/5.1/5.5/5.6/5.7，目前最新版本是MySQL8。</p>
<h5 id="1-1-下载压缩包"><a href="#1-1-下载压缩包" class="headerlink" title="1.1 下载压缩包"></a>1.1 下载压缩包</h5><ul>
<li><p>官网下载压缩包，<code>https://dev.mysql.com/downloads/mysql/</code>,如果需要可执行安装，亦可转到下载：<code>https://dev.mysql.com/downloads/windows/installer/8.0.html</code></p>
<table>
<thead>
<tr>
<th align="center">下载地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/20/MySQL/%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80.png"></td>
</tr>
<tr>
<td align="center"><strong>下载步骤</strong></td>
</tr>
<tr>
<td align="center"><img src="/2022/12/20/MySQL/image-20221108183510267.png"></td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="1-2-解压与配置"><a href="#1-2-解压与配置" class="headerlink" title="1.2 解压与配置"></a>1.2 解压与配置</h5><ol>
<li><p>解压到相应的目录</p>
<p>如个人目录为 : <code>D:\mysql-8.0.31-winx64</code></p>
</li>
<li><p>环境配置</p>
<p>在安装根目录下新建一个配置文件<code>MySql.ini</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line"><span class="keyword">default</span><span class="operator">-</span><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">=</span>utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置<span class="number">3306</span>端口</span><br><span class="line">port <span class="operator">=</span> <span class="number">3306</span></span><br><span class="line"> </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir<span class="operator">=</span>&quot;D:\mysql-8.0.31-winx64&quot;</span><br><span class="line"> </span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir<span class="operator">=</span>&quot;D:\mysql-8.0.31-winx64\data&quot;</span><br><span class="line"> </span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections<span class="operator">=</span><span class="number">20</span>  </span><br><span class="line"> </span><br><span class="line"># 服务端使用的字符集默认为<span class="number">8</span>比特编码的latin1字符集</span><br><span class="line"><span class="type">character</span><span class="operator">-</span><span class="keyword">set</span><span class="operator">-</span>server<span class="operator">=</span>utf8</span><br><span class="line"> </span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line"><span class="keyword">default</span><span class="operator">-</span>storage<span class="operator">-</span>engine<span class="operator">=</span>INNODB</span><br></pre></td></tr></table></figure></li>
<li><p>设置系统环境变量</p>
<p> 将MySql的<code>bin</code>目录加到系统环境变量**<code>path</code>**</p>
</li>
</ol>
<h5 id="1-3-初始化"><a href="#1-3-初始化" class="headerlink" title="1.3 初始化"></a>1.3 初始化</h5><ul>
<li><p>空密码生成</p>
<p>在cmd窗口中执行：<code>mysqld --initialize-insecure --console</code>，<strong>注意：</strong>缺少参数<code>-insecure</code>会生成随即密码。 如果缺少必要的VC库，进行安装即可。</p>
</li>
<li><p>注册安装 MySQL</p>
<p>继续在cmd窗口中执行 <code>mysqld install mysql</code></p>
<p>​    其他与之相关的操作:</p>
<p>​        <strong>卸载mysql服务(需要管理员权限)</strong></p>
<p>​            sc delete mysql </p>
<p>​        <strong>移除mysql服务(需要停止mysql)</strong></p>
<p>​            mysql -remove</p>
<p>​    最后在cmd窗口中能看到 Service successfully installed.  就表示初始化成功</p>
</li>
</ul>
<h5 id="1-4-使用-MySQL"><a href="#1-4-使用-MySQL" class="headerlink" title="1.4 使用 MySQL"></a>1.4 使用 MySQL</h5><ul>
<li><p>启动 MySQL</p>
<p><code>net start mysql</code> ,如需关闭MySql，则执行 <code>net stop mysql</code></p>
</li>
<li><p>登录 MySQL</p>
<p><code>mysql -uroot</code></p>
</li>
<li><p>密码设置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 切换数据库</span><br><span class="line">   use mysql</span><br><span class="line"> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 修改root用户的密码为,根据需要自己来设置</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span><span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>刷新权限,一般修改密码或授权用户的时候需要使用</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="1-5-退出-MySQL"><a href="#1-5-退出-MySQL" class="headerlink" title="1.5 退出 MySQL"></a>1.5 退出 MySQL</h5><p><code>quit</code> 或者 <code>exit</code> 均可</p>
<h5 id="1-6-修改加密规则"><a href="#1-6-修改加密规则" class="headerlink" title="1.6 修改加密规则"></a>1.6 修改加密规则</h5><p>MySQL8 以前的加密规则与 MySQL8 以后的存在差异</p>
<p> mysql服务启动后,输入命令**:**mysql -uroot -p****进入服务后 , 输入以下命令配置 :</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER; #修改加密规则</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;  # 更新一下用户的密码 <span class="comment">--&gt;&#x27;password&#x27;根据需要设置密码</span></span><br><span class="line"> </span><br><span class="line">FLUSH PRIVILEGES; #刷新权限</span><br></pre></td></tr></table></figure>

<p>成功后在 SQLyog中 输入修改后的密码即可登录啦</p>
<h4 id="二-基本操作"><a href="#二-基本操作" class="headerlink" title="二 基本操作"></a>二 基本操作</h4><p><strong>SQL 语言分为五部分 :</strong></p>
<p>●数据查询语言(Data Query Language, DQL) : DQL主要用于数据的查询，其基本结构是使用SELECT子句，FROM子句和WHERE子句</p>
<p>的组合来查询一条或多条数据。</p>
<ul>
<li>数据操作语言(Data Manipulation Language, DML) : DML主要用于对数据库中的数据进行增加、修改和删除的操作，其主要包括:</li>
</ul>
<p>​        INSERT:增加数据</p>
<p>​        UPDATE:修改数据</p>
<p>​        DELETE:删除数据</p>
<ul>
<li>数据定义语言(Data Definition Language, DDL) : DDL主要用针对是数据库对象(数据库、表、索引、视图、触发器、存储过程、函数)进行创建、修改和删除操作。其主要包括:</li>
</ul>
<p>​        CREATE:创建数据库对象</p>
<p>​        ALTER:修改数据库对象</p>
<p>​        DROP:删除数据库对象</p>
<ul>
<li><p>数据控制语言(Data Control Language, DCL) : DCL用来授予或回收访问数据库的权限，其主要包括:</p>
<ol>
<li>GRANT:授予用户某种权限</li>
<li>REVOKE:回收授予的某种权限</li>
</ol>
</li>
<li><p>事务控制语言(Transaction Control Language, TCL) : TCL用于数据库的事务管理。其主要包括:</p>
<ol>
<li>START TRANSACTION:开启事务</li>
</ol>
<ol start="2">
<li><p>COMMIT:提交事务</p>
</li>
<li><p>ROLLBACK:回滚事务</p>
</li>
<li><p>SET TRANSACTION:设置事务的属性</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 查看数据库</span></span><br><span class="line">use 数据库名字; <span class="comment">-- 使用数据库</span></span><br><span class="line"><span class="keyword">show</span> tables; <span class="comment">-- 查看数据库表</span></span><br></pre></td></tr></table></figure>



<h5 id="2-1-创建数据库表"><a href="#2-1-创建数据库表" class="headerlink" title="2.1 创建数据库表"></a>2.1 创建数据库表</h5><p><strong>表(Table)</strong> 是数据库中数据存储最常见和最简单的一-种形式，数据库可以将复杂的数据结构用较为简单的二维表来表示。=维表是由行和列组成的，分别都包含着数据，如表所示。</p>
<img src="/2022/12/20/MySQL/image-20221108192134838.png" alt="image-20221108192134838" style="zoom:200%;">

<p>每个表都是由若干行和列组成的，在数据库中表中的行被称为记录，表中的列被称为是这些记录的字段。<br>记录也被称为一行数据，是表里的一行。 在关系型数据库的表里, - -行数据是指一条完整的记录。<br>字段是表里的一列，用于保存每条记录的特定信息。如上表所示的学生信息表中的字段包括”学号”、”姓名”、 “性别”和 “年龄”。数据表的一列包含了某个特定字段的全部信息。</p>
<p><strong>创建数据库表 t_student</strong></p>
<ul>
<li>建立- -张用来存储学生信息的表</li>
<li>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息</li>
<li>学号是主键=不能为空+唯一</li>
<li>姓名不能为空</li>
<li>性别默认值是男</li>
<li>Email唯一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">## 单行注释</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 创建数据库表 :</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>), <span class="comment">-- 6 显示长度</span></span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">10</span>), <span class="comment">-- 10 个字符</span></span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构 : 展示表的字段详细信息</span></span><br><span class="line"><span class="keyword">DESC</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表中数据 :</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看建表语句 :</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE `t_student` (</span></span><br><span class="line"><span class="comment">  `sno` INT DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `sname` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `sex` CHAR(1) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `age` INT DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `enterdate` DATE DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `classname` VARCHAR(10) DEFAULT NULL,</span></span><br><span class="line"><span class="comment">  `email` VARCHAR(15) DEFAULT NULL</span></span><br><span class="line"><span class="comment">) ENGINE=INNODB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h5 id="2-2-数据库表列类型"><a href="#2-2-数据库表列类型" class="headerlink" title="2.2 数据库表列类型"></a>2.2 数据库表列类型</h5><ol>
<li><p>整数类型</p>
<img src="/2022/12/20/MySQL/image-20221108194251903.png" alt="image-20221108194251903" style="zoom:200%;"></li>
</ol>
<p>​    MySQL支持选择在该类型关键字后面的括号内指定整数值的显示宽度(例如，INT(4))。 显示宽度并不限制可以在列内保存的值的范围，也不限制超过列的指定宽度的值的显示主键自增:不使用序列，通过 <code>auto_ increment</code>,要求是整数类型</p>
<ol start="2">
<li> 浮点数类型</li>
</ol>
<p>​    <img src="/2022/12/20/MySQL/image-20221108194538050.png" alt="image-20221108194538050" style="zoom:150%;"></p>
<ol start="3">
<li>字符串类型</li>
</ol>
<p>​    需要注意的是与整数类型不一样的是，浮点数类型的宽度不会自动扩充。score double(4,1)</p>
<p>score double(4,1)–小数部分为1位，总宽度4位,并且不会自动扩充。</p>
<img src="/2022/12/20/MySQL/image-20221108194832940.png" alt="image-20221108194832940" style="zoom:200%;">

<p>CHAR和VARCHAR类型相似，均用于存于较短的字符串,主要的不同之处在于存储方式。CHAR类型长度固定，VARCHAR类型的长度可变。<br>因为VARCHAR类型能够根据字符串的实际长度来动态改变所占字节的大小，所以在不能明确该字段具体需要多少字符时推荐使用VARCHAR类型，这样可以大大地节约磁盘空间、提高存储效率。<br>CHAR和VARCHAR表示的是字符的个数，而不是字节的个数</p>
<ol start="4">
<li><p>日期和时间类型</p>
<img src="/2022/12/20/MySQL/image-20221108195006302.png" alt="image-20221108195006302" style="zoom:200%;"></li>
</ol>
<h5 id="2-3-添加数据"><a href="#2-3-添加数据" class="headerlink" title="2.3 添加数据"></a>2.3 添加数据</h5><blockquote>
<ol>
<li><p>int宽度是显示宽度,如果超过,可以自动增大宽度int底层都是4个字节</p>
</li>
<li><p>时间的方式多样’1256-12-23’ “1256/12/23” “1256.12.23”</p>
</li>
<li><p>字符串不区分单引号和双引号</p>
</li>
<li><p>如何写入当前的时间now() , sysdate() , CURRENT_ DATE()</p>
</li>
<li><p>char varchar是字符的个数,不是字节的个数，可以使用binary, varbinany表示定长和不定长的字节个数。</p>
</li>
<li><p>如果不是全字段插入数据的话, 需要加入字段的名字。</p>
</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在t_student 数据库表中插入数据:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,&quot;2022-5-16&quot;,<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">10086</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,&quot;2022.5.26&quot;,<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">55</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,NOW(),<span class="string">&#x27;物联网工程&#x27;</span>,&quot;1203@126.com&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student (sno,sname,enterdate) <span class="keyword">VALUES</span> (<span class="number">1006</span>,<span class="string">&#x27;赵六&#x27;</span>,&quot;2023.3.15&quot;);</span><br></pre></td></tr></table></figure>



<h5 id="2-4-修改-删除数据"><a href="#2-4-修改-删除数据" class="headerlink" title="2.4  修改 , 删除数据"></a>2.4  修改 , 删除数据</h5><ol>
<li>关键字，表名，字段名不区分大小写</li>
<li>默认情况下，内容不区分大小写</li>
<li>删除操作from关键字不可缺少</li>
<li>修改， 删除数据别忘记加限制条件</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表中数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span><span class="number">55</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">21</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除操作</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>



<h5 id="2-5-修改-删除数据库表"><a href="#2-5-修改-删除数据库表" class="headerlink" title="2.5 修改 , 删除数据库表"></a>2.5 修改 , 删除数据库表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据 :</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的结构:</span></span><br><span class="line"><span class="comment">-- 增加一列 :</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>); <span class="comment">-- 5 : 总位数  2 : 小数位</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> score <span class="operator">=</span> <span class="number">123.5678</span> <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一列 (放在最前面)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加一列 (放在sex列的后面)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> score <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>) AFTER sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改一列:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student MODIFY score <span class="type">FLOAT</span>(<span class="number">4</span>,<span class="number">1</span>); <span class="comment">-- modify修改是列的类型的定义,但是不会改变列的名字</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student CHANGE score score1 <span class="keyword">DOUBLE</span> (<span class="number">5</span>,<span class="number">1</span>); <span class="comment">-- change 修改列名和列的类型的定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_student;</span><br></pre></td></tr></table></figure>



<h5 id="2-6-非外键约束"><a href="#2-6-非外键约束" class="headerlink" title="2.6 非外键约束"></a>2.6 非外键约束</h5><p>为防止不符合规范的数据存入数据库，在用户对数据进行插入、修改、删除等操作时，MySQL提供了一-种机制来检查数据库中的数据是否满足规定的条件，以保证数据库中数据的准确性和一致性，这种机制就是完整性约束。<br>MySQL中主要支持以下几种种完整性约束，如表所示。其中Check约束是MySQL8中提供的支持。</p>
<img src="/2022/12/20/MySQL/image-20221109111005143.png" alt="image-20221109111005143" style="zoom:150%;">

<blockquote>
<p>建立一张用来存储学生信息的表<br>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信息<br>约束:<br>建立一张用来存储学生信息的表<br>字段包含学号、姓名、性别，年龄、入学日期、班级，email等信 息</p>
<ol>
<li>学号是主键=不能为空+唯一，</li>
<li>如果主键是整数类型，那么需要自增</li>
<li>姓名不能为空</li>
<li>Email唯一</li>
<li>性别默认值是男</li>
<li>性别只能是男女</li>
<li>年龄只能在18-50之间</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">CHECK</span>(sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>) <span class="keyword">CHECK</span>(age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">AND</span> age<span class="operator">&lt;=</span><span class="number">50</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1048 - Column sname’cannot be null 不能为null</span></span><br><span class="line"><span class="comment">-- 3819 Check constraint&#x27;t_student_chk_l&#x27; is violated. 违反检查约束</span></span><br><span class="line"><span class="comment">-- 1062 - Duplicate entry &#x27;1&#x27; for key &#x27;t_ student . PRIMARY&#x27;主键重复</span></span><br><span class="line"><span class="comment">-- 1062 Duplicate entry &#x27;ls@126. com&#x27; for key &#x27;t_ student.email&#x27;违反唯一约束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果主键没有设定值，或者用null, default都可以完成主键自增的效果</span></span><br><span class="line"><span class="comment">-- 如果sql报错，可能主键就浪费了，后续插入的主键是不连号的，我们主键也不要求连号的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">default</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>约束从作用上可以分为两类:</p>
<ul>
<li>表级约束: 可以约束表中任意一个或多个字段。与列定义相互独立，不包含在列定义中;与定义用’, ‘分隔;必须指出要约束的列的名称;</li>
<li>列级约束: 包含在列定义中,直接跟在该列的其它定义之后，用空格分隔;不必指定列名; </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>),</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">	age <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> pk_stu <span class="keyword">PRIMARY</span> KEY (sno), <span class="comment">-- pk_stu 主键约束的名字</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> ck_stu_sex <span class="keyword">CHECK</span> (sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> ck_stu_age <span class="keyword">CHECK</span> (age <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">50</span>),</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> uq_stu_email <span class="keyword">UNIQUE</span> (email)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086A@126.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2023.3.6&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;10086@qq.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br></pre></td></tr></table></figure>



<p><strong>在创建表以后添加约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">	age <span class="type">INT</span>,</span><br><span class="line">	enterdate <span class="type">DATE</span>,</span><br><span class="line">	classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在创建表以后添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_stu <span class="keyword">PRIMARY</span> KEY (sno); <span class="comment">-- 主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student MODIFY sno <span class="type">INT</span>(<span class="number">6</span>) AUTO_INCREMENT; <span class="comment">-- 修改自增条件</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ck_stu_sex <span class="keyword">CHECK</span> (sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="operator">||</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ck_stu_age <span class="keyword">CHECK</span> (age <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">50</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uq_stu_email <span class="keyword">UNIQUE</span> (email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的结构</span></span><br><span class="line"><span class="keyword">DESC</span> t_student;</span><br></pre></td></tr></table></figure>



<h5 id="2-7-外键约束"><a href="#2-7-外键约束" class="headerlink" title="2.7 外键约束"></a>2.7 外键约束</h5><ul>
<li>什么是外键约束?</li>
</ul>
<p>​    外键约束(FOREIGN KEY,缩写FK)是用来实现数据库表的参照完整性    的。外键约束可以使两张表紧密的结合起来，特别是针对修改或者删    除的级联操作时，会保证数据的完整性。</p>
<ul>
<li>外键是指表中某个字段的值依赖于另- -张表中某个字段的值，而被依赖的字段必须具有主键约束或者唯- -约束。被依赖的表我们通常称之为父表或者主表,设置外键约束的表称为子表或者从表。</li>
<li>举个例子:如果想要表示学生和班级的关系,首先要有学生表和班级表两张表，然后学生表中有个字段为stu_ clazz (该字段表示学生所在的班级)，而该字段的取值范围由班级表中的主键cla_ no字段(该字段表示班级编号)的取值决定。那么班级表为主表，学生表为从表，且stu_ <em>clazz字段是学生表的外键。通过stu</em> clazz字段就建立了学生表和班级表的关系。</li>
</ul>
<img src="/2022/12/20/MySQL/image-20221109171143965.png" alt="image-20221109171143965" style="zoom:200%;">

<p>主表(父表) : 班级表 - 班级编号 - 主键<br>从表(子表) : 学生表 - 班级编号 - 外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先创建父表 : 班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_class(</span><br><span class="line">	cno <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	cname <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	room <span class="type">CHAR</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加班级数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java001&#x27;</span>,<span class="string">&#x27;r803&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java002&#x27;</span>,<span class="string">&#x27;r403&#x27;</span>`t_student`);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;r103&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以一次性添加多条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_class <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;java001&#x27;</span>,<span class="string">&#x27;r803&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;java002&#x27;</span>,<span class="string">&#x27;r403&#x27;</span>`t_student`),(<span class="keyword">NULL</span>,<span class="string">&#x27;大数据&#x27;</span>,<span class="string">&#x27;r103&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询班级表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建子表 外键约束只有表级约束,没有列级约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	classno <span class="type">INT</span>(<span class="number">4</span>), <span class="comment">-- 取值参考t_class 表中的cno 字段,不要求字段名字完全重复,但是类型长度定义 尽量要求相同</span></span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span>  KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student(</span><br><span class="line">	sno <span class="type">INT</span>(<span class="number">6</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	sname <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	classno <span class="type">INT</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 在创建表以后添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加学生信息</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除班级1</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 先删除主表 , 再删除从表。</span></span><br></pre></td></tr></table></figure>



<p><strong>外键策略</strong></p>
<p>删除班级1 : 如果直接删除的话肯定不行因为有外键约束:</p>
<p>加入外键策略:</p>
<p>**策略 1 : no action ** 不允许操作</p>
<p>通过操作sql 来完成:</p>
<p>先把班级1 的学生对应的班级 改为 null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 先把班级2的学生对应的班级 改为 null</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_student <span class="keyword">SET</span> classno <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> classno <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 然后再删除班级2</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<p>**策略 2 : cascade 级联操作 ** 操作主表的时候影响从表的外键信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先删除之前的外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stu_classno;</span><br><span class="line"><span class="comment">-- 重新添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br><span class="line"><span class="comment">-- 试试更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_class <span class="keyword">SET</span> cno <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 试试删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_class <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>



<p>**策略 3 : set null ** 置空操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_class;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="comment">-- 先删除之前的外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stu_classno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重新添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stu_classno <span class="keyword">FOREIGN</span> KEY (classno) <span class="keyword">REFERENCES</span> t_class(cno) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 试试更新</span></span><br><span class="line"><span class="keyword">UPDATE</span> t_class <span class="keyword">SET</span> cno <span class="operator">=</span> <span class="number">5</span> <span class="keyword">WHERE</span> cno <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>



<p><strong>注意 :</strong> </p>
<ol>
<li>策略2 级联操作 和 策略 3 的删除操作 可以混着使用 <code>ON UPDATE CASCADE ON DELETE SET NULL</code> ;</li>
<li>应用场合 :<ul>
<li>朋友圈删除,点赞。留言都删除 – 级联操作</li>
<li>解散班级,对应的学生置为null就可以了 – set null</li>
</ul>
</li>
</ol>
<h5 id="2-8-DDL-和-DML-的补充"><a href="#2-8-DDL-和-DML-的补充" class="headerlink" title="2.8 DDL 和 DML 的补充"></a>2.8 DDL 和 DML 的补充</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加一张表 : 快速添加 : 结构和数据跟t_student 都是一致的</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一张表 : 快速添加 : 结构跟t_student , 不需要数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 快速添加 : 只要部分列 , 部分数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_student4</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> sno,sname <span class="keyword">FROM</span> t_student <span class="keyword">WHERE</span> sno <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_student4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据操作 : 清空数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t_student;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> t_student;</span><br></pre></td></tr></table></figure>

<p><strong>delete和truncate的区别 :</strong><br>从最终的结果来看，虽然使用TRUNCATE操作和使用DELETE操作都可以删除表中的全部记录,但是两者还是有很多区别的，其区别主要体现在以下几个方面:</p>
<ol>
<li>DELETE为数据操作语言DML; TRUNCATE为数据定义语言DDL。</li>
<li>DELETE操作是将表中所有记录-条-条删除直到删除完; TRUNCATE操作则是保留了表的结构，重新创建了这个表，所有的状态都相当于新表。因此，TRUNCATE操作的效率更高。</li>
<li>DELETE操作可以回滚; TRUNCATE操作会导致隐式提交，因此不能回滚(在第+章中会讲解事务的提交和回滚)。</li>
<li>DELETE操作执行成功后会返回已删除的行数(如删除4行记录,则会显示”Affected rows: 4” ) ;截断操作不会返回已删除的行量，结果通常是”Affected rows: 0”。DELETE操作删除表中记录后，再次向表中添加新记录时，对于设置有自增约束字段的值会从删除前表中该字段的最大值加1开始自增; TRUNCATE操作则会重新从1开始自增。</li>
</ol>
<h4 id="三-DQL"><a href="#三-DQL" class="headerlink" title="三 DQL"></a>三 DQL</h4><h5 id="3-1-表的准备"><a href="#3-1-表的准备" class="headerlink" title="3.1 表的准备"></a>3.1 表的准备</h5><p>准备四张表 : dept(部门表) , emp(员工表) , salgrade(薪资等级表), bonus(奖金表)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT(</span><br><span class="line">	DEPTNO <span class="type">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">	DNAME <span class="type">VARCHAR</span>(<span class="number">14</span>),</span><br><span class="line">	LOC <span class="type">VARCHAR</span>(<span class="number">13</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept</span><br><span class="line">	<span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_dept <span class="keyword">PRIMARY</span> KEY (deptno);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">(</span><br><span class="line">	EMPNO <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	ENAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	JOB <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">	MGR <span class="type">INT</span>(<span class="number">4</span>),</span><br><span class="line">	HIREDATE <span class="type">DATE</span>,</span><br><span class="line">	SAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	COMM <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	DEPTNO <span class="type">INT</span>(<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> EMP</span><br><span class="line">	<span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_DEPTINO <span class="keyword">FOREIGN</span> KEY (DEPTNO)</span><br><span class="line">	<span class="keyword">REFERENCES</span> DEPT (DEPTNO);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SALGRADE</span><br><span class="line">(</span><br><span class="line">	GRADE <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">	LOSAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	HISAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> BONUS</span><br><span class="line">(</span><br><span class="line">	ENAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	J0B <span class="type">VARCHAR</span>(<span class="number">9</span>),</span><br><span class="line">	SAL <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">	COMM <span class="keyword">DOUBLE</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">20</span>,<span class="string">&#x27; RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> DEPT (DEPTNO, DNAME, LOC)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27; BOSTON&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7902</span>, <span class="string">&#x27;1980-12-17&#x27;</span>,<span class="number">800</span>,<span class="keyword">NULL</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7499</span>,<span class="string">&#x27;ALL EN&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>,<span class="string">&#x27;1981-02-20&#x27;</span>,<span class="number">1600</span>,<span class="number">300</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7521</span>,<span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-22&#x27;</span>, <span class="number">1250</span>, <span class="number">500</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7566</span>,<span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-04-02&#x27;</span>, <span class="number">2975</span>, <span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7654</span>,<span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-28&#x27;</span>, <span class="number">1250</span>, <span class="number">1400</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>,<span class="number">7839</span>, <span class="string">&#x27; 1981-05-01&#x27;</span>, <span class="number">2850</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-06-09&#x27;</span>, <span class="number">2450</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span>	(<span class="number">7788</span>,<span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1987-04-19&#x27;</span>, <span class="number">3000</span>,<span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7839</span>,<span class="string">&#x27;KING&#x27;</span>, <span class="string">&#x27;PRESIDENT&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;1981-11-17&#x27;</span>, <span class="number">5000</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7844</span>,<span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>,<span class="string">&#x27;1981-09-08&#x27;</span>, <span class="number">1500</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7876</span>,<span class="string">&#x27;ADAMS&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7788</span>, <span class="string">&#x27;1987-05-23&#x27;</span>, <span class="number">1100</span>, <span class="keyword">NULL</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7900</span>, <span class="string">&#x27;AMES&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">950</span>, <span class="keyword">NULL</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7902</span>,<span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>,<span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">3000</span>,<span class="keyword">NULL</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> EMP (EMPNO, ENAME,JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)</span><br><span class="line">	<span class="keyword">VALUES</span> 	(<span class="number">7934</span>,<span class="string">&#x27;MILLER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7782</span>, <span class="string">&#x27;1982-01-23&#x27;</span>, <span class="number">1300</span>, <span class="keyword">NULL</span>, <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">700</span>,<span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1201</span>, <span class="number">1400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1401</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">2001</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SALGRADE (GRADE, LOSAL, HISAL)</span><br><span class="line">	<span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">3001</span>, <span class="number">9999</span>);</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 部门表: dept:department 部分，loc - location 位置</span></span><br><span class="line"><span class="comment">--员工表: emp:employee 员工 , mgr :manager上级领导编号， hiredate 入职日期 firedate 解雇日期，common: 补助</span></span><br><span class="line"><span class="comment">-- deptno 外键参考 dept - deptno字段</span></span><br><span class="line"><span class="comment">-- mgr外键参考自身表 emp.empno 产生了自关联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> salgrade;</span><br><span class="line"><span class="comment">-- losal - lowsal</span></span><br><span class="line"><span class="comment">-- hisal - highsal</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-SQL-查询"><a href="#3-2-SQL-查询" class="headerlink" title="3.2 SQL 查询"></a>3.2 SQL 查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 对 emp 表查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- * 代表所有数据</span></span><br><span class="line"><span class="comment">-- 显示部分列</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示部分行 : where 子句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">-- 显示部分列 , 部分行 :</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,mgr <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span><span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> empno 员工编号, ename 姓名,sal 工资 <span class="keyword">FROM</span> emp; <span class="comment">-- as省略，&#x27;&#x27;或者&quot;&quot;省略 了</span></span><br><span class="line"><span class="comment">-- as alias别名</span></span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">AS</span> 员工编号,ename <span class="keyword">AS</span> 姓名,sal <span class="keyword">AS</span> 工资 <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">AS</span> <span class="string">&#x27;员工编号&#x27;</span>,ename <span class="keyword">AS</span> &quot;姓名&quot;,sal <span class="keyword">AS</span> 工资 <span class="keyword">FROM</span> emp ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 算术运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,sal<span class="operator">+</span><span class="number">1000</span> <span class="keyword">AS</span> <span class="string">&#x27;涨薪后&#x27;</span>, deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> <span class="number">2500</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,comm,sal<span class="operator">+</span>comm <span class="keyword">FROM</span> emp;</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 去重操作</span></span><br><span class="line"><span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> job, deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job, deptno <span class="keyword">FROM</span> emp; <span class="comment">-- 对后面的所有列组合去重，而不是单独的某一列去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal; <span class="comment">-- 默认情况下是按照升序排列的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">ASC</span>; <span class="comment">-- asc 升序 ,可以默认不写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>; <span class="comment">-- desc 降序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">ASC</span> , deptno <span class="keyword">DESC</span>; <span class="comment">-- 在工资升序的情况下，deptno按照降序排列</span></span><br></pre></td></tr></table></figure>



<h5 id="3-3-where-子句"><a href="#3-3-where-子句" class="headerlink" title="3.3 where 子句"></a>3.3 where 子句</h5><p>指定查询条件使用where子句，可以查询符合条件的部分记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- where子句:将过滤条件放在where子句的后面，可以筛选/过滤出我们想要的符合条件的数据:</span></span><br><span class="line"><span class="comment">-- where子句+关系运算符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&gt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">&lt;&gt;</span> <span class="number">10</span>; <span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;clerk&#x27;</span>; <span class="comment">-- 默认情况下不区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="type">BINARY</span> job <span class="operator">=</span> <span class="string">&#x27;clerk&#x27;</span>; <span class="comment">-- binary 区分大小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="operator">&lt;</span> <span class="string">&#x27;1981-12-25&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">where</span>子句<span class="operator">+</span>逻辑运算符: <span class="keyword">and</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">3000</span>; <span class="comment">-- (1500 , 3000)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="operator">&amp;&amp;</span> sal <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">1500</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">3000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="keyword">BETWEEN</span> <span class="number">1500</span> <span class="keyword">AND</span> <span class="number">3000</span>; <span class="comment">-- [ 1500 , 3000]</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">where</span>子句<span class="operator">+</span>逻辑运算符: <span class="keyword">or</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span><span class="operator">||</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="keyword">IN</span> ( <span class="string">&#x27;MANAGER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span> , <span class="string">&#x27;ANALYST&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- where子句+模糊查询:</span></span><br><span class="line"><span class="comment">-- 查询名字中带A的员工 -- %代表任意多个字符0,1,2,</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 任意一个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;_A%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关于null的判断:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小括号的使用: 因为不同的运算符的优先级别不同，加括号为了可读性</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span><span class="number">1500</span>; <span class="comment">-- 先and再or and &gt; or</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> (job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span><span class="number">1500</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> (job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">OR</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">AND</span> sal <span class="operator">&gt;=</span> <span class="number">1500</span>;</span><br></pre></td></tr></table></figure>



<h4 id="四-函数"><a href="#四-函数" class="headerlink" title="四 函数"></a>四 函数</h4><h5 id="4-1-函数的分类"><a href="#4-1-函数的分类" class="headerlink" title="4.1 函数的分类"></a>4.1 函数的分类</h5><p>MySQL中提供了大量函数来简化用户对数据库的操作，比如字符串的处理、日期的运算、数值的运算等等。使用函数可以大大提高SELECT语句操作数据库的能力，同时也给数据的转换和处理提供了方便。(在sql 中使用函数)<br>函数只是对查询结果中的数据进行处理，不会改变数据库中数据表的值。MySQL中的函数主要分为单行函数和多行函数两大类。</p>
<p><strong>单行函数</strong></p>
<p>单行函数是指对每一条记录输入值进行计算, 并得到相应的计算结果,然后返回给用户，也就是说，每条记录作为一个输入参数,经过函数计<br>算得到每条记录的计算结果。<br>常用的单行函数主要包括字符串函数、数值函数、日期与时间函数、流程函数以及其他函数。</p>
<p><strong>多行函数</strong></p>
<p>多行函数是指对一组数据进行运算,针对这一组数据 (多行记录)只返回一个结果，也称为分组函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 函数举例:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, <span class="built_in">LOWER</span>( ename) , <span class="built_in">UPPER</span>(ename),sal <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 函数的功能:封装了特定的一些功能，我们直接拿过来使用，可以实现对应的功能</span></span><br><span class="line"><span class="comment">-- 函数作用:为了提高select的能力</span></span><br><span class="line"><span class="comment">-- 注意:函数没有改变数据自身的值，而是在真实数据的.上面进行加工处理，展示新的结果而己。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) , <span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(sal), <span class="built_in">SUM</span>(sal),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- lower(ename) , upper(ename): 改变每一条结果，每一条数据对应一条结果 单行函数</span></span><br><span class="line"><span class="comment">-- max(sal) ,min(sal), count(sa1), sum(sal),avg(sal):多条数据，最终展示一个结果 多行函数</span></span><br></pre></td></tr></table></figure>



<h5 id="4-2-单行函数"><a href="#4-2-单行函数" class="headerlink" title="4.2 单行函数"></a>4.2 单行函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 单行函数包含:</span><br><span class="line"><span class="comment">-- 1.字符串函数</span></span><br><span class="line"><span class="keyword">select</span> ename,length( ename),<span class="built_in">substring</span>(ename,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- substring字符串 截取，2:从字符下标为2开始，3:截取长度3 ( 下标从1开始)</span></span><br><span class="line"><span class="comment">-- 2.数值函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>( <span class="number">-5</span>),<span class="built_in">CEIL</span>(<span class="number">5.3</span>), <span class="built_in">FLOOR</span>(<span class="number">5.9</span>),ROUND(<span class="number">3.14</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- dual实际就是一个伪表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-5</span>) 绝对值,<span class="built_in">CEIL</span>(<span class="number">5.3</span>) 向上取整,<span class="built_in">FLOOR</span>(<span class="number">5.9</span>) 向下取整, ROUND(<span class="number">3.14</span>) 四舍五入; <span class="comment">-- 如果没有where条件的话，from dual可以省略不写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">10</span><span class="operator">/</span><span class="number">3</span>, <span class="number">10</span><span class="operator">%</span><span class="number">3</span>, <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.日期与时间函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(), CURTIME(); <span class="comment">-- curdate()年月日curtime()时分秒</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW(), SYSDATE(), SLEEP(<span class="number">3</span>) ,NOW(), SYSDATE() <span class="keyword">FROM</span> DUAL; <span class="comment">-- now(), sysdate() 年月日时分秒:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> (<span class="number">9999</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27; SAL ASMAN&#x27;</span> , <span class="number">7698</span> , NOW() , <span class="number">1000</span>, nu1l, <span class="number">30</span>);</span><br><span class="line"><span class="comment">-- now()可以表示年月日时分秒，但是插入数据的时候还是要参照表的结构的</span></span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure>



<p><strong>流程函数 (If Switch)</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- if相关</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename , sal, IF(sal<span class="operator">&gt;=</span><span class="number">2500</span>, <span class="string">&#x27;高薪&#x27;</span>, <span class="string">&#x27;底薪&#x27;</span>) <span class="keyword">AS</span> <span class="string">&#x27;薪资等级&#x27;</span> <span class="keyword">FROM</span> emp; <span class="comment">-- if-else 双分支结构</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename , sal , comm, sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>) <span class="keyword">FROM</span> emp; <span class="comment">-- 如果comm是null，那么取值为0 --单分支</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="number">1</span>,<span class="number">1</span>) ,<span class="built_in">NULLIF</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">-- 如果value1等于value2，则返回null,否则返回value 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- case相关:</span></span><br><span class="line"><span class="comment">-- case等值判断</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename ,job,</span><br><span class="line"><span class="keyword">CASE</span> job</span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">THEN</span><span class="string">&#x27;店员&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;销售&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;经理&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;其他&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="string">&#x27;岗位&#x27;</span>,</span><br><span class="line">sal <span class="keyword">FROM</span> emp; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- case区间判断:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, sal,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">1000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">2000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">	<span class="keyword">WHEN</span> sal<span class="operator">&lt;=</span><span class="number">3000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="string">&#x27;工资等级&#x27;</span>,</span><br><span class="line">deptno <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>



<p><strong>其它函数</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前使用的数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(), <span class="keyword">USER</span>(),VERSION() <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>



<h5 id="4-4-多行函数"><a href="#4-4-多行函数" class="headerlink" title="4.4 多行函数"></a>4.4 多行函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多行函数:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) ,<span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(sal), <span class="built_in">SUM</span>(sal), <span class="built_in">SUM</span>(sal)<span class="operator">/</span><span class="built_in">COUNT</span>(sal),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 多行函数自动忽略 null 值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>( Comm) , <span class="built_in">MIN</span>( comm),<span class="built_in">COUNT</span>( comm) , <span class="built_in">SUM</span>( comm),<span class="built_in">SUM</span>( comm) , <span class="built_in">COUNT</span>(comm) , <span class="built_in">AVG</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">-- max() ,min() , count()针对所有类型  sum(),avg() 只针对数值型类型有效</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(ename) ,<span class="built_in">MIN</span>(ename) , <span class="built_in">COUNT</span>(ename) , <span class="built_in">SUM</span>( ename ) , <span class="built_in">AVG</span>(ename) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- count --计数</span></span><br><span class="line"><span class="comment">-- 统计表的记录数:方式1:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ename) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 统计表的记录数:方式2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>



<h5 id="4-5-分组-group-by"><a href="#4-5-分组-group-by" class="headerlink" title="4.5 分组 group by"></a>4.5 分组 group by</h5><p>group by : 用来进行分组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计各个部门门的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp; <span class="comment">-- 字段和多行函数不可以同时使用</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno; <span class="comment">-- 字段和多行函数不可以同时使用,除非这个字段属于分组</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 统计各个岗位的平均工资:</span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">LOWER</span>(job),<span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br></pre></td></tr></table></figure>



<h5 id="4-6-having-分组后筛选"><a href="#4-6-having-分组后筛选" class="headerlink" title="4.6 having 分组后筛选"></a>4.6 having 分组后筛选</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计各个部门的平均工资, 只显示平均工资2000以上的- 分组以后进行二次筛选having</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sal) <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal)平均工资 <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> 平均工资<span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">AVG</span>(sal)平均工资 <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> 平均工资<span class="operator">&gt;</span> <span class="number">2000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 统计各个岗位的平均工资,除了MANAGER</span></span><br><span class="line"><span class="comment">-- 方法1:</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">!=</span> <span class="string">&#x27; MANAGER&#x27;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 方法2:</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job <span class="keyword">HAVING</span> job <span class="operator">!=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- where在分组前进行过滤的，having在分组后进行后滤。</span></span><br></pre></td></tr></table></figure>



<h5 id="4-7-单表查询总结"><a href="#4-7-单表查询总结" class="headerlink" title="4.7 单表查询总结"></a>4.7 单表查询总结</h5><ul>
<li><p>select语句的执行顺序<br>from– where – group by- select - having- order by</p>
</li>
<li><p>单表查询练习</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列出工资最小值小于2000的职位</span></span><br><span class="line"><span class="keyword">SELECT</span> job, <span class="built_in">MIN</span>(sal)</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> job</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">MIN</span>(sal) <span class="operator">&lt;</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">-- 列出平均工资大于1200元的部门和工作搭配组合I</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,job, <span class="built_in">AVG</span>(sal)</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sal)<span class="operator">&gt;</span><span class="number">1200</span></span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="comment">-- 统计[人数小于4的]部门的平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">COUNT</span>(<span class="number">1</span>),<span class="built_in">AVG</span>(sal )</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">&lt;</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 统计各部门的最高工资，排除最高工资小于3000的部门。</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno, <span class="built_in">MAX</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(sal) <span class="operator">&lt;</span> <span class="number">3000</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="五-多表查询"><a href="#五-多表查询" class="headerlink" title="五 多表查询"></a>五 多表查询</h4><h5 id="5-1-内连接"><a href="#5-1-内连接" class="headerlink" title="5.1 内连接"></a>5.1 内连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号，姓名，部门编号,部门名称:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp; <span class="comment">-- 14条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept; <span class="comment">-- 4条记录</span></span><br><span class="line"><span class="comment">-- 多表查询:</span></span><br><span class="line"><span class="comment">-- 交叉连接 : cross join</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> dept; <span class="comment">-- 14*4 = 56条 笛卡尔乘积:没有实际意义， 有理论意义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">JOIN</span> dept; <span class="comment">-- cross 可以省略不写，mysq1中可以，oracle中不可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自然连接: natural join</span></span><br><span class="line"><span class="comment">-- 优点:自动匹配所有的同名列,同名列只展示一次，简单</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> empno , ename, sal, dname , loc</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"><span class="comment">-- 缺点: 查询字段的时候，没有指定字段所属的数据库表，效率低</span></span><br><span class="line"><span class="comment">-- 解决:指定表名:</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.empno , emp.ename, emp.sal, dept.dname , dept.loc, dept.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 缺点:表名太长</span></span><br><span class="line"><span class="comment">-- 解决:表起别名</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,d.dname ,d.loc ,d.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> dept d;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 自然连接natural join缺点:自动匹配表中所有的同名列，但是有时候我们希望只匹配部分同名列: </span></span><br><span class="line"><span class="comment">-- 解决: 内连接- using子句:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d 	<span class="comment">-- inner可以不写</span></span><br><span class="line"><span class="keyword">USING</span>(deptno); 		<span class="comment">-- 这里不能写natural join了,这里是内连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- using缺点:关联的字段，必须是同名的</span></span><br><span class="line"><span class="comment">-- 解决:内连接 - on子句: </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> (e.deptno <span class="operator">=</span> d. deptno);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多表连接查询的类型: 1.交叉连接 cross join 2.自然连接natural join</span></span><br><span class="line"><span class="comment">-- 3.内连接- using子句 4.内连接- on子句</span></span><br><span class="line"><span class="comment">-- 综合看:内连接- on子句</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> (e.deptno <span class="operator">=</span> d. deptno)</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">3500</span>;</span><br><span class="line"><span class="comment">-- 条件:</span></span><br><span class="line"><span class="comment">-- 1.筛选条件where</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="comment">-- 2.连接条件on, using, natural</span></span><br><span class="line"><span class="comment">-- SQL99语法 :筛选条件和连接条件是分开的</span></span><br></pre></td></tr></table></figure>



<h5 id="5-2-外连接"><a href="#5-2-外连接" class="headerlink" title="5.2 外连接"></a>5.2 外连接</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- inner join一on子句: 显示的是所有匹配的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d </span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="comment">-- 问题:</span></span><br><span class="line"><span class="comment">-- 1.40号部分没有员工，没有显示在查询结果中</span></span><br><span class="line"><span class="comment">-- 2.员工scott没有部门，没有显示在查询结果中</span></span><br><span class="line"><span class="comment">-- 外连接:除了显示匹配的数据之外，还可以显示不匹配的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左外连接: left outer join -- 左面的那个表的信息，即使不匹配也可以查看出效果</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 右外连接: right outer join</span></span><br><span class="line"><span class="comment">-- 右面的那个表的信息，即使不匹配也可以查看出效果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全外连接full outer join --这个语法在mysq1中不支持， 在oracle中支持 -- 展示左，右表全部不匹配的数据</span></span><br><span class="line"><span class="comment">-- scott ，40号部门都可以看到</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解决mysq1中不支持全外连接的问题:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">UNION</span> <span class="comment">-- 并集</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- outer 可以省略不写</span></span><br></pre></td></tr></table></figure>



<h5 id="5-3-三表查询"><a href="#5-3-三表查询" class="headerlink" title="5.3 三表查询"></a>5.3 三表查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.`DEPTNO` <span class="operator">=</span> d.`DEPTNO`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e. ename,e. sal,e. empno,e. deptno,d. dname,s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d. deptno</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> salgrade s</span><br><span class="line"><span class="keyword">ON</span> e.sal <span class="keyword">BETWEEN</span> s.losal <span class="keyword">AND</span> s. hisal;</span><br></pre></td></tr></table></figure>



<h5 id="5-4-自连接"><a href="#5-4-自连接" class="headerlink" title="5.4 自连接"></a>5.4 自连接</h5><img src="/2022/12/20/MySQL/image-20221209173931160.png" alt="image-20221209173931160" style="zoom:200%;">

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号、姓名、上级编号，上级的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e1.`EMPNO` 员工编号,e1.ename 员工姓名,e1.`MGR` 领导编号,e2.`ENAME` 员工领导姓名</span><br><span class="line"><span class="keyword">FROM</span> emp e1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> emp e2</span><br><span class="line"><span class="keyword">ON</span> e1.`MGR` <span class="operator">=</span> e2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.`EMPNO` 员工编号,e1.ename 员工姓名,e1.`MGR` 领导编号,e2.`ENAME` 员工领导姓名</span><br><span class="line"><span class="keyword">FROM</span> emp e1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp e2</span><br><span class="line"><span class="keyword">ON</span> e1.`MGR` <span class="operator">=</span> e2.empno;</span><br></pre></td></tr></table></figure>



<h5 id="5-5-多表查询92语法"><a href="#5-5-多表查询92语法" class="headerlink" title="5.5 多表查询92语法"></a>5.5 多表查询92语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称:</span></span><br><span class="line"><span class="keyword">SELECT</span> e. empno, e. ename,e. sal, e. deptno, d. dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="comment">-- 相当于99语法中的cross join ,出现笛卡尔积，没有意义</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno, e.ename,e.sal, e.deptno, d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"><span class="comment">-- 相当于99语法中的natural join</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的编号，员工姓名，薪水，员工部门编号，部门名称，查询出工资大于2000的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,e.deptno,d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e,dept d</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">AND</span> e.sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的名字，岗位，上级编号，上级名称(自连接) :</span></span><br><span class="line"><span class="keyword">SELECT</span> e1.ename, e1.job,e1.mgr,e2.ename</span><br><span class="line"><span class="keyword">FROM</span> emp e1,emp e2</span><br><span class="line"><span class="keyword">WHERE</span> e1.mgr <span class="operator">=</span> e2.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工的编号、姓名、薪水、部门编号、部门名称、薪水等级</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal,e.deptno,d.dname,s.grade</span><br><span class="line"><span class="keyword">FROM</span> emp e, dept d, salgrade s</span><br><span class="line"><span class="keyword">WHERE</span> e.deptno <span class="operator">=</span> d.deptno <span class="keyword">AND</span> e.sal <span class="operator">&gt;=</span> s.losal <span class="keyword">AND</span> e.sal <span class="operator">&lt;=</span> s.hisal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 总结:</span></span><br><span class="line"><span class="comment">-- 1.92语法麻烦</span></span><br><span class="line"><span class="comment">-- 2.92语法中 表的连接条件和筛选条件是放在- -起的没有分开</span></span><br><span class="line"><span class="comment">-- 3.99语法中提供了更多的查询连接类型: cross, natural, inner,outer</span></span><br></pre></td></tr></table></figure>



<h5 id="5-6-子查询"><a href="#5-6-子查询" class="headerlink" title="5.6 子查询"></a>5.6 子查询</h5><ul>
<li><p>什么是子查询?</p>
<p>一条SQL语句含有多个select</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 引入子查询:</span></span><br><span class="line"><span class="comment">-- 查询所有比&quot;CLARK&quot;工资高的员工的信息</span></span><br><span class="line"><span class="comment">-- 步骤1:&quot;CLARK&quot; 工资</span></span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span><span class="string">&#x27;CLARK&#x27;</span>; <span class="comment">-- 2450</span></span><br><span class="line"><span class="comment">-- 步骤2:查询所有工资比2450高的员工的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2450</span>;</span><br><span class="line"><span class="comment">-- 两次命令解决问题--》效率低，第二个命令依托于第一个命令，第一个命令的结果给第二个命令使用，但是</span></span><br><span class="line"><span class="comment">-- 因为第一个命令的结果可能不确定要改，所以第二个命令也会导致修改</span></span><br><span class="line"><span class="comment">-- 将步骤1和步骤2合并--》 子查询: </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>);</span><br><span class="line"><span class="comment">-- 一个命令解决问题--》效率高</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行顺序:</p>
<p>先执行子查询 , 再执行外查询;</p>
</li>
<li><p>不相关子查询:</p>
<p>子查询可以独立运行 , 称为不相关子查询。</p>
</li>
<li><p>不相关子查询分类:</p>
<p>根据子查询的结果行数, 可以分为单行子查询和多行子查询。</p>
</li>
</ul>
<h6 id="5-6-1-单行子查询"><a href="#5-6-1-单行子查询" class="headerlink" title="5.6.1 单行子查询"></a>5.6.1 单行子查询</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 单行子查询: 查询工资高于平均工资的雇员名字和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询和CLARK同- - 部门且比他工资低的雇员名字和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">sal <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;CLARK&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> job <span class="operator">=</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span></span><br><span class="line"><span class="string">&#x27;SCOTT&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">hiredate <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> hiredate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h6 id="5-6-2-多行子查询"><a href="#5-6-2-多行子查询" class="headerlink" title="5.6.2 多行子查询"></a>5.6.2 多行子查询</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 多行子查询:</span></span><br><span class="line"><span class="comment">-- [1]查询[部门20中职务同部门10的雇员一-样的]雇员信息。</span></span><br><span class="line"><span class="comment">-- 查询雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp ;</span><br><span class="line"><span class="comment">-- 查询部门20中的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>; <span class="comment">-- CLERK , MANAGER , ANALYST</span></span><br><span class="line"><span class="comment">-- 部门10的雇员的职务:</span></span><br><span class="line"><span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>; <span class="comment">-- MANAGER, PRESIDENT , CLERK</span></span><br><span class="line"><span class="comment">-- 查询部门20中职务同部门10的雇员一-样的雇员信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job<span class="operator">=</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>); </span><br><span class="line"><span class="comment">-- &gt; Subquery returns more than 1 row</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job <span class="keyword">IN</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [2]查询工资比所有的“SALESMAN&quot;都高的雇员的编号、名字和工资。</span></span><br><span class="line"><span class="comment">-- 查询雇员的编号、名字和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename,sal <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- &quot;SALESMAN&quot;的工 资:</span></span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询工资比所有的“SALESMAN”都高的雇员的编号、名字和工资。</span></span><br><span class="line"><span class="comment">-- 多行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br><span class="line"><span class="comment">-- 单行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename,sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [3]查询工资低于任意一个“CLERK&quot;的工资的雇员信息。</span></span><br><span class="line"><span class="comment">-- 查询雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 查询工资低于任意一个“CLERK”的工资的雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">!=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单行子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> job <span class="operator">!=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h6 id="5-6-3-相关子查询"><a href="#5-6-3-相关子查询" class="headerlink" title="5.6.3 相关子查询"></a>5.6.3 相关子查询</h6><ol>
<li>不相关的子查询引入:<ol>
<li>不相关的子查询:子查询可以独立运行，先运行子查询，再运行外查询。</li>
<li>相关子查询:子查询不可以独立运行，并且先运行外查询,再运行子查询</li>
</ol>
</li>
<li>不相关的子查询优缺点:<ol>
<li>好处 : 简单功能强大(- -些使用不相关 子查询不能实现或者实现繁琐的子查询，可以使用相关子查询实现)</li>
<li>缺点 : 稍难理解</li>
</ol>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询最高工资的员工 (不相关子查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp);</span><br><span class="line"><span class="comment">-- 查询本部门最高工资的员工 (相关子查询)</span></span><br><span class="line"><span class="comment">-- 方法1:通过不相关子查询实现:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>)</span><br><span class="line"><span class="comment">-- 缺点 : 语句比较多 , 具体到底有多少个部分未知</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法2 : 相关子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> e.deptno) <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询工资高于其所在岗位的平均工资的那些员工 (相关子查询)</span></span><br><span class="line"><span class="comment">-- 不相关子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> .....</span><br><span class="line"><span class="comment">-- 相关子查询:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp e <span class="keyword">WHERE</span> sal <span class="operator">&gt;=</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp e2 <span class="keyword">WHERE</span> e2.job <span class="operator">=</span> e.job);</span><br></pre></td></tr></table></figure>



<h4 id="六-事务"><a href="#六-事务" class="headerlink" title="六 事务"></a>六 事务</h4><p>事务 (Transaction) 是用来维护数据库完整性的，它能够保证一系列的MySQL操作要么全部执行， 要么全不执行。</p>
<p>例子1:<br>举一个例子来进行说明，例如转账操作: A账户要转账给B账户，那么A账户上减少的钱数和B账户上增加的钱数必须一致，也就是说A账户的转出操作和B账户的转入操作要么全部执行，要么全不执行;如果其中一 个操作出现异常而没有执行的话，就会导致账户A和账户B的转入转出金额不一 致的情况，为而事实上这种情况是不允许发生的，所以为了防止这种情况的发生，需要使用事务处理。<br>例子2:<br>在淘宝购物下订单的时候，商家库存要减少,订单增加记录,付款我的账号少100元..操作要么全部执行，要么全不执行。</p>
<ul>
<li>事务的概念<br>事务(Transaction) 指的是一个操作序列, 该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS (数据库管理系统)中的事务管理子系统负责事务的处理。<br>目前常用的存储引擎有<strong>InnoDB</strong> (MySQL5.5以后默认的存储引擎)和MylSAM (MySQL5.5之前默认的存储引擎)，其中<code>InnoDB</code>支持事务处理机制，而MyISAM不支持。</li>
<li>事务的特性<br>事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一 个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。<br>但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation) 和持久性(Durability) 。这四个特性简称为ACID特性。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	uname <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 查看账户表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;丽丽&#x27;</span>,<span class="number">2000</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 丽丽给小刚转200元:</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 默认一个ML语句是一个事务，所以上面的操作执行了2个事务。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 必须让上面的两个操作控制在一个事务中:</span></span><br><span class="line"><span class="comment">-- 手动开启事务:</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">200</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动回滚 : 刚才执行的操作全部取消</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动提交:</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在回滚和提交之前，数据库中的数据都是操作的缓存中的数据，而不是数据库的真实数据</span></span><br></pre></td></tr></table></figure>



<h5 id="6-1-事务的并发问题"><a href="#6-1-事务的并发问题" class="headerlink" title="6.1 事务的并发问题"></a>6.1 事务的并发问题</h5><ul>
<li><p>脏读(Dirty read)<br>当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中,这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>
</li>
<li><p>不可重复读(Unrepeatableread) : </p>
<p>指在一个事务内多次读同一 数据。在这个事务还没有结束时，另一个事务也访问该数据。那么,在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太-一样。这就发生了在一个事务内两次读到的数据是不一样的情况， 因此称为不可重复读。</p>
</li>
<li><p>幻读 (Phantom read) :</p>
<p>幻读与不可重复读类似。它发生在一个事务(T1) 读取了几行数据,接着另-一个并发事务(T2) 插入了一些数据时。<br>在随后的查询中，第一个事务(T1) 就会发现多了一-些原本不存在的记录，就好像发生了幻觉一样,所以称为幻读。</p>
</li>
</ul>
<p><strong>不可重复度和幻读区别:</strong><br>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>
<p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>
<h5 id="6-2-事务的隔离级别"><a href="#6-2-事务的隔离级别" class="headerlink" title="6.2 事务的隔离级别"></a>6.2 事务的隔离级别</h5><p>事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。<br>事务的隔离级别从低到高依次为<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code>以及<code>SERIALIZABLE</code>,隔离级别越低，越能支持高并发的数据库操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看默认的事务隔离级别MySQL默 认的是repeatable read</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"><span class="comment">-- 设置事务的隔离级别(设置当前会话的隔离级别)</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br></pre></td></tr></table></figure>



<h4 id="七-视图"><a href="#七-视图" class="headerlink" title="七 视图"></a>七 视图</h4><ol>
<li>视图的概念<br>视图(view) 是-个从单张或多张基础数据表或其他视图中构建出来的虚拟表。同基础表一样,视图中也包含了一系列带有名称的列和行数据,但是数据库中只是存放视图的定义，也就是动态检索数据的查询语句，而并不存放视图中的数据，这些数据依旧存放于构建视图的基础表中，只有当用户使用视图时才去数据库请求相对应的数据，即视图中的数据是在引用视图时动态生成的。因此视图中的数据依赖于构建视图的基础表,如果基本表中的数据发生了变化，视图中相应的数据也会跟着改变。<br><strong>PS:</strong> 视图本质上就是: -个查询语句，是一个虚拟的表，不存在的表，你查看视图，其实就是查看视图对应的sq语句</li>
<li>视图的好处<br>简化用户操作:视图可以使用户将注意力集中在所关心地数据上,而不需要关心数据表的结构、与其他表的关联条件以及查询条件等。<br>对机密数据提供安全保护:有了视图，就可以在设计数据库应用系统时，对不同的用户定义不同的视图，避免机密数据(如，敏感字段”salary” )出现在不应该看到这些数据的用户视图上。这样视图就自动提供了对机密数据的安全保护功能。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建单表视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在视图中插入数据:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno , ename , job , deptno) <span class="keyword">VALUES</span> (<span class="number">9999</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno , ename , job , deptno) <span class="keyword">VALUES</span> ( <span class="number">8888</span>, <span class="string">&#x27;nana&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span> ,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建单表视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview01</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno, ename, job, deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myview01 ( empno, ename , job , deptno) <span class="keyword">VALUES</span> (<span class="number">7777</span>, <span class="string">&#x27;feifei&#x27;</span> , <span class="string">&#x27;CLERK&#x27;</span> ,<span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 加入了 with check option 后 再添加不相关数据就报错了</span></span><br><span class="line"><span class="comment">-- &gt; 1369 - CHECK OPTION failed &#x27; mytestdb . myview01 &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建/替换多表视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview02</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,e.sal, d.deptno, d.dname</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.deptno <span class="operator">=</span> d. deptno</span><br><span class="line"><span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建统计视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview03</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.deptno , d.dname , <span class="built_in">AVG</span>(sal) , <span class="built_in">MIN</span>(sal), <span class="built_in">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> emp e</span><br><span class="line"><span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">USING</span>(deptno)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> e.deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview03 ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建基于视图的视图:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> myview04</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview03 <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> myview04;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot Vue增删改查</title>
    <url>/2023/01/04/SpringBoot-Vue%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
    <content><![CDATA[<div style="text-align:left;width:200px;border-radius:15%;">
    <img src="/2023/01/04/SpringBoot-Vue%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/%E7%8C%AB%E5%B0%9B%E5%A6%96.jpg">    
</div>        

<p>技术栈 : 后端框架SpringBoot , MyBatis, 前端框架 Vue , ElementUI , 来实现对数据库表数据的增删改查。 <span id="more"></span></p>
<h4 id="一-数据库表设计"><a href="#一-数据库表设计" class="headerlink" title="一 数据库表设计"></a>一 数据库表设计</h4><img src="/2023/01/04/SpringBoot-Vue%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1.jpg" style="zoom:200%;">



<h4 id="二-添加依赖"><a href="#二-添加依赖" class="headerlink" title="二 添加依赖"></a>二 添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="二-后端配置"><a href="#二-后端配置" class="headerlink" title="二 后端配置"></a>二 后端配置</h4><p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库驱动类型</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库连接地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql:///test01?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="comment"># Mybatis xml 位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath*:/mapper/*.xml</span></span><br><span class="line"><span class="comment"># 访问端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure>



<h4 id="三-CRUD-后端实现"><a href="#三-CRUD-后端实现" class="headerlink" title="三 CRUD 后端实现"></a>三 CRUD 后端实现</h4><ol>
<li><p>实体类 Book</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer bid;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>BookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from book&quot;)</span></span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAllBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据 ID 查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from book where bid = #&#123;bid&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">findByBookId</span><span class="params">(Integer bid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    删除</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from book where bid = #&#123;bid&#125;&quot;)</span></span><br><span class="line">    Boolean <span class="title function_">deleteById</span><span class="params">(Integer bid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO book VALUES (default,#&#123;bname&#125;,#&#123;price&#125;);&quot;)</span></span><br><span class="line">    Integer <span class="title function_">addBook</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    更新</span></span><br><span class="line">    <span class="meta">@Update(&quot;update book set bname = #&#123;bname&#125;,price = #&#123;price&#125; where bid = #&#123;bid&#125;;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service接口 及 实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Book <span class="title function_">findByBookId</span><span class="params">(Integer bid)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">deleteById</span><span class="params">(Integer bid)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">addBook</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.getAllBook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findByBookId</span><span class="params">(Integer bid)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookMapper.findByBookId(bid);</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">deleteById</span><span class="params">(Integer bid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteById(bid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">addBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> bookMapper.addBook(book);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> bookMapper.update(book);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前端控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 解决跨域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.findByBookId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addBook</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.addBook(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用 Postman 或者 测试类 测试一下接口。</p>
</li>
</ol>
<h4 id="四-ElementUI-前端实现"><a href="#四-ElementUI-前端实现" class="headerlink" title="四 ElementUI 前端实现"></a>四 ElementUI 前端实现</h4><h5 id="4-1-下载依赖"><a href="#4-1-下载依赖" class="headerlink" title="4.1 下载依赖"></a>4.1 下载依赖</h5><p>前端使用Vue , Element</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cnpm install --save axios</span><br><span class="line"><span class="comment"># 安装 axios</span></span><br><span class="line"></span><br><span class="line">cnpm i element-ui -S</span><br><span class="line"><span class="comment"># ElementUI</span></span><br></pre></td></tr></table></figure>



<h5 id="4-2-配置组件"><a href="#4-2-配置组件" class="headerlink" title="4.2 配置组件"></a>4.2 配置组件</h5><p>在  <code>router/index.js </code> 引用 ElementUI 样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Index</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入 elementui</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">// elementui 样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 elementui</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Index</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<p>在 <code>main.js</code> 文件添加 <code>axios</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 axios 依赖</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 设置让其他页面都可以直接使用axios，也就是设置axios为全局属性</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br></pre></td></tr></table></figure>



<h5 id="4-3-首页数据加载"><a href="#4-3-首页数据加载" class="headerlink" title="4.3 首页数据加载"></a>4.3 首页数据加载</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table</span><br><span class="line">                :data=&quot;tableData&quot;</span><br><span class="line">                border</span><br><span class="line">                style=&quot;width: 600px&quot;&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    fixed</span><br><span class="line">                    prop=&quot;bid&quot;</span><br><span class="line">                    label=&quot;编号&quot;</span><br><span class="line">                    width=&quot;90&quot;&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    prop=&quot;bname&quot;</span><br><span class="line">                    label=&quot;书名&quot;</span><br><span class="line">                    width=&quot;200&quot;&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    prop=&quot;price&quot;</span><br><span class="line">                    label=&quot;价格&quot;</span><br><span class="line">                    width=&quot;120&quot;&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column</span><br><span class="line">                    fixed=&quot;right&quot;</span><br><span class="line">                    label=&quot;操作&quot;</span><br><span class="line">                    width=&quot;170&quot;&gt;</span><br><span class="line">                &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">                    &lt;el-button</span><br><span class="line">                            size=&quot;mini&quot;</span><br><span class="line">                            @click=&quot;handleEdit(scope.row)&quot;&gt;编辑&lt;/el-button&gt;</span><br><span class="line">                    &lt;el-button</span><br><span class="line">                            size=&quot;mini&quot;</span><br><span class="line">                            type=&quot;danger&quot;</span><br><span class="line">                            @click=&quot;handleDelete(scope.row)&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;index&quot;,</span><br><span class="line">        created()&#123; // 初始化方法</span><br><span class="line">            let that = this</span><br><span class="line">          this.$axios.get(&#x27;http://localhost:8081/book/list&#x27;).then((resp)=&gt; &#123;</span><br><span class="line">                // console.log(resp.data)</span><br><span class="line">              that.tableData = resp.data</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                tableData: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">效果展示</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/04/SpringBoot-Vue%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20230104140216601.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="4-4-删除数据"><a href="#4-4-删除数据" class="headerlink" title="4.4 删除数据"></a>4.4 删除数据</h5><p>在  vue 文件中 的<code>&lt;script&gt;&lt;/script&gt;</code> 之间添加 methods(方法) , 删除方法 :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="title function_">handleDelete</span>(<span class="params">row</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> that = <span class="variable language_">this</span></span><br><span class="line">                <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;是否删除《&#x27;</span>+row.<span class="property">bname</span>+<span class="string">&#x27; 》?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                    <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">                &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:8081/book/delete/&#x27;</span>+row.<span class="property">bid</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (resp.<span class="property">data</span>)&#123;</span><br><span class="line">                            that.$alert(<span class="string">&#x27;《&#x27;</span>+row.<span class="property">bname</span>+<span class="string">&#x27; 》已删除&#x27;</span>, <span class="string">&#x27;&#x27;</span>, &#123;</span><br><span class="line">                                <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">                                <span class="attr">callback</span>: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">                                   location.<span class="title function_">reload</span>();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-5-修改数据"><a href="#4-5-修改数据" class="headerlink" title="4.5 修改数据"></a>4.5 修改数据</h5><p>在首页的vue文件中, <code>&lt;/el-table&gt; 和 &lt;/div&gt;</code> 之间 添加一个弹窗样式 :</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">           <span class="attr">title</span>=<span class="string">&quot;提示&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">width</span>=<span class="string">&quot;30%&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">status-icon</span>  <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.id&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;书名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.bname&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;价格&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;ruleForm.price&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">tableData</span>: [],</span><br><span class="line">                <span class="attr">dialogVisible</span>:<span class="literal">false</span>,</span><br><span class="line">                <span class="attr">ruleForm</span>:&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 再添加两个方法</span></span><br><span class="line">        methods&#123;</span><br><span class="line">        	<span class="title function_">handleEdit</span>(<span class="params">book</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ruleForm</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(book))</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dialogVisible</span>= <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">            <span class="title function_">submitForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">ruleForm</span>)         <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8081/book/update&#x27;</span>,<span class="variable language_">this</span>.<span class="property">ruleForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (resp.<span class="property">data</span>)&#123;</span><br><span class="line">                        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">                            <span class="attr">message</span>: <span class="string">&#x27;修改成功&#x27;</span>,</span><br><span class="line">                            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ruleForm</span>=&#123;&#125;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">dialogVisible</span>=<span class="literal">false</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">效果展示</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/04/SpringBoot-Vue%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20230104151929921.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h4 id="五-补充"><a href="#五-补充" class="headerlink" title="五 补充"></a>五 补充</h4><p>vue 打包生成静态文件 , 放到后端的 static 目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包完成之后, 静态文件生成在 dist 目录中, 直接复制所有文件到 后端的resources/static目录中去</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 整合Shiro</title>
    <url>/2023/01/03/SpringBoot-%E6%95%B4%E5%90%88Shiro/</url>
    <content><![CDATA[<p>Springboot 整合 Shiro 的基本使用 , MyBatis-Plus, Thymeleaf , 登录认证和授权</p>
<span id="more"></span>

<h4 id="一-Shiro-核心组件"><a href="#一-Shiro-核心组件" class="headerlink" title="一 Shiro 核心组件"></a>一 Shiro 核心组件</h4><ul>
<li>用户</li>
<li>角色</li>
<li>权限</li>
</ul>
<p>给角色赋予权限，给用户赋予角色</p>
<ol>
<li><p>UsernamePasswordToken，Shiro 用来封装用户登录信息，使用用户的登录信息来创建令牌Token。</p>
</li>
<li><p>SecurityManager，Shiro的核心部分，负责安全认证和授权。</p>
</li>
<li><p>Suject，Shiro的一个抽象概念，包含了用户信息。</p>
</li>
<li><p>Realm，开发者自定义的模块，根据项目的需求，验证和授权的逻辑全部写在Realm中。</p>
</li>
<li><p>AuthenticationInfo，用户的角色信息集合，认证时使用。</p>
</li>
<li><p>AuthorzationInfo，角色的权限信息集合，授权时使用。</p>
</li>
<li><p>DefaultWebSecurityManager，安全管理器，开发者自定义的Realm需要注入到DefaultWebSecurityManager进行管理才能生效。 </p>
</li>
<li><p> ShiroFilterFactoryBean，过滤器工厂，Shiro的基本运行机制是开发者定制规则，Shiro去执行，具体的执行操作就是由ShiroFilterFactoryBean创建的一个个Filter对象来完成。 </p>
</li>
</ol>
<table>
<thead>
<tr>
<th align="center">shiro 运行机制</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/03/SpringBoot-%E6%95%B4%E5%90%88Shiro/image-20221230041947207.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h4 id="二shiro-实现登录认证和授权"><a href="#二shiro-实现登录认证和授权" class="headerlink" title="二shiro 实现登录认证和授权"></a>二shiro 实现登录认证和授权</h4><h5 id="1-1-添加依赖"><a href="#1-1-添加依赖" class="headerlink" title="1.1 添加依赖"></a>1.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Shiro 的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="1-2-基本工作"><a href="#1-2-基本工作" class="headerlink" title="1.2 基本工作"></a>1.2 基本工作</h5><ol>
<li><p>数据库设计</p>
<img src="/2023/01/03/SpringBoot-%E6%95%B4%E5%90%88Shiro/image-20230103135826453.png" alt="数据库表设计" style="zoom:200%;"></li>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service 接口及实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    User <span class="title function_">findByUserName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findByUserName</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">QueryWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在启动类记得加上 Mapper包 扫描器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.smart.shiro.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>在测试类看看是否成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(userService.findByUserName(<span class="string">&quot;ls&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="1-2-自定义过滤器"><a href="#1-2-自定义过滤器" class="headerlink" title="1.2 自定义过滤器"></a>1.2 自定义过滤器</h5><p>realm -&gt; UserRealm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection  principalCollection)</span> &#123;</span><br><span class="line"><span class="comment">//        获取当前登录的用户信息</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) subject.getPrincipal();</span><br><span class="line"><span class="comment">//        设置角色</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        roles.add(user.getRole());</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>(roles);</span><br><span class="line"><span class="comment">//        设置权限</span></span><br><span class="line">        info.addStringPermission(user.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUserName(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user,user.getPassword(),getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-3-配置类"><a href="#1-3-配置类" class="headerlink" title="1.3 配置类"></a>1.3 配置类</h5><p>config -&gt; ShiroConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 权限设置</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/main&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/manage&quot;</span>,<span class="string">&quot;perms[manage]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/admin&quot;</span>,<span class="string">&quot;roles[admin]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/index&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line"><span class="comment">//        设置登录页面</span></span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置登录成功的页面</span></span><br><span class="line">        factoryBean.setSuccessUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line"><span class="comment">//        设置未授权页面</span></span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span>UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-4-编写认证和授权规则"><a href="#1-4-编写认证和授权规则" class="headerlink" title="1.4 编写认证和授权规则"></a>1.4 编写认证和授权规则</h5><blockquote>
<p>认证过滤器</p>
</blockquote>
<ol>
<li>anon:无需认证。</li>
<li>authc:必须认证。</li>
<li>authcBasic:需要通过HITPBasic认证。</li>
<li>user:不一定通过认证，只要曾经被Shiro记录即可，比如:记住我。</li>
</ol>
<blockquote>
<p>授权过滤器</p>
</blockquote>
<ol>
<li>perms:必须拥有某个权限才能访问。</li>
<li>role:必须拥有某个角色才能访问。</li>
<li>port:请求的端口必须是指定值才可以。</li>
<li>rest:请求必须基于RESTful，POST、PUT、GET、DELETE。</li>
<li>ssl:必须是安全的URL请求，协议HIIPS。</li>
</ol>
<h5 id="1-5-前端控制器"><a href="#1-5-前端控制器" class="headerlink" title="1.5 前端控制器"></a>1.5 前端控制器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirect</span><span class="params">(<span class="meta">@PathVariable(&quot;url&quot;)</span> String url)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span>&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="comment">// 获取用户名</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) subject.getPrincipal();</span><br><span class="line">            subject.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/unauth&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">unauth</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;未授权,无法访问!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        subject.logout();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-6-创建页面"><a href="#1-6-创建页面" class="headerlink" title="1.6 创建页面"></a>1.6 创建页面</h5><p>创建3个页面，main.html、manage.html、adminhtml 访问权限如下:</p>
<ol>
<li><p>必须登录才能访问main.html</p>
</li>
<li><p>当前用户必须拥有manage授权才能访问manage.html</p>
</li>
<li><p>当前用户必须拥有admin 角色才能访问adminr.html</p>
</li>
<li><p>index.html 首页</p>
</li>
<li><p>login.html 登录页面</p>
</li>
</ol>
<ul>
<li><p>index</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.user != null&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.username&#125;+&#x27;欢迎回来&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>login</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="1-7-密码加密"><a href="#1-7-密码加密" class="headerlink" title="1.7 密码加密"></a>1.7 密码加密</h5><p>在 <code>ShiroConfig</code> 配置类中重写方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CredentialsMatcher <span class="title function_">getCredentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">测试的时候把密码加密后存入数据库</span></span><br><span class="line"><span class="comment"><span class="doctag">@org</span>.junit.jupiter.api.Test</span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        Md5Hash md5Hash = new Md5Hash(&quot;123&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;md5Hash = &quot; + md5Hash);</span></span><br><span class="line"><span class="comment">        SimpleHash md5 = new SimpleHash(&quot;MD5&quot;, &quot;123&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(md5);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h4 id="三-Shiro-整合-Thymeleaf"><a href="#三-Shiro-整合-Thymeleaf" class="headerlink" title="三 Shiro 整合 Thymeleaf"></a>三 Shiro 整合 Thymeleaf</h4><h5 id="3-1-添加依赖"><a href="#3-1-添加依赖" class="headerlink" title="3.1 添加依赖"></a>3.1 添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3-2-添加ShiroDialect"><a href="#3-2-添加ShiroDialect" class="headerlink" title="3.2 添加ShiroDialect"></a>3.2 添加ShiroDialect</h5><p><code>ShiroConfig</code> 配置类添加 <code>ShiroDialect</code> , 注册进Spring 容器中去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-3-index页面设置"><a href="#3-3-index页面设置" class="headerlink" title="3.3 index页面设置"></a>3.3 index页面设置</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/admin&quot;</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>hasPermission=&quot;manage&quot;</code>  有这个权限才展示</li>
<li><code>hasRole=&quot;admin&quot;</code> 有这个角色才展示</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/2022/12/31/Shiro/</url>
    <content><![CDATA[<p>2022最后一天了, 一年又一年, 2022不顺再见 , 2023新的一年, 身体健康, 万事大吉, 心想事成, 好运连连。</p>
<span id="more"></span>

<p>Shiro 两大功能 : </p>
<ul>
<li>认证</li>
<li>授权</li>
</ul>
<h4 id="一-Shiro-简介"><a href="#一-Shiro-简介" class="headerlink" title="一 Shiro 简介"></a>一 Shiro 简介</h4><h5 id="1-1-功能"><a href="#1-1-功能" class="headerlink" title="1.1 功能"></a>1.1 功能</h5><p>Apache Shiro是一个开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架具有直观、易用等特性，同时也能提供健壮的安全性，虽然它的功能不如SpringSecurity那么强大，但是在普通的项目中也够用了。 </p>
<p>Apache Shiro是一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。Apache Shiro的首要目标是易于使用和理解。安全有时候是很复杂的，甚至是痛苦的，但它没有 必要这样。框架应该尽可能掩盖复杂的地方，露出一个干净而直观的API，来简化开发人员在应用程序安 全上所花费的时间。 </p>
<p>以下是Apache Shiro 可所做的事情： </p>
<ol>
<li><p>验证用户来核实他们的身份（登录） </p>
</li>
<li><p>对用户执行访问控制，如：判断用户是否被分配了一个确定的安全角色；判断用户是否被允许做某事（授权） </p>
</li>
<li><p>在任何环境下使用Session API，即使没有Web容器 </p>
</li>
<li><p>在身份验证，访问控制期间或在会话的生命周期，对事件作出反应 </p>
</li>
<li><p>聚集一个或多个用户安全数据的数据源，并作为一个单一的复合用户“视图” </p>
</li>
<li><p>单点登录（SSO）功能 </p>
</li>
<li><p>为没有关联到登录的用户启用”Remember Me”服务等等</p>
</li>
</ol>
<p>Apache Shiro是一个拥有许多功能的综合性的程序安全框架。</p>
<h5 id="1-2-Shiro-安全框架"><a href="#1-2-Shiro-安全框架" class="headerlink" title="1.2 Shiro 安全框架"></a>1.2 Shiro 安全框架</h5><p>Shiro中有四大基石——身份验证，授权，会话管理和加密。 </p>
<ol>
<li><p><code>Authentication</code>：有时也简称为“登录”，这是一个证明用户是谁的行为。 </p>
</li>
<li><p><code>Authorization</code>：访问控制的过程，也就是决定“谁”去访问“什么”。 </p>
</li>
<li><p><code>Session Management</code>：管理用户特定的会话，即使在非Web 或EJB 应用程序。 </p>
</li>
<li><p><code>Cryptography</code>：通过使用加密算法保持数据安全同时易于使用。 </p>
</li>
</ol>
<p>除此之外，Shiro也提供了额外的功能来解决在不同环境下所面临的安全问题，尤其是以下这些： </p>
<ol>
<li>Web Support：Shiro的web支持的API能够轻松地帮助保护Web应用程序。 </li>
<li>Caching：缓存是Apache Shiro中的第一层公民，来确保安全操作快速而又高效。 </li>
<li>Concurrency：Apache Shiro利用它的并发特性来支持多线程应用程序。 </li>
<li>Testing：测试支持的存在来帮助你编写单元测试和集成测试。 </li>
<li>“Run As”：一个允许用户假设为另一个用户身份（如果允许）的功能，有时候在管理脚本很有用。 </li>
<li>“Remember Me”：在会话中记住用户的身份，这样用户只需要在强制登录时候登录。 </li>
</ol>
<p><strong>Shiro核心组件</strong></p>
<ol>
<li>UsernamePasswordToken，Shiro用来封装用户登录信息，使用用户的登录信息来创建令牌Token,</li>
<li>SecurityManager，Shiro的核心部分，负责安全认证和授权。</li>
<li>Suject，Shiro的一个抽象概念，包含了用户信息。</li>
<li>Realm，开发者自定义的模块，根据项目的需求，验证和授权的逻辑全部写在Realm中。</li>
<li>Authenticationinfo，用户的角色信息集合，认证时使用。</li>
<li>Authorzationlnfo，角色的权限信息</li>
<li>DefaultWebSecurityDManager，安全管理器，开发者自定义的Realm需要注入到DefaultWebSecurityDManager进行管理才能生效</li>
<li>ShiroFilterFactoryBean，过滤器工厂，Shiro 的基本运行机制是开发者定制规则，Shiro,去执行，具体的执行操作就是由ShiroFilterFactoryBean创建的一个个 Filter对象来完成。</li>
</ol>
<h4 id="二-Shiro-登录案例"><a href="#二-Shiro-登录案例" class="headerlink" title="二 Shiro 登录案例"></a>二 Shiro 登录案例</h4><h5 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h5><ol>
<li><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    这个是连接 Spring 和 Mybatis 的桥梁--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">db.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.url</span>=<span class="string">jdbc:mysql:///test01?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.maxWait</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">db.initialSize</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">db.maxActive</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">db.minIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure></li>
<li><p>SSM 配置的基础上增加 Shiro 的配置 , Spring 的 applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    开始配置 MyBatis</span></span><br><span class="line"><span class="comment">        1. 配置 SqlSessionFactory</span></span><br><span class="line"><span class="comment">        2. 配置包扫描 （扫描Mapper接口）</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置 SqlSessionFactoryBean 的最终目的 ， 是为了获取SqlSessionFactory 的实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        给指定包下的类取别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.model&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper.xml 文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                classpath*:com/smart/shiro/mapper/*.xml</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        配置 mapper 接口的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.smart.shiro.mapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    shiro 的配置</span></span><br><span class="line"><span class="comment">    1. 配置 Realm</span></span><br><span class="line"><span class="comment">    2. 配置 SecurityManager</span></span><br><span class="line"><span class="comment">    3. 配置过滤器链</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置 SecurityManager--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置登录页面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置成功默认的跳转地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截规则</span></span><br><span class="line"><span class="comment">            /login=anon 表示可以匿名访问</span></span><br><span class="line"><span class="comment">            /**=authc 表示其他路径都要认证才能访问</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">			注意: 按顺序写,有权限或者权限多放前面,权限少或无权限放后面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springmvc 的 spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.smart.shiro&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>model 的 User 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>servlet 的 web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置一个代理过滤器:所谓的代理过滤器，没有具体的业务，就是将当前请求拦截下来，并且交给与他同名的一个Bean去处理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span><span class="comment">&lt;!--这里的名字一定要与applicationContext 的Shiro Bean配置的一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>jsp 登录页面 和 成功页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;color: red&quot;</span>&gt;$&#123;error&#125;&lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/s/doLogin&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt; &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt; &lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="2-2-登录代码"><a href="#2-2-登录代码" class="headerlink" title="2.2 登录代码"></a>2.2 登录代码</h5><ul>
<li><p>mapper 接口 和 xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.smart.shiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.smart.shiro.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>controller </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(String name, String password, Model model)</span>&#123;</span><br><span class="line"><span class="comment">//        获取当前用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(name, password);</span><br><span class="line">            <span class="comment">// 执行登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException |IncorrectCredentialsException e) &#123;</span><br><span class="line">            <span class="comment">// 用户名或者密码写错, 都进到这个里边来</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码输入错误,登录失败&quot;</span>);</span><br><span class="line">            <span class="comment">// 登录失败,回到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 各种其他原因</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>realm </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在用户登录的过程中, 会自动调用到这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 参数中保存的实际上就是用户登录时候输入的用户名密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是从数据库中查询到的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"><span class="comment">//        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span></span><br><span class="line">        <span class="comment">// 获取用户登录时候输入的用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((UsernamePasswordToken) token).getUsername();</span><br><span class="line">        <span class="comment">// 拿到用户名,就可以去数据库中查询当前用户信息了</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明用户名写错了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名写错了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        1. 登陆用户名 2. 从数据库中查询出来的用户密码 3.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意点</strong></p>
<table>
<thead>
<tr>
<th align="center">AuthenticatingRealm及子类</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221228232811039.png" alt="image-20221228232811039" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>用到角色授权就要用到它的子类了。</p>
<h5 id="2-3-登录流程"><a href="#2-3-登录流程" class="headerlink" title="2.3 登录流程"></a>2.3 登录流程</h5><table>
<thead>
<tr>
<th align="center">登录流程图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221230041947207.png" alt="image-20221230041947207" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>经过如下几个步骤 :</p>
<ol>
<li>应用程序代码调用Subject.login方法，传递创建好的包含终端用户的Principals(身份)和 Credentials(凭证)的AuthenticationToken实例(即上文例子中的UsernamePasswordToken)。 </li>
<li> Subject实例，通常是DelegatingSubject（或子类）委托应用程序的SecurityManager通过调用 securityManager.login(token)开始真正的验证工作(在DelegatingSubject类的login方法中打断点即可看到)。</li>
<li>SubjectManager作为一个基本的“保护伞”的组成部分，接收token以及简单地委托给内部的 Authenticator实例通过调用authenticator.authenticate(token)。这通常是一个 ModularRealmAuthenticator实例，支持在身份验证中协调一个或多个Realm实例。 ModularRealmAuthenticator本质上为Apache Shiro 提供了PAM-style 范式（其中在PAM 术语中每个Realm 都是一个’module’）。 </li>
<li> 如果应用程序中配置了一个以上的Realm，ModularRealmAuthenticator实例将利用配置好的 AuthenticationStrategy来启动Multi-Realm认证尝试。在Realms 被身份验证调用之前，期间和以 后，AuthenticationStrategy被调用使其能够对每个Realm的结果作出反应。如果只有一个单一的 Realm 被配置，它将被直接调用，因为没有必要为一个单一Realm的应用使用 AuthenticationStrategy。 </li>
<li>每个配置的Realm用来帮助看它是否支持提交的AuthenticationToken。如果支持，那么支持 Realm的getAuthenticationInfo方法将会伴随着提交的token被调用。</li>
</ol>
<h5 id="2-4-Realm"><a href="#2-4-Realm" class="headerlink" title="2.4 Realm"></a>2.4 Realm</h5><p>根据Realm文档上的解释，Realms担当Shiro和你的应用程序的安全数据之间的“桥梁”或“连接器”。当它 实际上与安全相关的数据如用来执行身份验证（登录）及授权（访问控制）的用户帐户交互时，Shiro从 一个或多个为应用程序配置的Realm 中寻找许多这样的东西。在这个意义上说，<strong>Realm</strong> <strong>本质上是一个特</strong> <strong>定安全的DAO</strong>：它封装了数据源的连接详细信息，使Shiro 所需的相关的数据可用。当配置Shiro 时，必须指定至少一个Realm 用来进行身份验证和/或授权。SecurityManager可能配置多个Realms，但至少有一个是必须的。Shiro 提供了立即可用的Realms 来连接一些安全数据源（即目录），如LDAP，关 系数据库（JDBC），文本配置源，像INI 及属性文件，以及更多。你可以插入你自己的Realm 实现来代 表自定义的数据源，如果默认地Realm不符合你的需求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">implements</span> <span class="title class_">Realm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyRealm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(AuthenticationToken token)</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> token <span class="keyword">instanceof</span> UsernamePasswordToken;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> AuthenticationInfo <span class="title function_">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span></span><br><span class="line">    <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(((<span class="type">char</span>[]) token.getCredentials()));</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> token.getPrincipal().toString();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;sang&quot;</span>.equals(username)) &#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;123&quot;</span>.equals(password)) &#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncorrectCredentialsException</span>(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username, password, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义Realm实现 Realm接口，该接口中有三个方法，第一个getName方法用来获取当前Realm的名 字，第二个supports方法用来判断这个realm所支持的token，这里我假设值只支持 UsernamePasswordToken类型的token，第三个getAuthenticationInfo方法则进行了登陆逻辑判断，从token中取出用户的用户名密码等，进行判断，当然，我这里省略掉了数据库操作，当登录验证出现问题时，抛异常即可，这里抛出的异常，将在执行登录那里捕获到（注意，由于我这里定义的MyRealm是实现了Realm接口，所以这里的用户名和密码都需要我手动判断是否正确。</p>
<h4 id="三-Shiro-密码"><a href="#三-Shiro-密码" class="headerlink" title="三 Shiro 密码"></a>三 Shiro 密码</h4><h5 id="3-1-密码加密"><a href="#3-1-密码加密" class="headerlink" title="3.1 密码加密"></a>3.1 密码加密</h5><p>编码方式:</p>
<ul>
<li>编码 (Base64)</li>
<li>加密<ul>
<li>可逆加密 (可以根据密文解析出明文) :<ul>
<li>对称加密:加密密钥和解密密钥一致，DES、3DES、AES</li>
<li>非对称加密:公钥负责加密、私钥负责解密。RSA</li>
</ul>
</li>
<li>不可逆加密 (根据密文无法解析出明文)<ul>
<li>MD5\SHA 等都是不可逆加密</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Shiro 中如何加密</strong></p>
<p>Shiro中对以上两种散列算法都提供了支持，对于MD5，Shiro中生成消息摘要的方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(<span class="string">&quot;123&quot;</span>, <span class="literal">null</span>, <span class="number">1024</span>);</span><br></pre></td></tr></table></figure>

<p>第一个参数是要生成密码的明文，第二个参数密码的盐值，第三个参数是生成消息摘要的迭代次数。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        MD5 加密,参数就是明文密码</span></span><br><span class="line">        <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;md5Hash = &quot;</span> + md5Hash);</span><br><span class="line">        <span class="type">SimpleHash</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;MD5&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(md5);</span><br><span class="line"><span class="comment">//用户注册的时候，前端提交上来的是123，将123用下面的代码加密，然后将加密后的结果存入到数据库中</span></span><br><span class="line"><span class="comment">//        SHA</span></span><br><span class="line">        <span class="type">Sha512Hash</span> <span class="variable">sha512Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sha512Hash</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(sha512Hash);</span><br><span class="line">        <span class="type">SimpleHash</span> <span class="variable">simpleHash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;SHA-512&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(simpleHash);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候把数据库中的密码明文改成加密密钥, 在登录的时候输入明文密码就登录失败了! 此时,要在代码配置一下。自定义的Realm 是继承了 <code>AuthenticatingRealm</code> 类 , 这个类中的 <code>getAuthenticationInfo</code> 方法就有密码校验功能。</p>
<img src="/2022/12/31/Shiro/image-20221227051026180.png" alt="image-20221227051026180" style="zoom:200%;">

<img src="/2022/12/31/Shiro/image-20221227051751865.png" alt="image-20221227051751865" style="zoom:200%;">



<p><strong>方式一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CredentialsMatcher <span class="title function_">getCredentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在用户登录的过程中, 会自动调用到这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 参数中保存的实际上就是用户登录时候输入的用户名密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是从数据库中查询到的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"><span class="comment">//        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span></span><br><span class="line">        <span class="comment">// 获取用户登录时候输入的用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((UsernamePasswordToken) token).getUsername();</span><br><span class="line">        <span class="comment">// 拿到用户名,就可以去数据库中查询当前用户信息了</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明用户名写错了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名写错了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        1. 登陆用户名 2. 从数据库中查询出来的用户密码 3.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>方式二</strong></p>
<p>如果在<code>applicationContext.xml</code> 配置, 在自定义的Realm 的类注释掉 <code>@Component</code>, 让它未主测进Spring容器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.smart.shiro.realm.MyRealm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;credentialsMatcher&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;bean class=&quot;org.apache.shiro.authc.credential.Md5CredentialsMatcher&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashAlgorithmName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;md5&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/12/31/Shiro/image-20221227053007286.png" alt="image-20221227053007286"></p>
<h5 id="3-2-密码加盐"><a href="#3-2-密码加盐" class="headerlink" title="3.2 密码加盐"></a>3.2 密码加盐</h5><ol>
<li><p>密码为什么要加盐</p>
<p>不管是消息摘要算法还是安全散列算法，如果原文一样，生成密文也是一样的，这样的话，如果两个用户的密码原文一样，存到数据库中密文也就一样了，还是不安全，我们需要做进一步处理，常见解决方案就是加盐。盐从那里来呢？我们可以使用用户id（因为一般情况下，用户id是唯一的），也可以使用一个随机字符，我这里采用第一种方案。</p>
</li>
<li><p>Shiro 中如何实现加盐</p>
<p>shiro中加盐的方式很简单，在用户注册时生成密码密文时，就要加入盐，如下几种方式：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        第二个参数是密码的盐</span></span><br><span class="line"><span class="comment">//        第三个参数密码迭代次1024</span></span><br><span class="line">        <span class="type">Md5Hash</span> <span class="variable">kang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;kang&quot;</span>,<span class="number">1024</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;kang = &quot;</span> + kang);</span><br><span class="line">        <span class="type">SimpleHash</span> <span class="variable">simpleHash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;md5&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;lisi&quot;</span>,<span class="number">1024</span>);</span><br><span class="line">        System.out.println(simpleHash);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个就是用户注册时密码加密加盐,然后存到数据库中去。</p>
<p>在自定义的 Realm 类代码中配置一下盐和迭代次数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CredentialsMatcher <span class="title function_">getCredentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        matcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((UsernamePasswordToken) token).getUsername();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名写错了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取密码的盐</span></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">salt</span> <span class="operator">=</span> SimpleByteSource.Util.bytes(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),salt,getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以了,输入两个用户相同一样的明文密码进行测试,很ok。</p>
<h4 id="四-JdbcRealm"><a href="#四-JdbcRealm" class="headerlink" title="四 JdbcRealm"></a>四 JdbcRealm</h4><p>首先来看看 JdbcRealm 源码的核心代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="comment">// 默认认证查询</span></span><br><span class="line">     <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_AUTHENTICATION_QUERY</span> <span class="operator">=</span> <span class="string">&quot;select password from users where username = ?&quot;</span>;</span><br><span class="line">    <span class="comment">// 查询密码和盐</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SALTED_AUTHENTICATION_QUERY</span> <span class="operator">=</span> <span class="string">&quot;select password, password_salt from users where username = ?&quot;</span>;</span><br><span class="line">    <span class="comment">// 根据用户名查询角色</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_USER_ROLES_QUERY</span> <span class="operator">=</span> <span class="string">&quot;select role_name from user_roles where username = ?&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用户权限</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PERMISSIONS_QUERY</span> <span class="operator">=</span> <span class="string">&quot;select permission from roles_permissions where role_name = ?&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Realm 的核心方法</span></span><br><span class="line">        <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">upToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> upToken.getUsername();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Null username is invalid</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccountException</span>(<span class="string">&quot;Null usernames are not allowed by this realm.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">SimpleAuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (saltStyle) &#123;</span><br><span class="line">            <span class="keyword">case</span> NO_SALT:</span><br><span class="line">                password = getPasswordForUser(conn, username)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CRYPT:</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> separate password and hash from getPasswordForUser[0]</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConfigurationException</span>(<span class="string">&quot;Not implemented yet&quot;</span>);</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">            <span class="keyword">case</span> COLUMN:</span><br><span class="line">                String[] queryResults = getPasswordForUser(conn, username);</span><br><span class="line">                password = queryResults[<span class="number">0</span>];</span><br><span class="line">                salt = queryResults[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EXTERNAL:</span><br><span class="line">                password = getPasswordForUser(conn, username)[<span class="number">0</span>];</span><br><span class="line">                salt = getSaltForUser(username);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;No account found for user [&quot;</span> + username + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            info = <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username, password.toCharArray(), getName());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (salt != <span class="literal">null</span>) &#123;</span><br><span class="line">            	<span class="keyword">if</span> (saltStyle == SaltStyle.COLUMN &amp;&amp; saltIsBase64Encoded) &#123;</span><br><span class="line">                    info.setCredentialsSalt(ByteSource.Util.bytes(Base64.decode(salt)));</span><br><span class="line">            	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    info.setCredentialsSalt(ByteSource.Util.bytes(salt));</span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;There was a SQL error while authenticating user [&quot;</span> + username + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (log.isErrorEnabled()) &#123;</span><br><span class="line">                log.error(message, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Rethrow any SQL errors as an authentication exception</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(message, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>JdbcRealm 不需要自己再重写代码, 直接配置即可使用。</p>
<p>先注释掉原来的自定义的Realm, 接着在<strong>applicationContext.xml</strong> 配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.realm.jdbc.JdbcRealm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcRealm&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        saltStyle 密码盐的模式 : COLUMN 表示以数据库存的作为盐</span></span><br><span class="line"><span class="comment">                                     EXTERNAL 表示以用户名作为盐</span></span><br><span class="line"><span class="comment">                                     NO_SALT  表示不用盐</span></span><br><span class="line"><span class="comment">                                     CRYPT    空的,没有实现</span></span><br><span class="line"><span class="comment">                                     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saltStyle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXTERNAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        查询自定义的数据库表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;select password from user where name =?&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;credentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashAlgorithmName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;md5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashIterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">JdbcRealm</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221228221409748.png" alt="image-20221228221409748" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>如果盐的模式是数据库的列名的话 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    &lt;bean class=<span class="string">&quot;org.apache.shiro.realm.jdbc.JdbcRealm&quot;</span> id=<span class="string">&quot;jdbcRealm&quot;</span>&gt;</span><br><span class="line">&lt;!--        COLUMN 表示以数据库专门一列存的盐</span><br><span class="line"> --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;saltStyle&quot;</span> value=<span class="string">&quot;COLUMN&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="line">&lt;!--        默认是 <span class="literal">true</span>--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;saltIsBase64Encoded&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">&lt;!--        查询自定义的数据库表</span><br><span class="line">            根据JdbcRealm 源码,按照源码格式写</span><br><span class="line">--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;authenticationQuery&quot;</span> value=<span class="string">&quot;select password,name from user where name =?&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;credentialsMatcher&quot;</span>&gt;</span><br><span class="line">            &lt;bean class=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;hashAlgorithmName&quot;</span> value=<span class="string">&quot;md5&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;hashIterations&quot;</span> value=<span class="string">&quot;1024&quot;</span>/&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<h4 id="五-多Realm-认证策略"><a href="#五-多Realm-认证策略" class="headerlink" title="五 多Realm 认证策略"></a>五 多Realm 认证策略</h4><h5 id="5-1-认证策略"><a href="#5-1-认证策略" class="headerlink" title="5.1 认证策略"></a>5.1 认证策略</h5><p>前面创建了一个MyRealm，也用过JdbcRealm，但都是单独使用的，现在我想将两个一 起使用，只需要修改配置即可 。</p>
<p>首先准备两张数据库表分别使用不同的 Realm , 自定义的Realm 取消注释 , 接下来在<code>applicationContext.xml</code> 进行设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.realm.jdbc.JdbcRealm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saltStyle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;COLUMN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saltIsBase64Encoded&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;select password,name from user2 where name =?&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;credentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashAlgorithmName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;md5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashIterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;realm&quot; ref=&quot;jdbcRealm&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticator&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.pam.ModularRealmAuthenticator&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realms&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;jdbcRealm&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                三种认证策略:</span></span><br><span class="line"><span class="comment">                FirstSuccessfulStrategy:至少有一个 Realm 认证成功，就算认证成功，在认证的过程中，有一个</span></span><br><span class="line"><span class="comment">                stopAfterFirstSuccess 属性可以设置，如果这个属性设置为true，表示一旦认证成功了，后续的 realm 就都不再执行认证了</span></span><br><span class="line"><span class="comment">                AtleastoneSuccessfulstrategy:至少有一个Realm 认证成功，就算认证成功，但是</span></span><br><span class="line"><span class="comment">                即使已经认证成功</span></span><br><span class="line"><span class="comment">                了，也还是会去执行剩下的realm</span></span><br><span class="line"><span class="comment">                Allsuccessfulstrategy:所有的realm 都认证成功，才算成功</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticationStrategy&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.pam.FirstSuccessfulStrategy&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stopAfterFirstSuccess&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时候,分别登录不同数据表的用户只要认证成功都可以登录。</p>
<h5 id="5-2-注销"><a href="#5-2-注销" class="headerlink" title="5.2 注销"></a>5.2 注销</h5><p>注销登录比较简单，就一个过滤器，按如下方式配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置注销登录的重定向地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;logout&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.filter.authc.LogoutFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        设置注销成功之后的重定向地址--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;redirectUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注销登录 /logout=logout--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /rm=user</span><br><span class="line">                /logout=logout</span><br><span class="line">                /admin/**=roles[&quot;admin&quot;]</span><br><span class="line">                /user/**=roles[&quot;user&quot;]</span><br><span class="line">                /book=perms[&quot;book:add&quot;]</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过get请求访问 /logout 即可注销登录。 </p>
<table>
<thead>
<tr>
<th align="center">shiro过滤器一览</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221228225721003.png" alt="image-20221228225721003"></td>
</tr>
</tbody></table>
<h5 id="5-3-会话管理"><a href="#5-3-会话管理" class="headerlink" title="5.3 会话管理"></a>5.3 会话管理</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                禁止将 jsessionid 放到游览器地址栏中--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionIdUrlRewritingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;realm&quot; ref=&quot;jdbcRealm&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticator&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.pam.ModularRealmAuthenticator&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realms&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;jdbcRealm&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这就解决了游览器地址栏出现jsessionid的情况了。</p>
<h5 id="5-4-HttpBasic-认证"><a href="#5-4-HttpBasic-认证" class="headerlink" title="5.4 HttpBasic 认证"></a>5.4 HttpBasic 认证</h5><p>shiro中也提供了基于http协议的认证，当然，这种认证也得有数据库的辅助，数据配置和前文一样，我 们只需要修改一个配置即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /**=authcBasic</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个表示所有的页面都要经过基于http的认证。此时我们打开任意一个页面，认证方式如下：</p>
<p><img src="/2022/12/31/Shiro/image-20221229155936241.png" alt="image-20221229155936241"></p>
<p><img src="/2022/12/31/Shiro/image-20221229160216430.png" alt="image-20221229160216430"></p>
<p>这个登录方式主要是将认证信息放在响应头,登录成功之后没办法注销的, 只有重启游览器即可。</p>
<h5 id="5-5-默认过滤器登录"><a href="#5-5-默认过滤器登录" class="headerlink" title="5.5 默认过滤器登录"></a>5.5 默认过滤器登录</h5><p>除了前面的两种登录方式外, shiro 还提供第三种登录方式 , <code>FormAuthenticationFilter</code></p>
<ol>
<li><p>把login.jsp页面进行简单改造： </p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;error&#125;</span><br><span class="line">&lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;用户名：&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;密码：&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    	&lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>登录处理 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	get /login</span></span><br><span class="line"><span class="comment">	post /login提交登录数据，但是注意，登录数据其实不是提交到这个接口的，登录数据在到达这个接口之前，已经被过滤器处理了。提交登录数据的请求，在 FormAuthenticationFilter过滤器中就已经被处理了,它不会来到当前接口的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot; /login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpServletRequest req,Model model)</span> &#123;</span><br><span class="line">        <span class="comment">//获取登录失败的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shiroLoginFailure</span> <span class="operator">=</span> (String) req.getAttribute(FormAuthenticationFilter.DEFAULT_ERROR_KEY_ATTRIBUTE_NAME);</span><br><span class="line">        <span class="keyword">if</span> (UnknownAccountException.class.getName( ).equals(shiroLoginFailure)) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;账户不存在!&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (IncorrectCredentialsException.class.getName().equals(shiroLoginFailure)) &#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;密码不正确!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1ogin&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>做完这两步之后，我们还要修改<code>shiroFilter</code> 中的filterChainDefinitions属性，要设置 /login 接口可以匿名访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        /login=anon</span><br><span class="line">        /logout=logout</span><br><span class="line">        /**=authc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="5-6-RememberMe-登录"><a href="#5-6-RememberMe-登录" class="headerlink" title="5.6 RememberMe 登录"></a>5.6 RememberMe 登录</h5><ul>
<li><p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个接口只有通过用户名和密码才能访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个可以通过rememberMe 的方式登录访问</span></span><br><span class="line"><span class="comment">     * 理论上来说，rememberMe登录的安全性，不如用户名密码登录, 后者安全性高,也可以访问这个接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">rememberMe</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello rememberMe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>shiroFilter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	/rm=user表示这个接口只要存在用户对象，就能访问（用户对象可能是使用用户名+密码登录后产生的，也可能是使用rememberMe登录后产生的)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /rm=user</span><br><span class="line">                /logout=logout</span><br><span class="line">                /admin/**=roles[&quot;admin&quot;]</span><br><span class="line">                /user/**=roles[&quot;admin&quot;,&quot;user&quot;]</span><br><span class="line">                /book=perms[&quot;book:add&quot;]</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>登录接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping(&quot;/doLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doLogin</span><span class="params">(String name, String password, Model model)</span>&#123;</span><br><span class="line"><span class="comment">//        获取当前用户</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(name, password);</span><br><span class="line">            <span class="comment">// 设置 RememberMe 登录</span></span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 执行登录</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException |IncorrectCredentialsException e) &#123;</span><br><span class="line">            <span class="comment">// 用户名或者密码写错, 都进到这个里边来</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码输入错误,登录失败&quot;</span>);</span><br><span class="line">            <span class="comment">// 登录失败,回到登录页面</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 各种其他原因</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 登录成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果是第三种登录方式, 使用rememberMe , 先看下它过滤器的源码怎么实现的</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">FormAuthenticationFilter</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221230002436079.png" alt="image-20221230002436079" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>因此 , 只需要在前端页面设置<code>checkbox</code> 按钮 , name为 <code>rememberMe</code>,value 为<code>true</code> 即可。</p>
<h4 id="六-权限"><a href="#六-权限" class="headerlink" title="六 权限"></a>六 权限</h4><h5 id="6-1-角色的配置"><a href="#6-1-角色的配置" class="headerlink" title="6.1 角色的配置"></a>6.1 角色的配置</h5><ol>
<li><p>准备工作</p>
<p>登录成功的页面 <code>index.jsp</code></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/s/admin/hello&quot;</span>&gt;/admin/hello&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/s/user/hello&quot;</span>&gt;/user/hello&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>controller 层 <code>HelloController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具备admin角色的用户可以访问所有接口</span></span><br><span class="line"><span class="comment"> * 具备user角色的用户，只能访问/user/**接口未指定访问角色的接口，只要登录了就能访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>applicationContext.xml</code> 添加拦截配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置 SecurityManager--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置登录页面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置成功默认的跳转地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截规则</span></span><br><span class="line"><span class="comment">            /admin/**=roles[admin]表示只有具备admin角色，才能访问/admin/**</span></span><br><span class="line"><span class="comment">            /user/**=roles[admin,user]表示具备 admin 和 user角色，就可以访问/user/**</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /logout=logout</span><br><span class="line">                /admin/**=roles[&quot;admin&quot;]</span><br><span class="line">                /user/**=roles[&quot;admin&quot;,&quot;user&quot;]</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>applicationContext.xml</code> 继续配置权限的Realm</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                禁止将 jsessionid 放到游览器地址栏中--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionIdUrlRewritingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        权限 的 Realm--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authorizer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authz.ModularRealmAuthorizer&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realms&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myRealm&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;jdbcRealm&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样还不够, 自定义的Realm 还要配置一下 权限的代码配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CredentialsMatcher <span class="title function_">getCredentialsMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        matcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">return</span> matcher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((UsernamePasswordToken) token).getUsername();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名写错了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        获取密码的盐</span></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">salt</span> <span class="operator">=</span> SimpleByteSource.Util.bytes(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(username,user.getPassword(),salt,getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取权限信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals 这里保存了当前登录的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是当前用户的角色和权限信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line"><span class="comment">//        获取当前登录用户的用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"><span class="comment">//        去数据库中查询当前用户的角色以及权限信息</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            roles.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        roles.add(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>(roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的Realm 就完成了角色配置了, 它对应的数据库表是 user , user表中有admin 角色, 所以它可以访问 admin/**。</p>
</li>
</ol>
<p>JdbcRealm 源码已经写好了SQL , 根据用户名去查询角色和权限 , 而且 JdbcRealm 是继承AuthorizingRealm , 本身是有授权的功能。所以使用 JdbcRealm 的话 , 按照源码在数据库中准备好数据库表名及列名。并且给予列名对应值, jdbcRealm 的角色即可使用。</p>
<table>
<thead>
<tr>
<th align="center">JdbcRealm 数据库表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221229114352465.png" alt="image-20221229114352465"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">user_roles</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221229114632223.png" alt="image-20221229114632223" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="6-2-权限的配置"><a href="#6-2-权限的配置" class="headerlink" title="6.2 权限的配置"></a>6.2 权限的配置</h5><p>首先写个接口, 需要有这个权限的用户才可以访问 , 在 HelloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一本书，要调用这个接口，必须具备book : add 这个权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book-add&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接着配置一下shiroFilter , <code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置 SecurityManager--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置登录页面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置成功默认的跳转地址--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        /book=perms[&quot;book:add&quot;] 表示访问 /book 这个地址需要有 book:add 的权限</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /logout=logout</span><br><span class="line">                /admin/**=roles[&quot;admin&quot;]</span><br><span class="line">                /user/**=roles[&quot;admin&quot;,&quot;user&quot;]</span><br><span class="line">                /book=perms[&quot;book:add&quot;]</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义的Realm 还需要配置一下,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line"><span class="comment">//        获取当前登录用户的用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) principals.getPrimaryPrincipal();</span><br><span class="line"><span class="comment">//        去数据库中查询当前用户的角色以及权限信息</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; permissions = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            roles.add(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="comment">// 如果用户名为admin，则分配一个 book : add的权限</span></span><br><span class="line"><span class="comment">//            permissions.add(&quot;book:add&quot;);</span></span><br><span class="line"><span class="comment">//            表示具备针对 book 的所有权限</span></span><br><span class="line"><span class="comment">//            permissions.add(&quot;book:*&quot;);</span></span><br><span class="line"><span class="comment">//            表示具备所有权限</span></span><br><span class="line">            permissions.add(<span class="string">&quot;*:*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        roles.add(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>(roles);</span><br><span class="line">        info.setStringPermissions(permissions);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>自定义的 Realm 的权限就配置完毕了 , JdbcRealm 默认是没有开启权限的查询, 需要自己手动开启 ,</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.realm.jdbc.JdbcRealm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saltStyle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;COLUMN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启权限的查询,默认情况下,没有去数据表中查询权限信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;permissionsLookupEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;saltIsBase64Encoded&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;authenticationQuery&quot;</span> <span class="attr">value</span>=<span class="string">&quot;select password,name from user2 where name =?&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;credentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashAlgorithmName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;md5&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashIterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="center">user_permissions</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2022/12/31/Shiro/image-20221229143655625.png" alt="image-20221229143655625" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="6-2-权限注解"><a href="#6-2-权限注解" class="headerlink" title="6.2 权限注解"></a>6.2 权限注解</h5><p>先在service 层建一个业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions(value = &#123;&quot;book:delete&quot;,&quot;book:remove&quot;&#125;,logical = Logical.OR)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBook</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteBook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>视图层 HelloController 类 , 实现该方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delbook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.deleteBook();</span><br><span class="line">    &#125;persi</span><br></pre></td></tr></table></figure>



<p>权限注解的底层是 AOP , 因此需要配置一下 AOP 。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置一下 AOP ,支持权限注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就可以了 , 在上面的 <code>user_permissions</code> 表的 <code>permission</code> 值改下权限, 反复测试注解是否生效。</p>
<h4 id="七-Shiro-中的-JSP标签"><a href="#七-Shiro-中的-JSP标签" class="headerlink" title="七 Shiro 中的 JSP标签"></a>七 Shiro 中的 JSP标签</h4><p>是对于不同身份的用户，并不是每一个链接都是有效的，点击无效的链接会进入到未授权的页面，这样用户体验并不好，最好能够把不可达的链接自动隐藏起来，同时，我也希望能够方便获取当前登录用户的信息等。</p>
<ul>
<li><p>shiroFilter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shiroFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;securityManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;securityManager&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;loginUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;successUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/index&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filterChainDefinitions&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                /login=anon</span><br><span class="line">                /doLogin=anon</span><br><span class="line">                /rm=user</span><br><span class="line">                /logout=logout</span><br><span class="line">                /admin/**=roles[&quot;admin&quot;]</span><br><span class="line">                /user/**=roles[&quot;user&quot;]</span><br><span class="line">                /book=perms[&quot;book:add&quot;]</span><br><span class="line">                /**=authc</span><br><span class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    &lt;/bean</span><br></pre></td></tr></table></figure></li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello user&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    单纯跳转页面,不需要带参数,可以直接在这里配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/index&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>标签介绍, index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;shiro:guest&gt;</span><br><span class="line">    &lt;%-- 标签只有在当前未登录时显示里边的内容,登陆则不显示 --&gt;</span><br><span class="line">    欢迎[游客]访问!</span><br><span class="line">&lt;/shiro:guest&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;shiro:authenticated&gt;</span><br><span class="line">    &lt;%-- 如果用户是通过用户名+密码的方式认证的，那么这个标签中的内容就会展示出来 --%&gt;</span><br><span class="line">    &lt;%-- 这个表示获取当前登录的用户名 --%&gt;</span><br><span class="line">    &lt;shiro:principal/&gt;</span><br><span class="line">&lt;/shiro:authenticated&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;shiro:user&gt;</span><br><span class="line">    &lt;%-- 用户通过用户名密码的方式登录或者通过rememberWe的方式登录，这个标签中的内容都会显示出来 --%&gt;</span><br><span class="line">    &lt;shiro:principal/&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;shiro:hasRole name=<span class="string">&quot;admin&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/s/admin/hello&quot;</span>&gt;/admin/hello&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line"></span><br><span class="line">&lt;shiro:hasRole name=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/s/user/hello&quot;</span>&gt;/user/hello&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;shiro:authenticated&gt;</span><br><span class="line">    &lt;%--    只有用户名+密码才可以访问--%&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/s/hello&quot;</span>&gt;/hello&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/shiro:authenticated&gt;</span><br><span class="line">&lt;shiro:user&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/s/logout&quot;</span>&gt;注销登录&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/shiro:user&gt;</span><br><span class="line">&lt;%--不具备某个角色--%&gt;</span><br><span class="line">&lt;%--&lt;shiro:lacksRole name=<span class="string">&quot;Manager&quot;</span>&gt;&lt;/shiro:lacksRole&gt;--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="八-shiro-缓存机制"><a href="#八-shiro-缓存机制" class="headerlink" title="八 shiro 缓存机制"></a>八 shiro 缓存机制</h4><ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加配置文件</p>
<p>ehcache的配置文件主要参考官方的配置，在resources目录下创建<code>ehcache.xml</code>文件，内容如下： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里配置的内容叫做缓存策略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir/shiro-spring-sample&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">              </span></span><br><span class="line"><span class="tag">    <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;shiro-activeSessionCache&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eternal</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">diskPersistent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;600&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.shiro.realm.SimpleAccountRealm.authorization&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;600&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在 <code>applicationContext.xml</code> 中简单配置下缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.cache.ehcache.EhCacheManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cacheManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheManagerConfigFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:ehcache.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;securityManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;realm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcRealm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cacheManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先配置 EhCacheManager 类，指定缓存位置，然后在DefaultWebSecurityManager中引入 cacheManager即可，如此之后，缓存就应用上了。 </p>
</li>
</ol>
<h4 id="九-SpringBoot-整合-Shiro"><a href="#九-SpringBoot-整合-Shiro" class="headerlink" title="九 SpringBoot 整合 Shiro"></a>九 SpringBoot 整合 Shiro</h4><ul>
<li><p>创建Springboot 的时候,选择3个基本依赖, Lombok, SpringWeb, Thymeleaf</p>
</li>
<li><p>手动添加 shiro 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发环境搭建</title>
    <url>/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>nodejs 环境搭建 , 安装 axios , ElementUI</p>
<span id="more"></span>

<blockquote>
<p>cli: Command Line 命令行工具，vue-cli就是vue的命令行工具，也称之为脚手架，使用vue-cli提供的各种命令可以拉取、创建、运行我们需要使用到的框架，比如webpack、Element UI、Element Admin等等。那么要想使用vue-cli命令，需要先安装node.js。</p>
</blockquote>
<p>Node.js 是一个javascript运行环境。它让javascript可以<strong>开发后端程序</strong>，实现几乎其他后端语言实现的所有功能，可以与PHP、Java、Python、.NET、<a href="https://so.csdn.net/so/search?q=Ruby&spm=1001.2101.3001.7020">Ruby</a>等后端语言平起平坐。</p>
<p>Nodejs是基于<strong>V8引擎</strong>，V8是Google发布的开源JavaScript引擎，本身就是用于Chrome浏览器的js解释部分，但是Ryan Dahl 把这个V8搬到了服务器上，用于做服务器的软件。</p>
<p>引用网友一句话：node.js就是一个前端觉得写个功能还要等后端捣鼓半天，然后干脆就自己用javascript把后端搞定的一个东西。</p>
<p>不过很多前端开发都是用node的npm 包管理器，做前端开发。</p>
<p><strong>Nodejs语法完全是js语法，只要懂js基础就可以学会Node.js后端开发</strong></p>
<p>Node.js 打破了过去 JavaScript 只能在浏览器中运行的局面。前后端编程环境统一，可以大大降低开发成本。</p>
<h4 id="一-安装-node-js"><a href="#一-安装-node-js" class="headerlink" title="一 安装 node.js"></a>一 安装 node.js</h4><blockquote>
<p>进入官网 <em><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></em></p>
</blockquote>
<p><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221021062520117.jpg"></p>
<p> 根据电脑操作系统，选择相应版本的文件进行下载。 </p>
<p>下载文件后双击进行安装, 基本是一路按 Next , 安装路径可以更改下。安装完之后测试 node.js 是否安装成功, 在dos 窗口中输入”<code>node -v</code>“ 查看版本,如果看到版本, 就表示安装成功。    </p>
<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221021064957572.png" alt="image-20221021064957572" style="zoom: 150%;">



<h4 id="二-安装-cnpm"><a href="#二-安装-cnpm" class="headerlink" title="二 安装 cnpm"></a>二 安装 cnpm</h4><ul>
<li>说明：npm(node package manager)是node.js的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）。</li>
<li>使用npm安装插件：命令提示符执行 npm install <name>。</name></li>
<li> 选装cnpm。因为npm安装插件是从国外服务器下载，受网络影响大，可能会出现异常，如果npm的服务器在中国就好了，于是乐于分享的淘宝团队干了这事。来自官网：“这事一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次，尽量保证与官方服务同步。”</li>
<li>安装命令：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>。</li>
<li>查看版本：输入<code>cnpm -v</code>，可以查看当前cnpm的版本。</li>
<li>之后使用npm 命令时就可以替成 cnpm。</li>
</ul>
<h4 id="三-安装-vue-cli-脚手架构建工具"><a href="#三-安装-vue-cli-脚手架构建工具" class="headerlink" title="三 安装 vue -cli 脚手架构建工具"></a>三 安装 vue -cli 脚手架构建工具</h4><h5 id="3-1-使用如下命令安装-vue-cli"><a href="#3-1-使用如下命令安装-vue-cli" class="headerlink" title="3.1 使用如下命令安装 vue-cli"></a>3.1 使用如下命令安装 vue-cli</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># cnpm install -g @vue/cli</span></span><br></pre></td></tr></table></figure>

<ul>
<li>npm： 使用node.js的命令</li>
<li>install： 安装</li>
<li>vue-cli： 要安装的vue-cli</li>
<li>-g： 全局安装</li>
</ul>
<h5 id="3-2-检查是否安装成功"><a href="#3-2-检查是否安装成功" class="headerlink" title="3.2 检查是否安装成功"></a>3.2 检查是否安装成功</h5><p>安装完成之后输入 <code>vue -V</code> (注意这里是大写的 V ),如果出现版本号, 则说明安装成功。</p>
<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221021070810856.png" alt="image-20221021070810856" style="zoom:200%;">



<h4 id="四-创建基于-webpack-模板的新项目"><a href="#四-创建基于-webpack-模板的新项目" class="headerlink" title="四 创建基于 webpack 模板的新项目"></a>四 创建基于 webpack 模板的新项目</h4><p>就像maven一样，vue为我们提供了一些官方项目骨架。使用<code>vue list</code>命令可以列出当前官方提供的命令，可以使用这些骨架来快速搭建出项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue list</span><br></pre></td></tr></table></figure>



<p>要创建项目, 首先要选定目录 , 然后在命令行中把目录转到选定的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack my-app</span><br></pre></td></tr></table></figure>

<ul>
<li>webpack: 骨架名称</li>
<li>my-app: 为自定义的项目名称</li>
<li>自定义的项目名称中不能包含大写字母</li>
</ul>
<table>
<thead>
<tr>
<th><strong>过程中会出现如下界面，需要手动操作。</strong></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.png"></td>
</tr>
<tr>
<td><strong>出现如下界面，表示安装成功。</strong></td>
</tr>
<tr>
<td><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/12.png"></td>
</tr>
</tbody></table>
<p>输入 <code>cd my-project1</code> 切换到项目目录 , 接着再输入 <code>npm run dev</code>运行项目。</p>
<p> 运行成功以后，根据提示，在浏览器中输入<a href="http://localhost:8080,浏览器显示的页面如下：">http://localhost:8080,浏览器显示的页面如下：</a> </p>
<p> <img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2022031315224675.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>项目目录及各目录介绍</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/15.png"></td>
</tr>
<tr>
<td><strong>IDEA 安装 vue 插件</strong></td>
</tr>
<tr>
<td><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/21.png"></td>
</tr>
</tbody></table>
<blockquote>
<p>在idea中配置，让idea能够操作.vue文件</p>
</blockquote>
<p><strong>vue ui</strong></p>
<blockquote>
<p>windows 桌面 按 win+r 输入 <code>vue ui</code>打开游览器图形化桌面 创建vue 工程</p>
</blockquote>
<p><strong>IDEA 创建 Vue 项目</strong></p>
<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/01.png" style="zoom:200%;">

<p><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/02.png"></p>
<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/03.png" style="zoom:200%;">

<p><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/04.png"></p>
<p><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/05.png"></p>
<p><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/06.png"></p>
<h4 id="六-Element-安装"><a href="#六-Element-安装" class="headerlink" title="六 Element 安装"></a>六 Element 安装</h4><table>
<thead>
<tr>
<th align="center">cnpm i element-ui -S</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/07.png"></td>
</tr>
<tr>
<td align="center"><strong>package.json 添加了配置</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/09.png" style="zoom:200%;"></td>
</tr>
<tr>
<td align="center"><strong>main.js导入并引入</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4545.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h4 id="七-axios-安装"><a href="#七-axios-安装" class="headerlink" title="七 axios 安装"></a>七 axios 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i axios -S</span><br></pre></td></tr></table></figure>

<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.png" style="zoom:200%;">



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i vue-axios -S</span><br></pre></td></tr></table></figure>

<img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/14.png" style="zoom:200%;">

<table>
<thead>
<tr>
<th align="center">查看是否安装成功</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/16.png" style="zoom:200%;"></td>
</tr>
<tr>
<td align="center"><strong>导入并引入</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/06/Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/888.png" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h4 id="八-跨域配置"><a href="#八-跨域配置" class="headerlink" title="八 跨域配置"></a>八 跨域配置</h4><p>config -&gt; CorsConfiguration </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(CorsConfiguration.ALL)</span><br><span class="line">                .allowedMethods(CorsConfiguration.ALL)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者直接在controller 类上加上  <code>@CrossOrigin</code> 注解。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2022/12/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>你不努力就会被社会淘汰 , 但只要你努力 ,过几年才会被淘汰。</p>
<span id="more"></span>

<p>关于明天的事 , 后天就知道了</p>
<p>情况就是这个情况, 具体是什么情况还得看情况</p>
<p>复制别人的人生没有意义 ,</p>
<p>分不清「梦想」和「欲望」是浪费时间 ,</p>
<p>自大或自卑总让人们无法看清真实客观的自己 , </p>
<p>偏离内心越来越远 , </p>
<p>总是不满足总是有所图 ,</p>
<p>乐此不疲一意孤行直到透支所有动力 , </p>
<p>看见了吗 ,</p>
<p>走在街上的有多少是活着的尸体 , </p>
<p>风尘仆仆的，麻木不仁的，油头粉面的庞大而坚固的金字塔规则下产生出的群体</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity</title>
    <url>/2023/01/12/SpringSecurity/</url>
    <content><![CDATA[<p>SpringSecurity 安全框架 , 深入浅出</p>
<span id="more"></span>

<h4 id="一-核心功能"><a href="#一-核心功能" class="headerlink" title="一 核心功能"></a>一 核心功能</h4><p>对于一个权限管理框架而言，无论是 Shiro 还是 Spring Security，最最核心的功能，无非就是两方面： </p>
<ul>
<li><p>认证 </p>
</li>
<li><p>授权</p>
</li>
</ul>
<p>通俗点说，认证就是常说的登录，授权就是权限鉴别，看看请求是否具备相应的权限。 </p>
<p>虽然就是一个简简单单的登录，可是也能玩出很多花样来。 </p>
<p><code>Spring Security</code> 支持多种不同的认证方式，这些认证方式有的是 <code>Spring Security</code> 自己提供的认证功 </p>
<p>能，有的是第三方标准组织制订的，主要有如下一些：</p>
<p>一些比较常见的认证方式： </p>
<ul>
<li><p>HTTP BASIC authentication headers：基于IETF RFC 标准。 </p>
</li>
<li><p>HTTP Digest authentication headers：基于IETF RFC 标准。 </p>
</li>
<li><p>HTTP X.509 client certifificate exchange：基于IETF RFC 标准。 </p>
</li>
<li><p>LDAP：跨平台身份验证。 </p>
</li>
<li><p>Form-based authentication：基于表单的身份验证。 </p>
</li>
<li><p>Run-as authentication：用户用户临时以某一个身份登录。 </p>
</li>
<li><p>OpenID authentication：去中心化认证。 </p>
</li>
</ul>
<p>除了这些常见的认证方式之外，一些比较冷门的认证方式，<code>Spring Security</code> 也提供了支持。 </p>
<ul>
<li><p>Jasig Central Authentication Service：单点登录。 </p>
</li>
<li><p>Automatic “remember-me” authentication：记住我登录（允许一些非敏感操作）。 </p>
</li>
<li><p>Anonymous authentication：匿名登录。 </p>
</li>
<li><p>……</p>
</li>
</ul>
<p>作为一个开放的平台，Spring Security 提供的认证机制不仅仅是上面这些。</p>
<h4 id="二-Security-简单入门"><a href="#二-Security-简单入门" class="headerlink" title="二 Security 简单入门"></a>二 Security 简单入门</h4><h5 id="2-1-新建项目"><a href="#2-1-新建项目" class="headerlink" title="2.1 新建项目"></a>2.1 新建项目</h5><p>首先新建一个 Spring Boot 项目，创建时引入 <code>Spring Security</code> 依赖和 <code>web</code> 依赖 , 目前使用的SpringBoot 版本是 2.7.7 。提示 , 2.7之后 版本与之前的版本的使用方式不同, 之前版本都是继承 <code>WebSecurityConfigurerAdapter</code>这个类,重写方法配置实现功能呢 , 2.7之后写法就不一样了。</p>
<p>项目创建成功后，我们添加一个测试的 <code>HelloController</code>，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来什么事情都不用做，直接来启动项目。 </p>
<p>在项目启动过程中，我们会看到如下一行日志： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Using generated security password: 30abfb1f-36e1-446a-a79b-f70024f589ab</span><br></pre></td></tr></table></figure>

<p>这就是 <code>Spring Security</code> 为默认用户 user 生成的临时密码，是一个 UUID 字符串。 </p>
<p>接下来我们去访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 接口，就可以看到自动重定向到登录页面了：</p>
<img src="/2023/01/12/SpringSecurity/image-20230105070942231.png" alt="image-20230105070942231" style="zoom:200%;">

<p>在登录页面，默认的用户名就是 user，默认的登录密码则是项目启动时控制台打印出来的密码，输入用户名密码之后，就登录成功了，登录成功后，我们就可以访问到 /hello 接口了。 </p>
<p>在 Spring Security 中，默认的登录页面和登录接口，都是 /login ，只不过一个是 get 请求（登录页 面），另一个是 post 请求（登录接口）。</p>
<p><strong>可以看到，非常方便，一个依赖就保护了所有接口。</strong> </p>
<p>在 Security 用户相关的自动化配置类在 <code>UserDetailsServiceAutoConfiguration</code> 里边，在该类的<code>getOrDeducePassword</code> 方法中，看到如下一行日志： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">	logger.info(String.format(<span class="string">&quot;%n%nUsing generated security password: %s%n&quot;</span>,</span><br><span class="line">user.getPassword()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>毫无疑问，在控制台看到的日志就是从这里打印出来的。打印的条件是 <code>isPasswordGenerated</code> 方法返回 <code>true</code>，即密码是默认生成的。 </p>
<p>进而发现，<code>user.getPassword</code> 出现在 <code>SecurityProperties</code> 中，在 SecurityProperties 中我们看到 </p>
<p>如下定义： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Default user name.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Password for the default user name.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Granted roles for the default user name.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">passwordGenerated</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>可以看到，默认的用户名就是 user，默认的密码则是 UUID，而默认情况下，<code>passwordGenerated</code> 也为 <code>true</code>。 </p>
<h5 id="2-2-用户配置"><a href="#2-2-用户配置" class="headerlink" title="2.2 用户配置"></a>2.2 用户配置</h5><p>默认的密码有一个问题就是每次重启项目都会变，这很不方便。 </p>
<p>介绍两种非主流的用户名/密码配置方案。 </p>
<h6 id="2-2-1-配置文件"><a href="#2-2-1-配置文件" class="headerlink" title="2.2.1 配置文件"></a>2.2.1 配置文件</h6><p>在 <code>SecurityProperties</code> 文件中，默认的用户就定义在它里边，是一个静态内部类，我们如果要定义自己的用户名密码，必然是要去覆盖默认配置，先来看下<code>SecurityProperties</code> 的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityProperties</span> &#123;</span><br></pre></td></tr></table></figure>

<p>这就很清晰了，只需要以 <code>spring.security.user</code> 为前缀，去定义用户名密码即可： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">hello</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure>

<p>在 <code>properties</code> 中定义的用户名密码最终是通过 <strong>set</strong> 方法注入到属性中去的，这里顺便来看下 <code>SecurityProperties.User#setPassword</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!StringUtils.hasLength(password)) &#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">this</span>.passwordGenerated = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">this</span>.password = password;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>从这里可以看到，<code>application.properties</code> 中定义的密码在注入进来之后，还顺便设置了 </p>
<p><code>passwordGenerated</code> 属性为 <code>false</code>，这个属性设置为 false 之后，控制台就不会打印默认的密码了。 </p>
<p>此时重启项目，就可以使用自己定义的用户名/密码登录了。</p>
<h6 id="2-2-2-配置类"><a href="#2-2-2-配置类" class="headerlink" title="2.2.2 配置类"></a>2.2.2 配置类</h6><p>除了上面的配置文件这种方式之外，也可以在配置类中配置用户名/密码。 </p>
<p>在配置类中配置，就要指定 <code>PasswordEncoder</code> (密码加密)了，这是一个非常关键的东西。 </p>
<p>具体配置: config-&gt; SecurityConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        users.createUser(User.withUsername(<span class="string">&quot;zs&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">        users.createUser(User.withUsername(<span class="string">&quot;ls&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>).roles(<span class="string">&quot;user&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前的案例还比较简单，因此暂时先不给密码进行加密，所以返回 <code>NoOpPasswordEncoder</code>, 就是在密码前面加<code>&#123;noop&#125;</code> 即可。</p>
<h5 id="2-3-自定义登录页面"><a href="#2-3-自定义登录页面" class="headerlink" title="2.3 自定义登录页面"></a>2.3 自定义登录页面</h5><p><code>resources/static/login.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/doLogin&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是, 启动服务后, security 会拦截静态页面, 会自动进入它的默认login , 因此需要设置放行静态资源 , SecurityConfig 添加如下配置 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    WebSecurityCustomizer <span class="title function_">webSecurityCustomizer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebSecurityCustomizer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(WebSecurity web)</span> &#123;</span><br><span class="line">                web.ignoring().antMatchers(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> Spring Security 不需要自己写登录接口的 , 官方提供了登录逻辑接口, 只需要配置一下就行。</p>
<p> Spring Security 的底层实际上就是一堆过滤器，  通过提供一个 <code>SecurityFilterChain Bean</code> 来配置过滤器链，SecurityFilterChain 是一个接口，这个接口只有一个实现类 DefaultSecurityFilterChain，构建 <code>DefaultSecurityFilterChain</code> 的第一个参数是拦截规则，也就是哪些路径需要拦截，第二个参数则是过滤器链，这里我给了一个空集合，也就是我们的 Spring Security 会拦截下所有的请求 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *登录流程:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *   1，当一个请求到达Spring Security 过滤器链的时候，有一个过滤器叫做 SecurityContextPersistenceFilter。</span></span><br><span class="line"><span class="comment">       2，当用户登录成功的时候，会将当前用户登录的信息存入到 SecurityContextHolder 中,SecurityContextHolder底层是一个ThreadLocal，当前用户信息被存入到TheadLocal中。</span></span><br><span class="line"><span class="comment">       3，在登录请求返回数据的时候，会经过SecurityContextPersistenceFilter过德器，在该过滤器中，会拿出来SecurityContextHolder中的用户信息，然后将之存入到HttpSession中，同时清除掉 SecurityContextHolder中的用户信息。</span></span><br><span class="line"><span class="comment">       4，接下来，当用户访问/hello 的时候，一样也会经过 SecurityContextPersistenceFilter，在该过端器中，会从HttpSession中读取出来当前用户数据，并存入到SecurityContextHolder中，在接下来的各种认证和权限的判断中，都会从SecurityContextHolder中获取。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       http.authorizeRequests()</span><br><span class="line">       <span class="comment">// 所有用户都能访问/doLogin，这种放行，/doLogin 请求会经过Spring Security过滤器链，但是这些过滤器不会拦截这个请求。与放行静态资源有区别</span></span><br><span class="line">               <span class="comment">// permitAll 表示登录相关的页面/接口不要被拦截。</span></span><br><span class="line">               .antMatchers(<span class="string">&quot;/doLogin&quot;</span>).permitAll()</span><br><span class="line">               <span class="comment">// 所有的请求都要认证之后才能访问</span></span><br><span class="line">               .anyRequest().authenticated()</span><br><span class="line">           	<span class="comment">// and 方法表示结束当前标签，上下文回到HttpSecurity，开启新一轮的配置。</span></span><br><span class="line">               .and()</span><br><span class="line">           	<span class="comment">// formLogin 对应了 &lt;formlogin&gt; 。</span></span><br><span class="line">               .formLogin()</span><br><span class="line">               .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">               <span class="comment">// 指定登录接口的地址</span></span><br><span class="line">               .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">               <span class="comment">// 配置密码参数的 key , 默认就是 username</span></span><br><span class="line">               .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">               <span class="comment">// 配置密码参数的 key , 默认就是 password</span></span><br><span class="line">               .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">           	<span class="comment">// 登录成功后跳转页面</span></span><br><span class="line">               .defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">               .and()</span><br><span class="line">               <span class="comment">// 关掉 crsf 攻击防御</span></span><br><span class="line">               .csrf().disable();</span><br><span class="line">       <span class="keyword">return</span> http.build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p>获取当前登录的用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前登录的用户信息</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">spring_security_context</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;SPRING_SECURITY_CONTEXT&quot;</span>);</span><br><span class="line">        <span class="type">SecurityContext</span> <span class="variable">springSecurityContext</span> <span class="operator">=</span> (SecurityContext) spring_security_context;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> (Authentication) springSecurityContext.getAuthentication();</span><br><span class="line">        System.out.println(authentication);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication1</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        System.out.println(authentication1);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-4-自定义登录返回数据"><a href="#2-4-自定义登录返回数据" class="headerlink" title="2.4 自定义登录返回数据"></a>2.4 自定义登录返回数据</h5><p>登录成功和失败返回 json 数据</p>
<p>在前后端分离这样的开发架构下，前后端的交互都是通过 JSON 来进行，无论登录成功还是失败，都不会有什么服务端跳转或者客户端跳转之类。 </p>
<p>登录成功了，服务端就返回一段登录成功的提示 JSON 给前端，前端收到之后，该跳转该展示，由前端自己决定，就和后端没有关系了。 </p>
<p>登录失败了，服务端就返回一段登录失败的提示 JSON 给前端，前端收到之后，该跳转该展示，由前端自己决定，也和后端没有关系了。 </p>
<h6 id="2-4-1-登录成功"><a href="#2-4-1-登录成功" class="headerlink" title="2.4.1 登录成功"></a>2.4.1 登录成功</h6><p>之前配置登录成功的处理是通过如下两个方法来配置的： </p>
<ul>
<li><p>defaultSuccessUrl </p>
</li>
<li><p>successForwardUrl </p>
</li>
</ul>
<p>这两个都是配置跳转地址的，适用于前后端不分的开发。除了这两个方法之外，还有一个必杀技，那就 是 <code>successHandler</code>。 </p>
<p><code>successHandler</code> 的功能十分强大，甚至已经囊括了 defaultSuccessUrl 和 successForwardUrl 的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录成功后跳转页面</span></span><br><span class="line"><span class="comment">//.defaultSuccessUrl(&quot;/hello&quot;)</span></span><br><span class="line">.successHandler(</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* request :当前请求对象</span></span><br><span class="line"><span class="comment">* response : 当前响应的对象</span></span><br><span class="line"><span class="comment">* authentication :当前登录成功的用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    (request, response, authentication) -&gt; &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;200&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;data&quot;</span>,authentication.getPrincipal());</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    response.getWriter().write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>successHandler 方法的参数是一个 <code>AuthenticationSuccessHandler</code> 对象，这个对象中我们要实现的方法是 <code>onAuthenticationSuccess</code>。</p>
<h6 id="2-4-2-登录失败"><a href="#2-4-2-登录失败" class="headerlink" title="2.4.2 登录失败"></a>2.4.2 登录失败</h6><p>登录失败也有一个类似的回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.failureHandler(</span><br><span class="line">    <span class="comment">// exception : 表示失败的异常</span></span><br><span class="line">    (request, response, exception) -&gt; &#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = (Map) <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;500&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;用户名或者密码写错,登录失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> UsernameNotFoundException)&#123;</span><br><span class="line">    <span class="comment">//出于安全考虑，Spring Security 内部将UsernameNotFoundException隐藏起来了，转而抛出了BadcredentialsException</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccountExpiredException)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户过期,登录失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> CredentialsContainer)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;密码过期,登录失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> DisabledException)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户被禁用,登录失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> LockedException)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户被锁定,登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    response.getWriter().write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>失败的回调也是三个参数，第三个是一个 Exception，对于登录失败，会有不同的 原因，<code>Exception</code> 中则保存了登录失败的原因，我们可以将之通过 JSON 返回到前端。 </p>
<h6 id="2-4-3-未认证处理方案"><a href="#2-4-3-未认证处理方案" class="headerlink" title="2.4.3 未认证处理方案"></a>2.4.3 未认证处理方案</h6><p>如果用户没有登录就访问一个需要认证后才能访问的页面，这个时候，不应该让用户重定向到登录页面，而是给用户一个尚未登录的提示，前端收到提示之后，再自行决定页面跳转。 </p>
<p>要解决这个问题，就涉及到 Spring Security 中的一个接口 <code>AuthenticationEntryPoint</code> ，该接口有一个实现类： <code>LoginUrlAuthenticationEntryPoint</code> ，该类中有一个方法 <code>commence</code> ，源码如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Performs the redirect (or forward) to the login form URL.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">			AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">this</span>.useForward) &#123;</span><br><span class="line">			<span class="comment">// redirect to login page. Use https if forceHttps true</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> buildRedirectUrlToLoginPage(request, response, authException);</span><br><span class="line">			<span class="built_in">this</span>.redirectStrategy.sendRedirect(request, response, redirectUrl);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">String</span> <span class="variable">redirectUrl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.forceHttps &amp;&amp; <span class="string">&quot;http&quot;</span>.equals(request.getScheme())) &#123;</span><br><span class="line">			<span class="comment">// First redirect the current request to HTTPS. When that request is received,</span></span><br><span class="line">			<span class="comment">// the forward to the login page will be used.</span></span><br><span class="line">			redirectUrl = buildHttpsRedirectUrlForRequest(request);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (redirectUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">this</span>.redirectStrategy.sendRedirect(request, response, redirectUrl);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">String</span> <span class="variable">loginForm</span> <span class="operator">=</span> determineUrlToUseForThisRequest(request, response, authException);</span><br><span class="line">		logger.debug(LogMessage.format(<span class="string">&quot;Server side forward to: %s&quot;</span>, loginForm));</span><br><span class="line">		<span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(loginForm);</span><br><span class="line">		dispatcher.forward(request, response);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法是用来决定到底是要重定向还是要 forward，通过 Debug 追踪，我们发现默认情况下 useForward 的值为 false，所以请求走进了重定向。 </p>
<p>解决问题直接重写这个方法，在方法中返回 JSON 即可，不再做重定向操作，具体配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.csrf().disable()</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint((AuthenticationEntryPoint)</span><br><span class="line">                    <span class="comment">// 如果用户没有登录，就去访问需要登陆后才能访问的接口，那么就会触发该方法</span></span><br><span class="line">                (request, response, authException) -&gt; &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;200&quot;</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;尚未登录,请先登录&quot;</span>);</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    response.getWriter().write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

<p>在 Spring Security 的配置中加上自定义的 <code>AuthenticationEntryPoint</code> 处理方法，该方法中直接返回相应的 JSON 提示即可。这样，如果用户再去直接访问一个需要认证之后才可以访问的请求，就不会发生重定向操作了，服务端会直接给浏览器一个 JSON 提示，浏览器收到 JSON 之后，该干嘛干嘛。 </p>
<h6 id="2-4-4-测试"><a href="#2-4-4-测试" class="headerlink" title="2.4.4 测试"></a>2.4.4 测试</h6><p>通过Postman 来测试上面的接口返回的数据</p>
<table>
<thead>
<tr>
<th align="center">登录成功</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105112743249.png" alt="image-20230105112743249" style="zoom:200%;"></td>
</tr>
<tr>
<td align="center"><strong>登录失败</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105112843916.png" alt="image-20230105112843916" style="zoom:200%;"></td>
</tr>
<tr>
<td align="center"><strong>未认证登录访问</strong></td>
</tr>
<tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105112930913.png" alt="image-20230105112930913" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="2-5-数据库中读取用户信息"><a href="#2-5-数据库中读取用户信息" class="headerlink" title="2.5 数据库中读取用户信息"></a>2.5 数据库中读取用户信息</h5><h6 id="2-5-1-数据库表设计"><a href="#2-5-1-数据库表设计" class="headerlink" title="2.5.1 数据库表设计"></a>2.5.1 数据库表设计</h6><table>
<thead>
<tr>
<th align="center">数据库表设计</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105115646321.png" alt="image-20230105115646321" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h6 id="2-5-2-创建工程"><a href="#2-5-2-创建工程" class="headerlink" title="2.5.2 创建工程"></a>2.5.2 创建工程</h6><blockquote>
<p>创建新的 SpringBoot 工程 , 添加 MyBatis , MySQL , SpringSecurity 的依赖 , 目前使用的SpringBoot 的版本是 2.7.7 </p>
</blockquote>
<ol>
<li><p>model -&gt; 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户的角色 / 权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否没有过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 账户是否没有被锁定</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否没有过期</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper -&gt; UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;;&quot;)</span></span><br><span class="line">    User <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service -&gt; UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户对象</span></span><br><span class="line"><span class="comment">     * 当用户登录的时候 , 会自动调用到这个方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户登录时输入的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明用户名不存在，这个异常最终会被隐藏起来，转而抛出 BadCredentialsException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller -&gt; HelloController</p>
<p>简单写一个登录后访问接口 , 这些都是<code>key -value</code> 形式</p>
</li>
</ol>
<h5 id="2-6-自定义登录接口"><a href="#2-6-自定义登录接口" class="headerlink" title="2.6 自定义登录接口"></a>2.6 自定义登录接口</h5><p>自定义登录接口 , JSON 格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     AuthenticationManager 就是 Spring Security 中的认证器，这是一个接口，这个接口只有一个实现类， provideManager。用户登录时候具体的校验工作，就是由它来完成的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用 Spring Security 自带的登录接口, 而是使用自己写的登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 构建登录令牌</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUsername(), user.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这一步就是去执行登录 , 类似于 shiro 中的 subject.login 方法</span></span><br><span class="line">            authenticationManager.authenticate(token);</span><br><span class="line">            <span class="comment">// 将当前登录成功的用户信息存入到 SecurityContextHolder 中</span></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(token.getPrincipal(),<span class="literal">null</span>,token.getAuthorities()));</span><br><span class="line">            map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;200&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line">            <span class="comment">// 登录失败</span></span><br><span class="line">            map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;500&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;用户名或者密码写错,登录失败&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> UsernameNotFoundException)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccountExpiredException)&#123;</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户过期,登录失败&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> CredentialsContainer)&#123;</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;密码过期,登录失败&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> DisabledException)&#123;</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户被禁用,登录失败&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> LockedException)&#123;</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;账户被锁定,登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config -&gt; SecurityConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(</span></span><br><span class="line"><span class="params">            AuthenticationConfiguration authConfig)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authConfig.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">测试</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105144708247.png" alt="image-20230105144708247" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="2-7-密码加密"><a href="#2-7-密码加密" class="headerlink" title="2.7 密码加密"></a>2.7 密码加密</h5><h6 id="2-7-1-介绍"><a href="#2-7-1-介绍" class="headerlink" title="2.7.1 介绍"></a>2.7.1 介绍</h6><p>在 Spring Security 中，跟密码加密/校验相关的事情，都是由 <code>PasswordEncoder</code> 来主导的，PasswordEncoder 拥有众多的实现类 :</p>
<table>
<thead>
<tr>
<th align="center">PasswordEncoder 及 它的实现类</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105145512838.png" alt="image-20230105145512838" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>这些实现类，有的已经过期了，有的用处不大。对于我们而言，最常用的莫过于 <code>BCryptPasswordEncoder</code>。 </p>
<p>PasswordEncoder 本身是一个接口，里边只有三个方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line">    String <span class="title function_">encode</span><span class="params">(CharSequence rawPassword)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">upgradeEncoding</span><span class="params">(String encodedPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>encode 方法用来对密码进行加密。 </p>
</li>
<li><p>matches 方法用来对密码进行比对。 </p>
</li>
<li><p>upgradeEncoding 表示是否需要对密码进行再次加密以使得密码更加安全，默认为 false。 </p>
</li>
</ul>
<p>PasswordEncoder 的实现类，则具体实现了这些方法。</p>
<h6 id="2-7-2-PasswordEncoder-的作用"><a href="#2-7-2-PasswordEncoder-的作用" class="headerlink" title="2.7.2 PasswordEncoder 的作用"></a>2.7.2 PasswordEncoder 的作用</h6><p>通常情况下都是在 SecurityConfig 中配置一个 PasswordEncoder 的实例，类似下面这样： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>剩下的事情，都是由系统调用的。</p>
<h6 id="2-7-3-BCryptPasswordEncoder"><a href="#2-7-3-BCryptPasswordEncoder" class="headerlink" title="2.7.3 BCryptPasswordEncoder"></a>2.7.3 BCryptPasswordEncoder</h6><p>BCryptPasswordEncoder 是 PasswordEncoder 的子类, 这个密码加密类自带盐 , 不需要自己加盐了 , 而且它还可以根据电脑的性能动态的调整运算密码校验时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(encoder.encode(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">            <span class="comment">// 生成的密码都是不一样的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>把生成好的密码加密文随便复制一个替换数据库的密码明文。</p>
<p>接着在 config -&gt; SecurityConfig 配置密码加解密器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册密码加密</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BCryptPasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">测试</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105152022131.png" alt="image-20230105152022131" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h6 id="2-7-4-DelegatingPasswordEncoder"><a href="#2-7-4-DelegatingPasswordEncoder" class="headerlink" title="2.7.4 DelegatingPasswordEncoder"></a>2.7.4 DelegatingPasswordEncoder</h6><p>如果没有手动配置密码加解密工具，那么默认的 <code>PasswordEncoder</code>实际上就 <code>DelegatingPasswordEncoder</code>。<br><code>DelegatingPasswordEncoder</code>代理了所有的密码加密器，它会根据密码的字符串格式，而选择一个合适的加密工具。</p>
<table>
<thead>
<tr>
<th align="center">PasswordEncoderFactories 源码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230105153335817.png" alt="image-20230105153335817" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>先注释掉配置的加密密码工具 , 在数据库存入加密前缀的密码</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230105153622450.png" alt="image-20230105153622450" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230105153826513.png" alt="image-20230105153826513" style="zoom:200%;"></td>
</tr>
<tr>
<td>admin 和 zs 用户都可以登录成功</td>
</tr>
</tbody></table>
<h6 id="2-7-5-密码升级"><a href="#2-7-5-密码升级" class="headerlink" title="2.7.5 密码升级"></a>2.7.5 密码升级</h6><p>在 Service 层多一个密码接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">userService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span>, UserDetailsPasswordService &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当用户登录的时候，会去自动检查用户当前的密码加密方案是不是bcrypt，如果不是，则会自动进行密码的升级，那么此时就会触发该方法。</span></span><br><span class="line"><span class="comment">     * 在这个方法中，更新用户密码即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 当前用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword 重新处理后的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">updatePassword</span><span class="params">(UserDetails user, String newPassword)</span> &#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updatePasswordByUsername(newPassword,user.getUsername());</span><br><span class="line">       <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) user;</span><br><span class="line">           user1.setPassword(newPassword);</span><br><span class="line">           <span class="keyword">return</span> user1;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>mapper -&gt; UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;;&quot;)</span></span><br><span class="line">    User <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set password = #&#123;password&#125; where username=#&#123;username&#125;;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">updatePasswordByUsername</span><span class="params">(<span class="meta">@Param(&quot;password&quot;)</span> String newPassword, <span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在数据库中的 zs 用户的密码方案是 {noop}的 , 当其登录之后触发密码升级 , 就会对其密码升级成 bcrypt 。</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230105155711396.png" alt="image-20230105155711396" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230105155730212.png" alt="image-20230105155730212" style="zoom:200%;"></td>
</tr>
<tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230105155745313.png" alt="image-20230105155745313" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>代理的密码加密器是可以解决带前缀的密码 , 下面密码解析器只能解析不带前缀的密码。</p>
<p>在 配置类进行配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">encodingId</span> <span class="operator">=</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">       Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 密码加密强度 , 默认是 10 , 取值是 4 到 31之间</span></span><br><span class="line">       encoders.put(encodingId, <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>(<span class="number">11</span>));</span><br><span class="line">       encoders.put(<span class="string">&quot;ldap&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.LdapShaPasswordEncoder());</span><br><span class="line">       encoders.put(<span class="string">&quot;MD4&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.Md4PasswordEncoder());</span><br><span class="line">       encoders.put(<span class="string">&quot;MD5&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">       encoders.put(<span class="string">&quot;noop&quot;</span>, org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());</span><br><span class="line">       encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line">       encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> <span class="title class_">SCryptPasswordEncoder</span>());</span><br><span class="line">       encoders.put(<span class="string">&quot;SHA-1&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-1&quot;</span>));</span><br><span class="line">       encoders.put(<span class="string">&quot;SHA-256&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-256&quot;</span>));</span><br><span class="line">       encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.StandardPasswordEncoder());</span><br><span class="line">       encoders.put(<span class="string">&quot;argon2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Argon2PasswordEncoder</span>());</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>BCryptPasswordEncoder 的密码强度默认是 10 , 就是不赋值的情况 , 取值范围是 4 - 31之间 , 数值越高 , 运算时间越长  , 也就是登录时间慢 , 有利于防止别人恶意攻击网站。前面都是没有赋值的 BCrypt 加密密码 , 现在对其进行升级。</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230105161551771.png" alt="image-20230105161551771" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230105161723609.png" alt="image-20230105161723609" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="2-8-权限控制"><a href="#2-8-权限控制" class="headerlink" title="2.8 权限控制"></a>2.8 权限控制</h5><h6 id="2-8-1-准备测试接口"><a href="#2-8-1-准备测试接口" class="headerlink" title="2.8.1 准备测试接口"></a>2.8.1 准备测试接口</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这三个测试接口，我们的规划是这样的： </p>
<ol>
<li><p>/hello 是任何人都可以访问的接口 </p>
</li>
<li><p>/admin/hello 是具有 admin 身份的人才能访问的接口 </p>
</li>
<li><p>/user/hello 是具有 user 身份的人才能访问的接口 </p>
</li>
<li><p>所有 user 能够访问的资源，admin 都能够访问 </p>
</li>
</ol>
<h6 id="2-8-2-数据库表"><a href="#2-8-2-数据库表" class="headerlink" title="2.8.2 数据库表"></a>2.8.2 数据库表</h6><p>添加两张数据库</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230105163950372.png" alt="image-20230105163950372" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230105164005950.png" alt="image-20230105164005950" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h6 id="2-8-3-权限配置"><a href="#2-8-3-权限配置" class="headerlink" title="2.8.3 权限配置"></a>2.8.3 权限配置</h6><p>config -&gt; SecurityConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-8-4-实体类"><a href="#2-8-4-实体类" class="headerlink" title="2.8.4 实体类"></a>2.8.4 实体类</h6><p>添加 Role 实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User 类添加 Role 属性 及返回角色信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户的角色 / 权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line"><span class="comment">//        List&lt;SimpleGrantedAuthority&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        return list;</span></span><br><span class="line">        <span class="keyword">return</span> roles.stream().map(r-&gt;<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(r.getName())).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-8-5-业务配置"><a href="#2-8-5-业务配置" class="headerlink" title="2.8.5 业务配置"></a>2.8.5 业务配置</h6><p>UserMapper 返回角色信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;;&quot;)</span></span><br><span class="line">    User <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set password = #&#123;password&#125; where username=#&#123;username&#125;;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">updatePasswordByUsername</span><span class="params">(<span class="meta">@Param(&quot;password&quot;)</span> String newPassword, <span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT r.* FROM role r LEFT JOIN user_role ur ON r.`id` = ur.`rid`WHERE ur.`uid` = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    List&lt;Role&gt; <span class="title function_">getUserRolesByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>UserService 根据用户查询角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明用户名不存在，这个异常最终会被隐藏起来，转而抛出 BadCredentialsException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果查询到了用户,接下来就去查询用户的角色</span></span><br><span class="line">        user.setRoles(userMapper.getUserRolesByUid(user.getId()));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-8-6-controller-登录"><a href="#2-8-6-controller-登录" class="headerlink" title="2.8.6 controller 登录"></a>2.8.6 controller 登录</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回的 authentication 对象中 , 不仅有用户名, 还有用户角色等信息</span></span><br><span class="line">            <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationManager.authenticate(token);</span><br><span class="line">            <span class="comment">// 将当前登录成功的用户信息存入到 SecurityContextHolder 中</span></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(authentication.getPrincipal(),<span class="literal">null</span>,authentication.getAuthorities()));</span><br></pre></td></tr></table></figure>

<p>之前的token 只存了用户名和密码 , 没有存入角色 </p>
<p>现在启动服务器 ,测试。完美 ok</p>
<h6 id="2-8-7-角色继承"><a href="#2-8-7-角色继承" class="headerlink" title="2.8.7 角色继承"></a>2.8.7 角色继承</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">    <span class="keyword">return</span> http.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配色角色的继承关系</span></span><br><span class="line"><span class="comment"> * ROLE_admin 继承自 ROLE_user , 因此前者具备后者的所有权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">    <span class="comment">// 多个继承</span></span><br><span class="line">    <span class="comment">// roleHierarchy.setHierarchy(&quot;ROLE_admin &gt; ROLE_user \n aa &gt; bb \n cc &gt; dd&quot;);</span></span><br><span class="line">    roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-8-8-注解权限控制"><a href="#2-8-8-注解权限控制" class="headerlink" title="2.8.8 注解权限控制"></a>2.8.8 注解权限控制</h6><ol>
<li><p>在 SecurityConfig 配置类上加上这个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure>

<p>prePostEnabled = true表示开启如下两个注解的使用:</p>
<ol>
<li>@PreAuthorize，这个相当于前置通知</li>
<li>@PostAuthorize，这个相当于后置通知</li>
</ol>
</li>
<li><p>注释掉之前的角色配置代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 	.antMatchers(&quot;/admin/**&quot;).hasRole(&quot;admin&quot;)</span></span><br><span class="line"><span class="comment">//  .antMatchers(&quot;/user/**&quot;).hasRole(&quot;user&quot;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>接口加上前置通知 , 表示拦截接口访问角色权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_user&#x27;)&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;user World&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_admin&#x27;)&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;admin World&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="2-9-记住我登录"><a href="#2-9-记住我登录" class="headerlink" title="2.9 记住我登录"></a>2.9 记住我登录</h5><p>重新创建SpringBoot 工程 , 添加Security , MyBatis , MySQL 的依赖 , 写好实体类, DaoMapper 及 业务登录后, 接着写两个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/rm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">rememberMe</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello RM&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SecurityConfig -&gt; RemeberMe 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 如果访问路径是 /rm , 只能通过 RemeberMe 的形式访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/rm&quot;</span>).rememberMe()</span><br><span class="line">            <span class="comment">// 剩下的路径，只要登录就能访问，这个登录不管是rememberwe 登录，还是用户名密码登录，都是可以的</span></span><br><span class="line">             <span class="comment">//   .anyRequest().authenticated()</span></span><br><span class="line">            <span class="comment">// 这个是剩下的路径 , 必须通过用户名密码登录才能访问</span></span><br><span class="line">                .anyRequest().fullyAuthenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .and()</span><br><span class="line">                .rememberMe().key(<span class="string">&quot;AbcdEfghIjklmNopQrsTuvXyz_0123456789&quot;</span>)</span><br><span class="line">        		.and()</span><br><span class="line">            	.csrf().disable()</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务 , 在登录页面多了一个记住我登录的选项 , 勾选之后 , 再登录 ,关闭游览器 , 重新访问<code>/hello</code> 页面就不需要再登录 , 反之没有选上rememberMe , 关闭游览器再访问 <code>/hello</code> 就要先登录。</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230106045434553.png" alt="image-20230106045434553" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106045706555.png" alt="image-20230106045706555" style="zoom:200%;"></td>
</tr>
<tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106050216421.png" alt="image-20230106050216421"></td>
</tr>
</tbody></table>
<p>rememberMe cooked 有效时间是 14 天</p>
<h4 id="三-会话管理"><a href="#三-会话管理" class="headerlink" title="三 会话管理"></a>三 会话管理</h4><h5 id="3-1-Session-管理"><a href="#3-1-Session-管理" class="headerlink" title="3.1 Session 管理"></a>3.1 Session 管理</h5><p>SecurityConfig 添加配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.and()</span><br><span class="line">                .rememberMe().key(<span class="string">&quot;AbcdEfghIjklmNopQrsTuvXyz_0123456789&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                <span class="comment">// 设置每一个账号最多只能有一个会话</span></span><br><span class="line">                .maximumSessions(<span class="number">1</span>)</span><br><span class="line">    			<span class="comment">// 当达到最大会话数的时候 , 禁止后来的用户登录</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="literal">true</span>)</span><br><span class="line">                .and().and()</span><br><span class="line">                .csrf().disable();</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>会话管理测试</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106053027570.png" alt="image-20230106053027570" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h5 id="3-2-HttpSession-销毁事件"><a href="#3-2-HttpSession-销毁事件" class="headerlink" title="3.2 HttpSession 销毁事件"></a>3.2 HttpSession 销毁事件</h5><p>发布HttpSession销毁的事件 ,   因为当用户注销的时候，httpsession 会被销毁，但是默认情况下，spring security框架并不知道 httpsession被销毁了。</p>
<p>手动添加 销毁时间，就是监听 httpsession 的销毁事件，如果 httpsession销毁，就通知 Spring Security 将用户会话表中 session移除。</p>
<p>在 SecurityConfig 添加一个Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    HttpSessionEventPublisher <span class="title function_">httpSessionEventPublisher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>启动服务 , 打开两个游览器 , 一个游览器登录成功, 另一个游览器也登录这个用户, 发现登录不进去 , 前者注销登录 , 后者再次登录 就可以登录 , 就是因为前者注销登录销毁了 session 。</p>
<p>**注意 : **实体类一定要重写 equals 方法 , 因为当前项目是用了 Lombok 插件 , 实体类加了<code>@Data</code> 注解 , 所以它会自动重写 <code>equals</code> 方法, cookie 会根据hashCode 来鉴别是否同一个对象。</p>
<h5 id="3-3-防御会话攻击"><a href="#3-3-防御会话攻击" class="headerlink" title="3.3 防御会话攻击"></a>3.3 防御会话攻击</h5><p>什么是会话固定攻击？英文叫做 session fifixation attack。 </p>
<p>正常来说，只要你不关闭浏览器，并且服务端的 HttpSession 也没有过期，那么维系服务端和浏览器的 sessionid 是不会发生变化的，而会话固定攻击，则是利用这一机制，借助受害者用相同的会话 ID 获取 <strong>认证</strong>和<strong>授权</strong>，然后利用该会话 ID 劫持受害者的会话以成功冒充受害者，造成会话固定攻击。 </p>
<p>如何防御 ?</p>
<table>
<thead>
<tr>
<th align="center">具体配置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230106060117046.png" alt="image-20230106060117046" style="zoom:200%;"></td>
</tr>
</tbody></table>
<blockquote>
<ol>
<li><p>migrateSession 表示在登录成功之后，创建一个新的会话，然后讲旧的 session 中的信息复制到新的 session 中，<strong>默认即此</strong>。 </p>
</li>
<li><p>none 表示不做任何事情，继续使用旧的 session。 </p>
</li>
<li><p>changeSessionId 表示 session 不变，但是会修改 sessionid，这实际上用到了 Servlet 容器提供的防御会话固定攻击。 </p>
</li>
<li><p>newSession 表示登录后创建一个新的 session。 </p>
</li>
</ol>
<p>默认的 migrateSession ，在用户匿名访问的时候是一个 sessionid，当用户成功登录之后，又是另外一个 sessionid，这样就可以有效避免会话固定攻击。</p>
</blockquote>
<h5 id="3-4-CSRF-攻击与防御"><a href="#3-4-CSRF-攻击与防御" class="headerlink" title="3.4 CSRF 攻击与防御"></a>3.4 CSRF 攻击与防御</h5><p>CSRF 就是跨域请求伪造，英文全称是 Cross Site Request Forgery。 </p>
<p>这是一种非常常见的 Web 攻击方式。</p>
<table>
<thead>
<tr>
<th align="center">CSRF 原理</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/2023/01/12/SpringSecurity/image-20230106062907005.png" alt="image-20230106062907005" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h6 id="3-4-1-默认解决方案"><a href="#3-4-1-默认解决方案" class="headerlink" title="3.4.1 默认解决方案"></a>3.4.1 默认解决方案</h6><ol>
<li><p>首先在SecurityConfig类 取消关闭 crsf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .csrf().disable()</span></span><br></pre></td></tr></table></figure></li>
<li><p>前端提交页面加上隐藏属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">form action=&quot;/hello&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，这个测试接口是一个 POST 请求，因为默认情况下，GET、HEAD、TRACE 以及 OPTIONS 是不需要验证 CSRF 攻击的。</p>
<p>在发送 POST 请求的时候，还额外携带了一个隐藏域，隐藏域的 key 是 </p>
<p><code>$&#123;_csrf.parameterName&#125;</code> ，value 则是 <code>$&#123;_csrf.token&#125; </code>。 </p>
<p>这两个值服务端会自动带过来，只需要在前端渲染出来即可。 </p>
</li>
<li><img src="/2023/01/12/SpringSecurity/image-20230106064505343.png" alt="image-20230106064505343" style="zoom:200%;"></li>
</ol>
<h6 id="3-4-2-前后端分离方案"><a href="#3-4-2-前后端分离方案" class="headerlink" title="3.4.2 前后端分离方案"></a>3.4.2 前后端分离方案</h6><p>这次不是将 _csrf 放在 Model 中返回前端了，而是放在 Cookie 中返回前端，配置方式如下： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 csrf 令牌存入 Cookie 中</span></span><br><span class="line">                .csrf().csrfTokenRepository(<span class="keyword">new</span> <span class="title class_">CookieCsrfTokenRepository</span>());</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>测试</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106064927211.png" alt="image-20230106064927211" style="zoom:200%;"></td>
</tr>
</tbody></table>
<h4 id="四-JWT-登录"><a href="#四-JWT-登录" class="headerlink" title="四 JWT 登录"></a>四 JWT 登录</h4><h5 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h5><p>前面的登录都是有状态的登录方式 , 有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，典型的设计如 Tomcat 中的 Session。例如登录：用户登录后，我们把用户的信息保存在服务端 session 中，并且给用户一个 cookie 值，记录对应的 session，然后下次请求，用户携带 cookie 值 来（这一步有浏览器自动完成），我们就能识别到对应 session，从而找到用户的信息。这种方式目前 来看最方便，但是也有一些缺陷，如下： </p>
<ul>
<li><p>服务端保存大量数据，增加服务端压力 </p>
</li>
<li><p>服务端保存用户状态，不支持集群化部署</p>
</li>
</ul>
<p>那么无状态性有哪些好处呢？ </p>
<ul>
<li><p>客户端请求不依赖服务端的信息，多次请求不需要必须访问到同一台服务器 </p>
</li>
<li><p>服务端的集群和状态对客户端透明 </p>
</li>
<li><p>服务端可以任意的迁移和伸缩（可以方便的进行集群化部署） </p>
</li>
<li><p>减小服务端存储压力</p>
</li>
</ul>
<p>无状态登录的流程： </p>
<ul>
<li><p>首先客户端发送账户名/密码到服务端进行认证 </p>
</li>
<li><p>认证通过后，服务端将用户信息加密并且编码成一个 token，返回给客户端 </p>
</li>
<li><p>以后客户端每次发送请求，都需要携带认证的 token </p>
</li>
<li><p>服务端对客户端发送来的 token 进行解密，判断是否有效，并且获取用户登录信息 </p>
</li>
</ul>
<p>JWT，全称是 Json Web Token， 是一种 JSON 风格的轻量级的授权和身份认证规范，可实现无状态、 分布式的 Web 应用授权</p>
<h5 id="4-2-JWT-数据格式"><a href="#4-2-JWT-数据格式" class="headerlink" title="4.2 JWT 数据格式"></a>4.2 JWT 数据格式</h5><p>JWT 包含三部分数据：</p>
<ul>
<li><p>Header：头部，通常头部有两部分信息： </p>
<ul>
<li><p>声明类型，这里是JWT </p>
</li>
<li><p>加密算法，自定义</p>
</li>
</ul>
</li>
</ul>
<p>头部进行 <code>Base64Url</code> 编码（可解码），得到第一部分数据。 </p>
<ul>
<li><p>Payload：载荷，就是有效数据，在官方文档中(RFC7519)，这里给了7个示例信息： </p>
<ul>
<li><p>iss (issuer)：表示签发人 </p>
</li>
<li><p>exp (expiration time)：表示token过期时间 </p>
</li>
<li><p>sub (subject)：主题 </p>
</li>
<li><p>aud (audience)：受众 </p>
</li>
<li><p>nbf (Not Before)：生效时间 </p>
</li>
<li><p>iat (Issued At)：签发时间 </p>
</li>
<li><p>jti (JWT ID)：编号 </p>
</li>
</ul>
<p>这部分也会采用 Base64Url 编码，得到第二部分数据。 </p>
</li>
<li><p>Signature：签名，是整个数据的认证信息。一般根据前两步的数据，再加上服务的的密钥 </p>
<ul>
<li>secret（密钥保存在服务端，不能泄露给客户端），通过 Header 中配置的加密算法生成。用于验证整个数据完整和可靠性。 </li>
</ul>
</li>
</ul>
<h5 id="4-3-添加依赖"><a href="#4-3-添加依赖" class="headerlink" title="4.3 添加依赖"></a>4.3 添加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果使用 JDK10 或者以下的 JDK , 需要加上下面的依赖</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.70&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-4-准备工作"><a href="#4-4-准备工作" class="headerlink" title="4.4 准备工作"></a>4.4 准备工作</h5><ol>
<li><p>User 实体类 继承 UserDetails 接口</p>
</li>
<li><p>Role 实体类</p>
</li>
<li><p>UserMapper 接口</p>
</li>
<li><p>UserService 业务</p>
</li>
<li><p>controller , 简单写一个访问接口</p>
</li>
<li><p>做好上面的登录, 启动服务测试看看是否有问题</p>
</li>
<li><p>接下来 JWT 相关的过滤器配置 , <code>filter -&gt; JwtFilter</code>, </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以后所有的请求都要经过这个过滤器，然后我们就在这个过滤器中去校验 JWT字符串是否合法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="comment">//        先去请求头中获取令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (authorization == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(authorization))&#123;</span><br><span class="line"><span class="comment">//            如果请求头中没有令牌 ,则去请求参数获取令牌</span></span><br><span class="line">            authorization = req.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (authorization != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(authorization))&#123;</span><br><span class="line">            authorization = authorization.replace(<span class="string">&quot;Bearer&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//            开始解析 JWT 字符串</span></span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parserBuilder()</span><br><span class="line"><span class="comment">//                    设置解析的 KEY</span></span><br><span class="line">                    .setSigningKey(SecurityConfig.KEY).build()</span><br><span class="line"><span class="comment">//                    开始解析</span></span><br><span class="line">                    .parseClaimsJws(authorization).getBody();</span><br><span class="line"><span class="comment">//            获取 jwt中的用户名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line"><span class="comment">//            获取角色字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">authorities</span> <span class="operator">=</span> claims.get(<span class="string">&quot;authorities&quot;</span>, String.class);</span><br><span class="line"><span class="comment">//            将角色字符串转为角色对象</span></span><br><span class="line">            List&lt;SimpleGrantedAuthority&gt; authorityList = Arrays.stream(authorities.split(<span class="string">&quot;,&quot;</span>)).map(s -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(s)).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//            将当前用户信息存起来</span></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username,<span class="literal">null</span>,authorityList));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        无论 jwt 校验是否成功 , 请求都继续往后走</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>首先从请求头中提取出 authorization 字段，这个字段对应的 value 就是用户的 token。 </p>
</li>
<li><p>将提取出来的 token 字符串转换为一个 Claims 对象，再从 Claims 对象中提取出当前用户名和用户角色，创建一个<code>UsernamePasswordAuthenticationToken</code> 放到当前的 Context 中，然后执行 过滤链使请求继续执行下去。</p>
</li>
</ol>
</li>
<li><p>Spring Security 配置 , config -&gt;SecurityConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Key</span> <span class="variable">KEY</span> <span class="operator">=</span> Keys.secretKeyFor(SignatureAlgorithm.HS256);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JwtFilter jwtFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 将 JwtFilter 添加到 UsernamePasswordAuthenticationFilter 的前面</span></span><br><span class="line">        http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .successHandler((req, resp, auth) -&gt; &#123;</span><br><span class="line"><span class="comment">//                    当前登录成功的用户名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> auth.getName();</span><br><span class="line">                    <span class="comment">// 当前用户角色字符串</span></span><br><span class="line">                    Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = auth.getAuthorities();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">authStr</span> <span class="operator">=</span> authorities.stream().map(g -&gt; g.getAuthority() + <span class="string">&quot;,&quot;</span>).collect(Collectors.joining());</span><br><span class="line">                    Map&lt;String,Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    claims.put(<span class="string">&quot;authorities&quot;</span>,authStr);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">jws</span> <span class="operator">=</span></span><br><span class="line">                            <span class="comment">// 开始构建 JWT 字符串</span></span><br><span class="line">                            Jwts.builder()</span><br><span class="line">                            <span class="comment">// 设置用户名</span></span><br><span class="line">                    .setSubject(name)</span><br><span class="line">                            <span class="comment">// 各种额外属性 , 都可以存到这个里边来</span></span><br><span class="line">                    .addClaims(claims)</span><br><span class="line">                                    <span class="comment">// 设置密钥</span></span><br><span class="line">                            .signWith(KEY)</span><br><span class="line"><span class="comment">//                                    设置过期时间 , 设置七天后过期</span></span><br><span class="line">                                    .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()+<span class="number">7</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>))</span><br><span class="line">                            .compact();</span><br><span class="line">                    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">&quot;status&quot;</span>,<span class="number">200</span>);</span><br><span class="line">                    map.put(<span class="string">&quot;token&quot;</span>,jws);</span><br><span class="line">                    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    resp.getWriter().write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">                &#125;)</span><br><span class="line">                .failureHandler((req, resp, exception) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                <span class="comment">// Spring Security 不去创建 session</span></span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h5><p>启动服务 , 通过 Postman 测试</p>
<table>
<thead>
<tr>
<th><img src="/2023/01/12/SpringSecurity/image-20230106131452495.png" alt="image-20230106131452495" style="zoom:200%;"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106131637662.png" alt="image-20230106131637662" style="zoom:200%;"></td>
</tr>
<tr>
<td><img src="/2023/01/12/SpringSecurity/image-20230106131808204.png" alt="image-20230106131808204" style="zoom:200%;"></td>
</tr>
</tbody></table>
<p>**Author : ** 猫尛妖</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
